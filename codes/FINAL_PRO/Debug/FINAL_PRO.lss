
FINAL_PRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ddc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000152  00800060  00003ddc  00003e70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008001b2  008001b2  00003fc2  2**0
                  ALLOC
  3 .stab         000030d8  00000000  00000000  00003fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001002  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000809e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000823e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008430  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a83b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000bbc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000cd98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cf58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d24e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dbbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3b       	cpi	r26, 0xBF	; 191
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 82 16 	call	0x2d04	; 0x2d04 <main>
      8a:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ea       	ldi	r26, 0xA6	; 166
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a0 1e 	jmp	0x3d40	; 0x3d40 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ac 1e 	jmp	0x3d58	; 0x3d58 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ac 1e 	jmp	0x3d58	; 0x3d58 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ea       	ldi	r24, 0xA6	; 166
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a0 1e 	jmp	0x3d40	; 0x3d40 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 ea       	ldi	r22, 0xA6	; 166
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ac 1e 	jmp	0x3d58	; 0x3d58 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ac 1e 	jmp	0x3d58	; 0x3d58 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ac 1e 	jmp	0x3d58	; 0x3d58 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b0 1e 	jmp	0x3d60	; 0x3d60 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 55       	subi	r30, 0x52	; 82
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <LCD_Vid_SendCommand>:
 |        PC1|---------------->|RW        |
 |        PC0|---------------->|RS        |
 -----------                   ----------
 */
void LCD_Vid_SendCommand(unsigned char command)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	6d 97       	sbiw	r28, 0x1d	; 29
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	8d 8f       	std	Y+29, r24	; 0x1d
DIO_SetPinValue(PORTCONTROL,RS,LOW);
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	65 e0       	ldi	r22, 0x05	; 5
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTCONTROL,RW,LOW);
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	66 e0       	ldi	r22, 0x06	; 6
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTCONTROL,E,HIGH);
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	67 e0       	ldi	r22, 0x07	; 7
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e4       	ldi	r27, 0x40	; 64
     e6a:	89 8f       	std	Y+25, r24	; 0x19
     e6c:	9a 8f       	std	Y+26, r25	; 0x1a
     e6e:	ab 8f       	std	Y+27, r26	; 0x1b
     e70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e72:	69 8d       	ldd	r22, Y+25	; 0x19
     e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	4a ef       	ldi	r20, 0xFA	; 250
     e80:	54 e4       	ldi	r21, 0x44	; 68
     e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	8d 8b       	std	Y+21, r24	; 0x15
     e8c:	9e 8b       	std	Y+22, r25	; 0x16
     e8e:	af 8b       	std	Y+23, r26	; 0x17
     e90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e92:	6d 89       	ldd	r22, Y+21	; 0x15
     e94:	7e 89       	ldd	r23, Y+22	; 0x16
     e96:	8f 89       	ldd	r24, Y+23	; 0x17
     e98:	98 8d       	ldd	r25, Y+24	; 0x18
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e8       	ldi	r20, 0x80	; 128
     ea0:	5f e3       	ldi	r21, 0x3F	; 63
     ea2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ea6:	88 23       	and	r24, r24
     ea8:	2c f4       	brge	.+10     	; 0xeb4 <LCD_Vid_SendCommand+0x86>
		__ticks = 1;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	9c 8b       	std	Y+20, r25	; 0x14
     eb0:	8b 8b       	std	Y+19, r24	; 0x13
     eb2:	3f c0       	rjmp	.+126    	; 0xf32 <LCD_Vid_SendCommand+0x104>
	else if (__tmp > 65535)
     eb4:	6d 89       	ldd	r22, Y+21	; 0x15
     eb6:	7e 89       	ldd	r23, Y+22	; 0x16
     eb8:	8f 89       	ldd	r24, Y+23	; 0x17
     eba:	98 8d       	ldd	r25, Y+24	; 0x18
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	3f ef       	ldi	r19, 0xFF	; 255
     ec0:	4f e7       	ldi	r20, 0x7F	; 127
     ec2:	57 e4       	ldi	r21, 0x47	; 71
     ec4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ec8:	18 16       	cp	r1, r24
     eca:	4c f5       	brge	.+82     	; 0xf1e <LCD_Vid_SendCommand+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ecc:	69 8d       	ldd	r22, Y+25	; 0x19
     ece:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ed2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e2       	ldi	r20, 0x20	; 32
     eda:	51 e4       	ldi	r21, 0x41	; 65
     edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	bc 01       	movw	r22, r24
     ee6:	cd 01       	movw	r24, r26
     ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	9c 8b       	std	Y+20, r25	; 0x14
     ef2:	8b 8b       	std	Y+19, r24	; 0x13
     ef4:	0f c0       	rjmp	.+30     	; 0xf14 <LCD_Vid_SendCommand+0xe6>
     ef6:	88 ec       	ldi	r24, 0xC8	; 200
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	9a 8b       	std	Y+18, r25	; 0x12
     efc:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     efe:	89 89       	ldd	r24, Y+17	; 0x11
     f00:	9a 89       	ldd	r25, Y+18	; 0x12
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <LCD_Vid_SendCommand+0xd4>
     f06:	9a 8b       	std	Y+18, r25	; 0x12
     f08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0a:	8b 89       	ldd	r24, Y+19	; 0x13
     f0c:	9c 89       	ldd	r25, Y+20	; 0x14
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	9c 8b       	std	Y+20, r25	; 0x14
     f12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f14:	8b 89       	ldd	r24, Y+19	; 0x13
     f16:	9c 89       	ldd	r25, Y+20	; 0x14
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	69 f7       	brne	.-38     	; 0xef6 <LCD_Vid_SendCommand+0xc8>
     f1c:	14 c0       	rjmp	.+40     	; 0xf46 <LCD_Vid_SendCommand+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1e:	6d 89       	ldd	r22, Y+21	; 0x15
     f20:	7e 89       	ldd	r23, Y+22	; 0x16
     f22:	8f 89       	ldd	r24, Y+23	; 0x17
     f24:	98 8d       	ldd	r25, Y+24	; 0x18
     f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	9c 8b       	std	Y+20, r25	; 0x14
     f30:	8b 8b       	std	Y+19, r24	; 0x13
     f32:	8b 89       	ldd	r24, Y+19	; 0x13
     f34:	9c 89       	ldd	r25, Y+20	; 0x14
     f36:	98 8b       	std	Y+16, r25	; 0x10
     f38:	8f 87       	std	Y+15, r24	; 0x0f
     f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3c:	98 89       	ldd	r25, Y+16	; 0x10
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	f1 f7       	brne	.-4      	; 0xf3e <LCD_Vid_SendCommand+0x110>
     f42:	98 8b       	std	Y+16, r25	; 0x10
     f44:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(2);
DIO_SetPortValue(PORTDATA,command);
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	6d 8d       	ldd	r22, Y+29	; 0x1d
     f4a:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <DIO_SetPortValue>
DIO_SetPinValue(PORTCONTROL,E,LOW);
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	67 e0       	ldi	r22, 0x07	; 7
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	a0 e0       	ldi	r26, 0x00	; 0
     f5e:	b0 e4       	ldi	r27, 0x40	; 64
     f60:	8b 87       	std	Y+11, r24	; 0x0b
     f62:	9c 87       	std	Y+12, r25	; 0x0c
     f64:	ad 87       	std	Y+13, r26	; 0x0d
     f66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f68:	6b 85       	ldd	r22, Y+11	; 0x0b
     f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4a ef       	ldi	r20, 0xFA	; 250
     f76:	54 e4       	ldi	r21, 0x44	; 68
     f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	8f 83       	std	Y+7, r24	; 0x07
     f82:	98 87       	std	Y+8, r25	; 0x08
     f84:	a9 87       	std	Y+9, r26	; 0x09
     f86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f88:	6f 81       	ldd	r22, Y+7	; 0x07
     f8a:	78 85       	ldd	r23, Y+8	; 0x08
     f8c:	89 85       	ldd	r24, Y+9	; 0x09
     f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e8       	ldi	r20, 0x80	; 128
     f96:	5f e3       	ldi	r21, 0x3F	; 63
     f98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f9c:	88 23       	and	r24, r24
     f9e:	2c f4       	brge	.+10     	; 0xfaa <LCD_Vid_SendCommand+0x17c>
		__ticks = 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
     fa8:	3f c0       	rjmp	.+126    	; 0x1028 <LCD_Vid_SendCommand+0x1fa>
	else if (__tmp > 65535)
     faa:	6f 81       	ldd	r22, Y+7	; 0x07
     fac:	78 85       	ldd	r23, Y+8	; 0x08
     fae:	89 85       	ldd	r24, Y+9	; 0x09
     fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	3f ef       	ldi	r19, 0xFF	; 255
     fb6:	4f e7       	ldi	r20, 0x7F	; 127
     fb8:	57 e4       	ldi	r21, 0x47	; 71
     fba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fbe:	18 16       	cp	r1, r24
     fc0:	4c f5       	brge	.+82     	; 0x1014 <LCD_Vid_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 e2       	ldi	r20, 0x20	; 32
     fd0:	51 e4       	ldi	r21, 0x41	; 65
     fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	bc 01       	movw	r22, r24
     fdc:	cd 01       	movw	r24, r26
     fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	9e 83       	std	Y+6, r25	; 0x06
     fe8:	8d 83       	std	Y+5, r24	; 0x05
     fea:	0f c0       	rjmp	.+30     	; 0x100a <LCD_Vid_SendCommand+0x1dc>
     fec:	88 ec       	ldi	r24, 0xC8	; 200
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9c 83       	std	Y+4, r25	; 0x04
     ff2:	8b 83       	std	Y+3, r24	; 0x03
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <LCD_Vid_SendCommand+0x1ca>
     ffc:	9c 83       	std	Y+4, r25	; 0x04
     ffe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	9e 81       	ldd	r25, Y+6	; 0x06
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	9e 83       	std	Y+6, r25	; 0x06
    1008:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100a:	8d 81       	ldd	r24, Y+5	; 0x05
    100c:	9e 81       	ldd	r25, Y+6	; 0x06
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	69 f7       	brne	.-38     	; 0xfec <LCD_Vid_SendCommand+0x1be>
    1012:	14 c0       	rjmp	.+40     	; 0x103c <LCD_Vid_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1014:	6f 81       	ldd	r22, Y+7	; 0x07
    1016:	78 85       	ldd	r23, Y+8	; 0x08
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	9a 85       	ldd	r25, Y+10	; 0x0a
    101c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	9e 83       	std	Y+6, r25	; 0x06
    1026:	8d 83       	std	Y+5, r24	; 0x05
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	9a 83       	std	Y+2, r25	; 0x02
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	9a 81       	ldd	r25, Y+2	; 0x02
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <LCD_Vid_SendCommand+0x206>
    1038:	9a 83       	std	Y+2, r25	; 0x02
    103a:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,HIGH);
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	67 e0       	ldi	r22, 0x07	; 7
    1040:	41 e0       	ldi	r20, 0x01	; 1
    1042:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
}
    1046:	6d 96       	adiw	r28, 0x1d	; 29
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <LCD_Vid_SendChar>:

void LCD_Vid_SendChar(unsigned char Data)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	2f 97       	sbiw	r28, 0x0f	; 15
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_SetPinValue(PORTCONTROL,RS,HIGH);
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	65 e0       	ldi	r22, 0x05	; 5
    1072:	41 e0       	ldi	r20, 0x01	; 1
    1074:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
	DIO_SetPinValue(PORTCONTROL,RW,LOW);
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	66 e0       	ldi	r22, 0x06	; 6
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
	DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	67 e0       	ldi	r22, 0x07	; 7
    1086:	41 e0       	ldi	r20, 0x01	; 1
    1088:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
	DIO_SetPortValue(PORTDATA,Data);
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1090:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <DIO_SetPortValue>
	DIO_SetPinValue(PORTCONTROL,E,LOW);
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	67 e0       	ldi	r22, 0x07	; 7
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	a0 e0       	ldi	r26, 0x00	; 0
    10a4:	b0 e4       	ldi	r27, 0x40	; 64
    10a6:	8b 87       	std	Y+11, r24	; 0x0b
    10a8:	9c 87       	std	Y+12, r25	; 0x0c
    10aa:	ad 87       	std	Y+13, r26	; 0x0d
    10ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	4a ef       	ldi	r20, 0xFA	; 250
    10bc:	54 e4       	ldi	r21, 0x44	; 68
    10be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	8f 83       	std	Y+7, r24	; 0x07
    10c8:	98 87       	std	Y+8, r25	; 0x08
    10ca:	a9 87       	std	Y+9, r26	; 0x09
    10cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ce:	6f 81       	ldd	r22, Y+7	; 0x07
    10d0:	78 85       	ldd	r23, Y+8	; 0x08
    10d2:	89 85       	ldd	r24, Y+9	; 0x09
    10d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e8       	ldi	r20, 0x80	; 128
    10dc:	5f e3       	ldi	r21, 0x3F	; 63
    10de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10e2:	88 23       	and	r24, r24
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <LCD_Vid_SendChar+0x98>
		__ticks = 1;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	3f c0       	rjmp	.+126    	; 0x116e <LCD_Vid_SendChar+0x116>
	else if (__tmp > 65535)
    10f0:	6f 81       	ldd	r22, Y+7	; 0x07
    10f2:	78 85       	ldd	r23, Y+8	; 0x08
    10f4:	89 85       	ldd	r24, Y+9	; 0x09
    10f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	3f ef       	ldi	r19, 0xFF	; 255
    10fc:	4f e7       	ldi	r20, 0x7F	; 127
    10fe:	57 e4       	ldi	r21, 0x47	; 71
    1100:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1104:	18 16       	cp	r1, r24
    1106:	4c f5       	brge	.+82     	; 0x115a <LCD_Vid_SendChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1108:	6b 85       	ldd	r22, Y+11	; 0x0b
    110a:	7c 85       	ldd	r23, Y+12	; 0x0c
    110c:	8d 85       	ldd	r24, Y+13	; 0x0d
    110e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e2       	ldi	r20, 0x20	; 32
    1116:	51 e4       	ldi	r21, 0x41	; 65
    1118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	9e 83       	std	Y+6, r25	; 0x06
    112e:	8d 83       	std	Y+5, r24	; 0x05
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <LCD_Vid_SendChar+0xf8>
    1132:	88 ec       	ldi	r24, 0xC8	; 200
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	9c 83       	std	Y+4, r25	; 0x04
    1138:	8b 83       	std	Y+3, r24	; 0x03
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <LCD_Vid_SendChar+0xe6>
    1142:	9c 83       	std	Y+4, r25	; 0x04
    1144:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	9e 81       	ldd	r25, Y+6	; 0x06
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	69 f7       	brne	.-38     	; 0x1132 <LCD_Vid_SendChar+0xda>
    1158:	14 c0       	rjmp	.+40     	; 0x1182 <LCD_Vid_SendChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115a:	6f 81       	ldd	r22, Y+7	; 0x07
    115c:	78 85       	ldd	r23, Y+8	; 0x08
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9e 83       	std	Y+6, r25	; 0x06
    116c:	8d 83       	std	Y+5, r24	; 0x05
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <LCD_Vid_SendChar+0x122>
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	67 e0       	ldi	r22, 0x07	; 7
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>


}
    118c:	2f 96       	adiw	r28, 0x0f	; 15
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <LCD_Vid_8BitInit>:
void LCD_Vid_8BitInit(void)
{DIO_SetBinDirection(PORTCONTROL,RS,output);
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	e8 97       	sbiw	r28, 0x38	; 56
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	82 e0       	ldi	r24, 0x02	; 2
    11b4:	65 e0       	ldi	r22, 0x05	; 5
    11b6:	41 e0       	ldi	r20, 0x01	; 1
    11b8:	0e 94 ad 1b 	call	0x375a	; 0x375a <DIO_SetBinDirection>
DIO_SetBinDirection(PORTCONTROL,RW,output);
    11bc:	82 e0       	ldi	r24, 0x02	; 2
    11be:	66 e0       	ldi	r22, 0x06	; 6
    11c0:	41 e0       	ldi	r20, 0x01	; 1
    11c2:	0e 94 ad 1b 	call	0x375a	; 0x375a <DIO_SetBinDirection>
DIO_SetBinDirection(PORTCONTROL,E,output);
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	67 e0       	ldi	r22, 0x07	; 7
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	0e 94 ad 1b 	call	0x375a	; 0x375a <DIO_SetBinDirection>
DIO_SetPortdirection(PORTDATA,output);
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <DIO_SetPortdirection>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a0 ef       	ldi	r26, 0xF0	; 240
    11de:	b1 e4       	ldi	r27, 0x41	; 65
    11e0:	8d ab       	std	Y+53, r24	; 0x35
    11e2:	9e ab       	std	Y+54, r25	; 0x36
    11e4:	af ab       	std	Y+55, r26	; 0x37
    11e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e8:	6d a9       	ldd	r22, Y+53	; 0x35
    11ea:	7e a9       	ldd	r23, Y+54	; 0x36
    11ec:	8f a9       	ldd	r24, Y+55	; 0x37
    11ee:	98 ad       	ldd	r25, Y+56	; 0x38
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	4a ef       	ldi	r20, 0xFA	; 250
    11f6:	54 e4       	ldi	r21, 0x44	; 68
    11f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	89 ab       	std	Y+49, r24	; 0x31
    1202:	9a ab       	std	Y+50, r25	; 0x32
    1204:	ab ab       	std	Y+51, r26	; 0x33
    1206:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1208:	69 a9       	ldd	r22, Y+49	; 0x31
    120a:	7a a9       	ldd	r23, Y+50	; 0x32
    120c:	8b a9       	ldd	r24, Y+51	; 0x33
    120e:	9c a9       	ldd	r25, Y+52	; 0x34
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e8       	ldi	r20, 0x80	; 128
    1216:	5f e3       	ldi	r21, 0x3F	; 63
    1218:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    121c:	88 23       	and	r24, r24
    121e:	2c f4       	brge	.+10     	; 0x122a <LCD_Vid_8BitInit+0x8c>
		__ticks = 1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	98 ab       	std	Y+48, r25	; 0x30
    1226:	8f a7       	std	Y+47, r24	; 0x2f
    1228:	3f c0       	rjmp	.+126    	; 0x12a8 <LCD_Vid_8BitInit+0x10a>
	else if (__tmp > 65535)
    122a:	69 a9       	ldd	r22, Y+49	; 0x31
    122c:	7a a9       	ldd	r23, Y+50	; 0x32
    122e:	8b a9       	ldd	r24, Y+51	; 0x33
    1230:	9c a9       	ldd	r25, Y+52	; 0x34
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	3f ef       	ldi	r19, 0xFF	; 255
    1236:	4f e7       	ldi	r20, 0x7F	; 127
    1238:	57 e4       	ldi	r21, 0x47	; 71
    123a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    123e:	18 16       	cp	r1, r24
    1240:	4c f5       	brge	.+82     	; 0x1294 <LCD_Vid_8BitInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1242:	6d a9       	ldd	r22, Y+53	; 0x35
    1244:	7e a9       	ldd	r23, Y+54	; 0x36
    1246:	8f a9       	ldd	r24, Y+55	; 0x37
    1248:	98 ad       	ldd	r25, Y+56	; 0x38
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e2       	ldi	r20, 0x20	; 32
    1250:	51 e4       	ldi	r21, 0x41	; 65
    1252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	bc 01       	movw	r22, r24
    125c:	cd 01       	movw	r24, r26
    125e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	98 ab       	std	Y+48, r25	; 0x30
    1268:	8f a7       	std	Y+47, r24	; 0x2f
    126a:	0f c0       	rjmp	.+30     	; 0x128a <LCD_Vid_8BitInit+0xec>
    126c:	88 ec       	ldi	r24, 0xC8	; 200
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	9e a7       	std	Y+46, r25	; 0x2e
    1272:	8d a7       	std	Y+45, r24	; 0x2d
    1274:	8d a5       	ldd	r24, Y+45	; 0x2d
    1276:	9e a5       	ldd	r25, Y+46	; 0x2e
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	f1 f7       	brne	.-4      	; 0x1278 <LCD_Vid_8BitInit+0xda>
    127c:	9e a7       	std	Y+46, r25	; 0x2e
    127e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1280:	8f a5       	ldd	r24, Y+47	; 0x2f
    1282:	98 a9       	ldd	r25, Y+48	; 0x30
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	98 ab       	std	Y+48, r25	; 0x30
    1288:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128a:	8f a5       	ldd	r24, Y+47	; 0x2f
    128c:	98 a9       	ldd	r25, Y+48	; 0x30
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	69 f7       	brne	.-38     	; 0x126c <LCD_Vid_8BitInit+0xce>
    1292:	14 c0       	rjmp	.+40     	; 0x12bc <LCD_Vid_8BitInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1294:	69 a9       	ldd	r22, Y+49	; 0x31
    1296:	7a a9       	ldd	r23, Y+50	; 0x32
    1298:	8b a9       	ldd	r24, Y+51	; 0x33
    129a:	9c a9       	ldd	r25, Y+52	; 0x34
    129c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	98 ab       	std	Y+48, r25	; 0x30
    12a6:	8f a7       	std	Y+47, r24	; 0x2f
    12a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    12aa:	98 a9       	ldd	r25, Y+48	; 0x30
    12ac:	9c a7       	std	Y+44, r25	; 0x2c
    12ae:	8b a7       	std	Y+43, r24	; 0x2b
    12b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    12b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <LCD_Vid_8BitInit+0x116>
    12b8:	9c a7       	std	Y+44, r25	; 0x2c
    12ba:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(30);
LCD_Vid_SendCommand(FunctionSet_8Bit);
    12bc:	88 e3       	ldi	r24, 0x38	; 56
    12be:	0e 94 17 07 	call	0xe2e	; 0xe2e <LCD_Vid_SendCommand>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a0 e0       	ldi	r26, 0x00	; 0
    12c8:	b0 e4       	ldi	r27, 0x40	; 64
    12ca:	8f a3       	std	Y+39, r24	; 0x27
    12cc:	98 a7       	std	Y+40, r25	; 0x28
    12ce:	a9 a7       	std	Y+41, r26	; 0x29
    12d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d2:	6f a1       	ldd	r22, Y+39	; 0x27
    12d4:	78 a5       	ldd	r23, Y+40	; 0x28
    12d6:	89 a5       	ldd	r24, Y+41	; 0x29
    12d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	4a ef       	ldi	r20, 0xFA	; 250
    12e0:	54 e4       	ldi	r21, 0x44	; 68
    12e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	8b a3       	std	Y+35, r24	; 0x23
    12ec:	9c a3       	std	Y+36, r25	; 0x24
    12ee:	ad a3       	std	Y+37, r26	; 0x25
    12f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12f2:	6b a1       	ldd	r22, Y+35	; 0x23
    12f4:	7c a1       	ldd	r23, Y+36	; 0x24
    12f6:	8d a1       	ldd	r24, Y+37	; 0x25
    12f8:	9e a1       	ldd	r25, Y+38	; 0x26
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e8       	ldi	r20, 0x80	; 128
    1300:	5f e3       	ldi	r21, 0x3F	; 63
    1302:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1306:	88 23       	and	r24, r24
    1308:	2c f4       	brge	.+10     	; 0x1314 <LCD_Vid_8BitInit+0x176>
		__ticks = 1;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	9a a3       	std	Y+34, r25	; 0x22
    1310:	89 a3       	std	Y+33, r24	; 0x21
    1312:	3f c0       	rjmp	.+126    	; 0x1392 <LCD_Vid_8BitInit+0x1f4>
	else if (__tmp > 65535)
    1314:	6b a1       	ldd	r22, Y+35	; 0x23
    1316:	7c a1       	ldd	r23, Y+36	; 0x24
    1318:	8d a1       	ldd	r24, Y+37	; 0x25
    131a:	9e a1       	ldd	r25, Y+38	; 0x26
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	3f ef       	ldi	r19, 0xFF	; 255
    1320:	4f e7       	ldi	r20, 0x7F	; 127
    1322:	57 e4       	ldi	r21, 0x47	; 71
    1324:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1328:	18 16       	cp	r1, r24
    132a:	4c f5       	brge	.+82     	; 0x137e <LCD_Vid_8BitInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132c:	6f a1       	ldd	r22, Y+39	; 0x27
    132e:	78 a5       	ldd	r23, Y+40	; 0x28
    1330:	89 a5       	ldd	r24, Y+41	; 0x29
    1332:	9a a5       	ldd	r25, Y+42	; 0x2a
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e2       	ldi	r20, 0x20	; 32
    133a:	51 e4       	ldi	r21, 0x41	; 65
    133c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	bc 01       	movw	r22, r24
    1346:	cd 01       	movw	r24, r26
    1348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9a a3       	std	Y+34, r25	; 0x22
    1352:	89 a3       	std	Y+33, r24	; 0x21
    1354:	0f c0       	rjmp	.+30     	; 0x1374 <LCD_Vid_8BitInit+0x1d6>
    1356:	88 ec       	ldi	r24, 0xC8	; 200
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	98 a3       	std	Y+32, r25	; 0x20
    135c:	8f 8f       	std	Y+31, r24	; 0x1f
    135e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1360:	98 a1       	ldd	r25, Y+32	; 0x20
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <LCD_Vid_8BitInit+0x1c4>
    1366:	98 a3       	std	Y+32, r25	; 0x20
    1368:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136a:	89 a1       	ldd	r24, Y+33	; 0x21
    136c:	9a a1       	ldd	r25, Y+34	; 0x22
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	9a a3       	std	Y+34, r25	; 0x22
    1372:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1374:	89 a1       	ldd	r24, Y+33	; 0x21
    1376:	9a a1       	ldd	r25, Y+34	; 0x22
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	69 f7       	brne	.-38     	; 0x1356 <LCD_Vid_8BitInit+0x1b8>
    137c:	14 c0       	rjmp	.+40     	; 0x13a6 <LCD_Vid_8BitInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137e:	6b a1       	ldd	r22, Y+35	; 0x23
    1380:	7c a1       	ldd	r23, Y+36	; 0x24
    1382:	8d a1       	ldd	r24, Y+37	; 0x25
    1384:	9e a1       	ldd	r25, Y+38	; 0x26
    1386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	9a a3       	std	Y+34, r25	; 0x22
    1390:	89 a3       	std	Y+33, r24	; 0x21
    1392:	89 a1       	ldd	r24, Y+33	; 0x21
    1394:	9a a1       	ldd	r25, Y+34	; 0x22
    1396:	9e 8f       	std	Y+30, r25	; 0x1e
    1398:	8d 8f       	std	Y+29, r24	; 0x1d
    139a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    139c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <LCD_Vid_8BitInit+0x200>
    13a2:	9e 8f       	std	Y+30, r25	; 0x1e
    13a4:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(2);
LCD_Vid_SendCommand(DisplayON);
    13a6:	8e e0       	ldi	r24, 0x0E	; 14
    13a8:	0e 94 17 07 	call	0xe2e	; 0xe2e <LCD_Vid_SendCommand>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a0 e0       	ldi	r26, 0x00	; 0
    13b2:	b0 e4       	ldi	r27, 0x40	; 64
    13b4:	89 8f       	std	Y+25, r24	; 0x19
    13b6:	9a 8f       	std	Y+26, r25	; 0x1a
    13b8:	ab 8f       	std	Y+27, r26	; 0x1b
    13ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13bc:	69 8d       	ldd	r22, Y+25	; 0x19
    13be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	4a ef       	ldi	r20, 0xFA	; 250
    13ca:	54 e4       	ldi	r21, 0x44	; 68
    13cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	8d 8b       	std	Y+21, r24	; 0x15
    13d6:	9e 8b       	std	Y+22, r25	; 0x16
    13d8:	af 8b       	std	Y+23, r26	; 0x17
    13da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13dc:	6d 89       	ldd	r22, Y+21	; 0x15
    13de:	7e 89       	ldd	r23, Y+22	; 0x16
    13e0:	8f 89       	ldd	r24, Y+23	; 0x17
    13e2:	98 8d       	ldd	r25, Y+24	; 0x18
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e8       	ldi	r20, 0x80	; 128
    13ea:	5f e3       	ldi	r21, 0x3F	; 63
    13ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	2c f4       	brge	.+10     	; 0x13fe <LCD_Vid_8BitInit+0x260>
		__ticks = 1;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9c 8b       	std	Y+20, r25	; 0x14
    13fa:	8b 8b       	std	Y+19, r24	; 0x13
    13fc:	3f c0       	rjmp	.+126    	; 0x147c <LCD_Vid_8BitInit+0x2de>
	else if (__tmp > 65535)
    13fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1400:	7e 89       	ldd	r23, Y+22	; 0x16
    1402:	8f 89       	ldd	r24, Y+23	; 0x17
    1404:	98 8d       	ldd	r25, Y+24	; 0x18
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	3f ef       	ldi	r19, 0xFF	; 255
    140a:	4f e7       	ldi	r20, 0x7F	; 127
    140c:	57 e4       	ldi	r21, 0x47	; 71
    140e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1412:	18 16       	cp	r1, r24
    1414:	4c f5       	brge	.+82     	; 0x1468 <LCD_Vid_8BitInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1416:	69 8d       	ldd	r22, Y+25	; 0x19
    1418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    141a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    141c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e2       	ldi	r20, 0x20	; 32
    1424:	51 e4       	ldi	r21, 0x41	; 65
    1426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	bc 01       	movw	r22, r24
    1430:	cd 01       	movw	r24, r26
    1432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	9c 8b       	std	Y+20, r25	; 0x14
    143c:	8b 8b       	std	Y+19, r24	; 0x13
    143e:	0f c0       	rjmp	.+30     	; 0x145e <LCD_Vid_8BitInit+0x2c0>
    1440:	88 ec       	ldi	r24, 0xC8	; 200
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	9a 8b       	std	Y+18, r25	; 0x12
    1446:	89 8b       	std	Y+17, r24	; 0x11
    1448:	89 89       	ldd	r24, Y+17	; 0x11
    144a:	9a 89       	ldd	r25, Y+18	; 0x12
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <LCD_Vid_8BitInit+0x2ae>
    1450:	9a 8b       	std	Y+18, r25	; 0x12
    1452:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1454:	8b 89       	ldd	r24, Y+19	; 0x13
    1456:	9c 89       	ldd	r25, Y+20	; 0x14
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	9c 8b       	std	Y+20, r25	; 0x14
    145c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145e:	8b 89       	ldd	r24, Y+19	; 0x13
    1460:	9c 89       	ldd	r25, Y+20	; 0x14
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	69 f7       	brne	.-38     	; 0x1440 <LCD_Vid_8BitInit+0x2a2>
    1466:	14 c0       	rjmp	.+40     	; 0x1490 <LCD_Vid_8BitInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1468:	6d 89       	ldd	r22, Y+21	; 0x15
    146a:	7e 89       	ldd	r23, Y+22	; 0x16
    146c:	8f 89       	ldd	r24, Y+23	; 0x17
    146e:	98 8d       	ldd	r25, Y+24	; 0x18
    1470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	9c 8b       	std	Y+20, r25	; 0x14
    147a:	8b 8b       	std	Y+19, r24	; 0x13
    147c:	8b 89       	ldd	r24, Y+19	; 0x13
    147e:	9c 89       	ldd	r25, Y+20	; 0x14
    1480:	98 8b       	std	Y+16, r25	; 0x10
    1482:	8f 87       	std	Y+15, r24	; 0x0f
    1484:	8f 85       	ldd	r24, Y+15	; 0x0f
    1486:	98 89       	ldd	r25, Y+16	; 0x10
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	f1 f7       	brne	.-4      	; 0x1488 <LCD_Vid_8BitInit+0x2ea>
    148c:	98 8b       	std	Y+16, r25	; 0x10
    148e:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(2);
LCD_Vid_SendCommand(DisplayClear);
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	0e 94 17 07 	call	0xe2e	; 0xe2e <LCD_Vid_SendCommand>
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a0 e0       	ldi	r26, 0x00	; 0
    149c:	b0 e4       	ldi	r27, 0x40	; 64
    149e:	8b 87       	std	Y+11, r24	; 0x0b
    14a0:	9c 87       	std	Y+12, r25	; 0x0c
    14a2:	ad 87       	std	Y+13, r26	; 0x0d
    14a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	4a ef       	ldi	r20, 0xFA	; 250
    14b4:	54 e4       	ldi	r21, 0x44	; 68
    14b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	8f 83       	std	Y+7, r24	; 0x07
    14c0:	98 87       	std	Y+8, r25	; 0x08
    14c2:	a9 87       	std	Y+9, r26	; 0x09
    14c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14c6:	6f 81       	ldd	r22, Y+7	; 0x07
    14c8:	78 85       	ldd	r23, Y+8	; 0x08
    14ca:	89 85       	ldd	r24, Y+9	; 0x09
    14cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e8       	ldi	r20, 0x80	; 128
    14d4:	5f e3       	ldi	r21, 0x3F	; 63
    14d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14da:	88 23       	and	r24, r24
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <LCD_Vid_8BitInit+0x34a>
		__ticks = 1;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	9e 83       	std	Y+6, r25	; 0x06
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	3f c0       	rjmp	.+126    	; 0x1566 <LCD_Vid_8BitInit+0x3c8>
	else if (__tmp > 65535)
    14e8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ea:	78 85       	ldd	r23, Y+8	; 0x08
    14ec:	89 85       	ldd	r24, Y+9	; 0x09
    14ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	3f ef       	ldi	r19, 0xFF	; 255
    14f4:	4f e7       	ldi	r20, 0x7F	; 127
    14f6:	57 e4       	ldi	r21, 0x47	; 71
    14f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14fc:	18 16       	cp	r1, r24
    14fe:	4c f5       	brge	.+82     	; 0x1552 <LCD_Vid_8BitInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1500:	6b 85       	ldd	r22, Y+11	; 0x0b
    1502:	7c 85       	ldd	r23, Y+12	; 0x0c
    1504:	8d 85       	ldd	r24, Y+13	; 0x0d
    1506:	9e 85       	ldd	r25, Y+14	; 0x0e
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e2       	ldi	r20, 0x20	; 32
    150e:	51 e4       	ldi	r21, 0x41	; 65
    1510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	bc 01       	movw	r22, r24
    151a:	cd 01       	movw	r24, r26
    151c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	9e 83       	std	Y+6, r25	; 0x06
    1526:	8d 83       	std	Y+5, r24	; 0x05
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <LCD_Vid_8BitInit+0x3aa>
    152a:	88 ec       	ldi	r24, 0xC8	; 200
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9c 83       	std	Y+4, r25	; 0x04
    1530:	8b 83       	std	Y+3, r24	; 0x03
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	9c 81       	ldd	r25, Y+4	; 0x04
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <LCD_Vid_8BitInit+0x398>
    153a:	9c 83       	std	Y+4, r25	; 0x04
    153c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	9e 83       	std	Y+6, r25	; 0x06
    1546:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	69 f7       	brne	.-38     	; 0x152a <LCD_Vid_8BitInit+0x38c>
    1550:	14 c0       	rjmp	.+40     	; 0x157a <LCD_Vid_8BitInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1552:	6f 81       	ldd	r22, Y+7	; 0x07
    1554:	78 85       	ldd	r23, Y+8	; 0x08
    1556:	89 85       	ldd	r24, Y+9	; 0x09
    1558:	9a 85       	ldd	r25, Y+10	; 0x0a
    155a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <LCD_Vid_8BitInit+0x3d4>
    1576:	9a 83       	std	Y+2, r25	; 0x02
    1578:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
LCD_Vid_SendCommand(EntryModeSet);
    157a:	86 e0       	ldi	r24, 0x06	; 6
    157c:	0e 94 17 07 	call	0xe2e	; 0xe2e <LCD_Vid_SendCommand>
}
    1580:	e8 96       	adiw	r28, 0x38	; 56
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <LCD_Vid_SendCommand4Bit_test>:
void LCD_Vid_SendCommand4Bit_test(unsigned char command)
{int x;
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	c7 55       	subi	r28, 0x57	; 87
    15a0:	d0 40       	sbci	r29, 0x00	; 0
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	fe 01       	movw	r30, r28
    15ae:	e9 5a       	subi	r30, 0xA9	; 169
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	80 83       	st	Z, r24
DIO_SetPinValue(PORTCONTROL,RS,LOW);
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	65 e0       	ldi	r22, 0x05	; 5
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTCONTROL,RW,LOW);
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	66 e0       	ldi	r22, 0x06	; 6
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
//x=command>>4;
//x=x&0x0f;
x=command;
    15c8:	de 01       	movw	r26, r28
    15ca:	ab 5a       	subi	r26, 0xAB	; 171
    15cc:	bf 4f       	sbci	r27, 0xFF	; 255
    15ce:	fe 01       	movw	r30, r28
    15d0:	e9 5a       	subi	r30, 0xA9	; 169
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 81       	ld	r24, Z
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	8d 93       	st	X+, r24
    15dc:	9c 93       	st	X, r25
x=x&0xf0;
    15de:	de 01       	movw	r26, r28
    15e0:	ab 5a       	subi	r26, 0xAB	; 171
    15e2:	bf 4f       	sbci	r27, 0xFF	; 255
    15e4:	fe 01       	movw	r30, r28
    15e6:	eb 5a       	subi	r30, 0xAB	; 171
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
    15ee:	80 7f       	andi	r24, 0xF0	; 240
    15f0:	90 70       	andi	r25, 0x00	; 0
    15f2:	8d 93       	st	X+, r24
    15f4:	9c 93       	st	X, r25
LCD_INFO.LCD_BYTE=x;
    15f6:	fe 01       	movw	r30, r28
    15f8:	eb 5a       	subi	r30, 0xAB	; 171
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	80 81       	ld	r24, Z
    15fe:	80 93 b2 01 	sts	0x01B2, r24
DIO_SetPinValue(PORTDATA,0,LCD_INFO.BITs.b4);
    1602:	80 91 b2 01 	lds	r24, 0x01B2
    1606:	82 95       	swap	r24
    1608:	8f 70       	andi	r24, 0x0F	; 15
    160a:	81 70       	andi	r24, 0x01	; 1
    160c:	98 2f       	mov	r25, r24
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	49 2f       	mov	r20, r25
    1614:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,1,LCD_INFO.BITs.b5);
    1618:	80 91 b2 01 	lds	r24, 0x01B2
    161c:	82 95       	swap	r24
    161e:	86 95       	lsr	r24
    1620:	87 70       	andi	r24, 0x07	; 7
    1622:	81 70       	andi	r24, 0x01	; 1
    1624:	98 2f       	mov	r25, r24
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	49 2f       	mov	r20, r25
    162c:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,2,LCD_INFO.BITs.b6);
    1630:	80 91 b2 01 	lds	r24, 0x01B2
    1634:	82 95       	swap	r24
    1636:	86 95       	lsr	r24
    1638:	86 95       	lsr	r24
    163a:	83 70       	andi	r24, 0x03	; 3
    163c:	81 70       	andi	r24, 0x01	; 1
    163e:	98 2f       	mov	r25, r24
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	62 e0       	ldi	r22, 0x02	; 2
    1644:	49 2f       	mov	r20, r25
    1646:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,3,LCD_INFO.BITs.b7);
    164a:	80 91 b2 01 	lds	r24, 0x01B2
    164e:	88 1f       	adc	r24, r24
    1650:	88 27       	eor	r24, r24
    1652:	88 1f       	adc	r24, r24
    1654:	98 2f       	mov	r25, r24
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	63 e0       	ldi	r22, 0x03	; 3
    165a:	49 2f       	mov	r20, r25
    165c:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>


DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	67 e0       	ldi	r22, 0x07	; 7
    1664:	41 e0       	ldi	r20, 0x01	; 1
    1666:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
    166a:	fe 01       	movw	r30, r28
    166c:	ef 5a       	subi	r30, 0xAF	; 175
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	a0 e0       	ldi	r26, 0x00	; 0
    1676:	b0 e4       	ldi	r27, 0x40	; 64
    1678:	80 83       	st	Z, r24
    167a:	91 83       	std	Z+1, r25	; 0x01
    167c:	a2 83       	std	Z+2, r26	; 0x02
    167e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1680:	8e 01       	movw	r16, r28
    1682:	03 5b       	subi	r16, 0xB3	; 179
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	fe 01       	movw	r30, r28
    1688:	ef 5a       	subi	r30, 0xAF	; 175
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4a ef       	ldi	r20, 0xFA	; 250
    169a:	54 e4       	ldi	r21, 0x44	; 68
    169c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	f8 01       	movw	r30, r16
    16a6:	80 83       	st	Z, r24
    16a8:	91 83       	std	Z+1, r25	; 0x01
    16aa:	a2 83       	std	Z+2, r26	; 0x02
    16ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ae:	fe 01       	movw	r30, r28
    16b0:	e3 5b       	subi	r30, 0xB3	; 179
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	60 81       	ld	r22, Z
    16b6:	71 81       	ldd	r23, Z+1	; 0x01
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	93 81       	ldd	r25, Z+3	; 0x03
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e8       	ldi	r20, 0x80	; 128
    16c2:	5f e3       	ldi	r21, 0x3F	; 63
    16c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16c8:	88 23       	and	r24, r24
    16ca:	44 f4       	brge	.+16     	; 0x16dc <LCD_Vid_SendCommand4Bit_test+0x14a>
		__ticks = 1;
    16cc:	fe 01       	movw	r30, r28
    16ce:	e5 5b       	subi	r30, 0xB5	; 181
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	80 83       	st	Z, r24
    16da:	64 c0       	rjmp	.+200    	; 0x17a4 <LCD_Vid_SendCommand4Bit_test+0x212>
	else if (__tmp > 65535)
    16dc:	fe 01       	movw	r30, r28
    16de:	e3 5b       	subi	r30, 0xB3	; 179
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	3f ef       	ldi	r19, 0xFF	; 255
    16ee:	4f e7       	ldi	r20, 0x7F	; 127
    16f0:	57 e4       	ldi	r21, 0x47	; 71
    16f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	0c f0       	brlt	.+2      	; 0x16fc <LCD_Vid_SendCommand4Bit_test+0x16a>
    16fa:	43 c0       	rjmp	.+134    	; 0x1782 <LCD_Vid_SendCommand4Bit_test+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fc:	fe 01       	movw	r30, r28
    16fe:	ef 5a       	subi	r30, 0xAF	; 175
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e2       	ldi	r20, 0x20	; 32
    1710:	51 e4       	ldi	r21, 0x41	; 65
    1712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	8e 01       	movw	r16, r28
    171c:	05 5b       	subi	r16, 0xB5	; 181
    171e:	1f 4f       	sbci	r17, 0xFF	; 255
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	f8 01       	movw	r30, r16
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	80 83       	st	Z, r24
    1732:	1f c0       	rjmp	.+62     	; 0x1772 <LCD_Vid_SendCommand4Bit_test+0x1e0>
    1734:	fe 01       	movw	r30, r28
    1736:	e7 5b       	subi	r30, 0xB7	; 183
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	88 ec       	ldi	r24, 0xC8	; 200
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	91 83       	std	Z+1, r25	; 0x01
    1740:	80 83       	st	Z, r24
    1742:	fe 01       	movw	r30, r28
    1744:	e7 5b       	subi	r30, 0xB7	; 183
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	80 81       	ld	r24, Z
    174a:	91 81       	ldd	r25, Z+1	; 0x01
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <LCD_Vid_SendCommand4Bit_test+0x1ba>
    1750:	fe 01       	movw	r30, r28
    1752:	e7 5b       	subi	r30, 0xB7	; 183
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175a:	de 01       	movw	r26, r28
    175c:	a5 5b       	subi	r26, 0xB5	; 181
    175e:	bf 4f       	sbci	r27, 0xFF	; 255
    1760:	fe 01       	movw	r30, r28
    1762:	e5 5b       	subi	r30, 0xB5	; 181
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	11 96       	adiw	r26, 0x01	; 1
    176e:	9c 93       	st	X, r25
    1770:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	fe 01       	movw	r30, r28
    1774:	e5 5b       	subi	r30, 0xB5	; 181
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	d1 f6       	brne	.-76     	; 0x1734 <LCD_Vid_SendCommand4Bit_test+0x1a2>
    1780:	27 c0       	rjmp	.+78     	; 0x17d0 <LCD_Vid_SendCommand4Bit_test+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1782:	8e 01       	movw	r16, r28
    1784:	05 5b       	subi	r16, 0xB5	; 181
    1786:	1f 4f       	sbci	r17, 0xFF	; 255
    1788:	fe 01       	movw	r30, r28
    178a:	e3 5b       	subi	r30, 0xB3	; 179
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	60 81       	ld	r22, Z
    1790:	71 81       	ldd	r23, Z+1	; 0x01
    1792:	82 81       	ldd	r24, Z+2	; 0x02
    1794:	93 81       	ldd	r25, Z+3	; 0x03
    1796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	f8 01       	movw	r30, r16
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	80 83       	st	Z, r24
    17a4:	de 01       	movw	r26, r28
    17a6:	a9 5b       	subi	r26, 0xB9	; 185
    17a8:	bf 4f       	sbci	r27, 0xFF	; 255
    17aa:	fe 01       	movw	r30, r28
    17ac:	e5 5b       	subi	r30, 0xB5	; 181
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	80 81       	ld	r24, Z
    17b2:	91 81       	ldd	r25, Z+1	; 0x01
    17b4:	8d 93       	st	X+, r24
    17b6:	9c 93       	st	X, r25
    17b8:	fe 01       	movw	r30, r28
    17ba:	e9 5b       	subi	r30, 0xB9	; 185
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	80 81       	ld	r24, Z
    17c0:	91 81       	ldd	r25, Z+1	; 0x01
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <LCD_Vid_SendCommand4Bit_test+0x230>
    17c6:	fe 01       	movw	r30, r28
    17c8:	e9 5b       	subi	r30, 0xB9	; 185
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	91 83       	std	Z+1, r25	; 0x01
    17ce:	80 83       	st	Z, r24
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,LOW);
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	67 e0       	ldi	r22, 0x07	; 7
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
    17da:	fe 01       	movw	r30, r28
    17dc:	ed 5b       	subi	r30, 0xBD	; 189
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a0 e0       	ldi	r26, 0x00	; 0
    17e6:	b0 e4       	ldi	r27, 0x40	; 64
    17e8:	80 83       	st	Z, r24
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	a2 83       	std	Z+2, r26	; 0x02
    17ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f0:	8e 01       	movw	r16, r28
    17f2:	01 5c       	subi	r16, 0xC1	; 193
    17f4:	1f 4f       	sbci	r17, 0xFF	; 255
    17f6:	fe 01       	movw	r30, r28
    17f8:	ed 5b       	subi	r30, 0xBD	; 189
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	4a ef       	ldi	r20, 0xFA	; 250
    180a:	54 e4       	ldi	r21, 0x44	; 68
    180c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	f8 01       	movw	r30, r16
    1816:	80 83       	st	Z, r24
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	a2 83       	std	Z+2, r26	; 0x02
    181c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    181e:	fe 01       	movw	r30, r28
    1820:	ff 96       	adiw	r30, 0x3f	; 63
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	93 81       	ldd	r25, Z+3	; 0x03
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1836:	88 23       	and	r24, r24
    1838:	2c f4       	brge	.+10     	; 0x1844 <LCD_Vid_SendCommand4Bit_test+0x2b2>
		__ticks = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9e af       	std	Y+62, r25	; 0x3e
    1840:	8d af       	std	Y+61, r24	; 0x3d
    1842:	46 c0       	rjmp	.+140    	; 0x18d0 <LCD_Vid_SendCommand4Bit_test+0x33e>
	else if (__tmp > 65535)
    1844:	fe 01       	movw	r30, r28
    1846:	ff 96       	adiw	r30, 0x3f	; 63
    1848:	60 81       	ld	r22, Z
    184a:	71 81       	ldd	r23, Z+1	; 0x01
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	64 f5       	brge	.+88     	; 0x18b8 <LCD_Vid_SendCommand4Bit_test+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	fe 01       	movw	r30, r28
    1862:	ed 5b       	subi	r30, 0xBD	; 189
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e2       	ldi	r20, 0x20	; 32
    1874:	51 e4       	ldi	r21, 0x41	; 65
    1876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	9e af       	std	Y+62, r25	; 0x3e
    188c:	8d af       	std	Y+61, r24	; 0x3d
    188e:	0f c0       	rjmp	.+30     	; 0x18ae <LCD_Vid_SendCommand4Bit_test+0x31c>
    1890:	88 ec       	ldi	r24, 0xC8	; 200
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9c af       	std	Y+60, r25	; 0x3c
    1896:	8b af       	std	Y+59, r24	; 0x3b
    1898:	8b ad       	ldd	r24, Y+59	; 0x3b
    189a:	9c ad       	ldd	r25, Y+60	; 0x3c
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <LCD_Vid_SendCommand4Bit_test+0x30a>
    18a0:	9c af       	std	Y+60, r25	; 0x3c
    18a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    18a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	9e af       	std	Y+62, r25	; 0x3e
    18ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    18b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	69 f7       	brne	.-38     	; 0x1890 <LCD_Vid_SendCommand4Bit_test+0x2fe>
    18b6:	16 c0       	rjmp	.+44     	; 0x18e4 <LCD_Vid_SendCommand4Bit_test+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b8:	fe 01       	movw	r30, r28
    18ba:	ff 96       	adiw	r30, 0x3f	; 63
    18bc:	60 81       	ld	r22, Z
    18be:	71 81       	ldd	r23, Z+1	; 0x01
    18c0:	82 81       	ldd	r24, Z+2	; 0x02
    18c2:	93 81       	ldd	r25, Z+3	; 0x03
    18c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	9e af       	std	Y+62, r25	; 0x3e
    18ce:	8d af       	std	Y+61, r24	; 0x3d
    18d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    18d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    18d4:	9a af       	std	Y+58, r25	; 0x3a
    18d6:	89 af       	std	Y+57, r24	; 0x39
    18d8:	89 ad       	ldd	r24, Y+57	; 0x39
    18da:	9a ad       	ldd	r25, Y+58	; 0x3a
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <LCD_Vid_SendCommand4Bit_test+0x34a>
    18e0:	9a af       	std	Y+58, r25	; 0x3a
    18e2:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,HIGH);
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	67 e0       	ldi	r22, 0x07	; 7
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>

LCD_INFO.LCD_BYTE=x;
    18ee:	fe 01       	movw	r30, r28
    18f0:	eb 5a       	subi	r30, 0xAB	; 171
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	80 81       	ld	r24, Z
    18f6:	80 93 b2 01 	sts	0x01B2, r24
DIO_SetPinValue(PORTDATA,0,LCD_INFO.BITs.b4);
    18fa:	80 91 b2 01 	lds	r24, 0x01B2
    18fe:	82 95       	swap	r24
    1900:	8f 70       	andi	r24, 0x0F	; 15
    1902:	81 70       	andi	r24, 0x01	; 1
    1904:	98 2f       	mov	r25, r24
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	49 2f       	mov	r20, r25
    190c:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,1,LCD_INFO.BITs.b5);
    1910:	80 91 b2 01 	lds	r24, 0x01B2
    1914:	82 95       	swap	r24
    1916:	86 95       	lsr	r24
    1918:	87 70       	andi	r24, 0x07	; 7
    191a:	81 70       	andi	r24, 0x01	; 1
    191c:	98 2f       	mov	r25, r24
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	49 2f       	mov	r20, r25
    1924:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,2,LCD_INFO.BITs.b6);
    1928:	80 91 b2 01 	lds	r24, 0x01B2
    192c:	82 95       	swap	r24
    192e:	86 95       	lsr	r24
    1930:	86 95       	lsr	r24
    1932:	83 70       	andi	r24, 0x03	; 3
    1934:	81 70       	andi	r24, 0x01	; 1
    1936:	98 2f       	mov	r25, r24
    1938:	82 e0       	ldi	r24, 0x02	; 2
    193a:	62 e0       	ldi	r22, 0x02	; 2
    193c:	49 2f       	mov	r20, r25
    193e:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,3,LCD_INFO.BITs.b7);
    1942:	80 91 b2 01 	lds	r24, 0x01B2
    1946:	88 1f       	adc	r24, r24
    1948:	88 27       	eor	r24, r24
    194a:	88 1f       	adc	r24, r24
    194c:	98 2f       	mov	r25, r24
    194e:	82 e0       	ldi	r24, 0x02	; 2
    1950:	63 e0       	ldi	r22, 0x03	; 3
    1952:	49 2f       	mov	r20, r25
    1954:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>

DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1958:	82 e0       	ldi	r24, 0x02	; 2
    195a:	67 e0       	ldi	r22, 0x07	; 7
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	a0 e0       	ldi	r26, 0x00	; 0
    1968:	b0 e4       	ldi	r27, 0x40	; 64
    196a:	8d ab       	std	Y+53, r24	; 0x35
    196c:	9e ab       	std	Y+54, r25	; 0x36
    196e:	af ab       	std	Y+55, r26	; 0x37
    1970:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1972:	6d a9       	ldd	r22, Y+53	; 0x35
    1974:	7e a9       	ldd	r23, Y+54	; 0x36
    1976:	8f a9       	ldd	r24, Y+55	; 0x37
    1978:	98 ad       	ldd	r25, Y+56	; 0x38
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	4a ef       	ldi	r20, 0xFA	; 250
    1980:	54 e4       	ldi	r21, 0x44	; 68
    1982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	89 ab       	std	Y+49, r24	; 0x31
    198c:	9a ab       	std	Y+50, r25	; 0x32
    198e:	ab ab       	std	Y+51, r26	; 0x33
    1990:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1992:	69 a9       	ldd	r22, Y+49	; 0x31
    1994:	7a a9       	ldd	r23, Y+50	; 0x32
    1996:	8b a9       	ldd	r24, Y+51	; 0x33
    1998:	9c a9       	ldd	r25, Y+52	; 0x34
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e8       	ldi	r20, 0x80	; 128
    19a0:	5f e3       	ldi	r21, 0x3F	; 63
    19a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19a6:	88 23       	and	r24, r24
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <LCD_Vid_SendCommand4Bit_test+0x422>
		__ticks = 1;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	98 ab       	std	Y+48, r25	; 0x30
    19b0:	8f a7       	std	Y+47, r24	; 0x2f
    19b2:	3f c0       	rjmp	.+126    	; 0x1a32 <LCD_Vid_SendCommand4Bit_test+0x4a0>
	else if (__tmp > 65535)
    19b4:	69 a9       	ldd	r22, Y+49	; 0x31
    19b6:	7a a9       	ldd	r23, Y+50	; 0x32
    19b8:	8b a9       	ldd	r24, Y+51	; 0x33
    19ba:	9c a9       	ldd	r25, Y+52	; 0x34
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	3f ef       	ldi	r19, 0xFF	; 255
    19c0:	4f e7       	ldi	r20, 0x7F	; 127
    19c2:	57 e4       	ldi	r21, 0x47	; 71
    19c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19c8:	18 16       	cp	r1, r24
    19ca:	4c f5       	brge	.+82     	; 0x1a1e <LCD_Vid_SendCommand4Bit_test+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19cc:	6d a9       	ldd	r22, Y+53	; 0x35
    19ce:	7e a9       	ldd	r23, Y+54	; 0x36
    19d0:	8f a9       	ldd	r24, Y+55	; 0x37
    19d2:	98 ad       	ldd	r25, Y+56	; 0x38
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e2       	ldi	r20, 0x20	; 32
    19da:	51 e4       	ldi	r21, 0x41	; 65
    19dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	98 ab       	std	Y+48, r25	; 0x30
    19f2:	8f a7       	std	Y+47, r24	; 0x2f
    19f4:	0f c0       	rjmp	.+30     	; 0x1a14 <LCD_Vid_SendCommand4Bit_test+0x482>
    19f6:	88 ec       	ldi	r24, 0xC8	; 200
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	9e a7       	std	Y+46, r25	; 0x2e
    19fc:	8d a7       	std	Y+45, r24	; 0x2d
    19fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a00:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <LCD_Vid_SendCommand4Bit_test+0x470>
    1a06:	9e a7       	std	Y+46, r25	; 0x2e
    1a08:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	98 ab       	std	Y+48, r25	; 0x30
    1a12:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a16:	98 a9       	ldd	r25, Y+48	; 0x30
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	69 f7       	brne	.-38     	; 0x19f6 <LCD_Vid_SendCommand4Bit_test+0x464>
    1a1c:	14 c0       	rjmp	.+40     	; 0x1a46 <LCD_Vid_SendCommand4Bit_test+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a20:	7a a9       	ldd	r23, Y+50	; 0x32
    1a22:	8b a9       	ldd	r24, Y+51	; 0x33
    1a24:	9c a9       	ldd	r25, Y+52	; 0x34
    1a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	98 ab       	std	Y+48, r25	; 0x30
    1a30:	8f a7       	std	Y+47, r24	; 0x2f
    1a32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a34:	98 a9       	ldd	r25, Y+48	; 0x30
    1a36:	9c a7       	std	Y+44, r25	; 0x2c
    1a38:	8b a7       	std	Y+43, r24	; 0x2b
    1a3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_Vid_SendCommand4Bit_test+0x4ac>
    1a42:	9c a7       	std	Y+44, r25	; 0x2c
    1a44:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,LOW);
    1a46:	82 e0       	ldi	r24, 0x02	; 2
    1a48:	67 e0       	ldi	r22, 0x07	; 7
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	a0 e0       	ldi	r26, 0x00	; 0
    1a56:	b0 e4       	ldi	r27, 0x40	; 64
    1a58:	8f a3       	std	Y+39, r24	; 0x27
    1a5a:	98 a7       	std	Y+40, r25	; 0x28
    1a5c:	a9 a7       	std	Y+41, r26	; 0x29
    1a5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a60:	6f a1       	ldd	r22, Y+39	; 0x27
    1a62:	78 a5       	ldd	r23, Y+40	; 0x28
    1a64:	89 a5       	ldd	r24, Y+41	; 0x29
    1a66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4a ef       	ldi	r20, 0xFA	; 250
    1a6e:	54 e4       	ldi	r21, 0x44	; 68
    1a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	8b a3       	std	Y+35, r24	; 0x23
    1a7a:	9c a3       	std	Y+36, r25	; 0x24
    1a7c:	ad a3       	std	Y+37, r26	; 0x25
    1a7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a80:	6b a1       	ldd	r22, Y+35	; 0x23
    1a82:	7c a1       	ldd	r23, Y+36	; 0x24
    1a84:	8d a1       	ldd	r24, Y+37	; 0x25
    1a86:	9e a1       	ldd	r25, Y+38	; 0x26
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e8       	ldi	r20, 0x80	; 128
    1a8e:	5f e3       	ldi	r21, 0x3F	; 63
    1a90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a94:	88 23       	and	r24, r24
    1a96:	2c f4       	brge	.+10     	; 0x1aa2 <LCD_Vid_SendCommand4Bit_test+0x510>
		__ticks = 1;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	9a a3       	std	Y+34, r25	; 0x22
    1a9e:	89 a3       	std	Y+33, r24	; 0x21
    1aa0:	3f c0       	rjmp	.+126    	; 0x1b20 <LCD_Vid_SendCommand4Bit_test+0x58e>
	else if (__tmp > 65535)
    1aa2:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa4:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa6:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa8:	9e a1       	ldd	r25, Y+38	; 0x26
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	3f ef       	ldi	r19, 0xFF	; 255
    1aae:	4f e7       	ldi	r20, 0x7F	; 127
    1ab0:	57 e4       	ldi	r21, 0x47	; 71
    1ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ab6:	18 16       	cp	r1, r24
    1ab8:	4c f5       	brge	.+82     	; 0x1b0c <LCD_Vid_SendCommand4Bit_test+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aba:	6f a1       	ldd	r22, Y+39	; 0x27
    1abc:	78 a5       	ldd	r23, Y+40	; 0x28
    1abe:	89 a5       	ldd	r24, Y+41	; 0x29
    1ac0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e2       	ldi	r20, 0x20	; 32
    1ac8:	51 e4       	ldi	r21, 0x41	; 65
    1aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	bc 01       	movw	r22, r24
    1ad4:	cd 01       	movw	r24, r26
    1ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	9a a3       	std	Y+34, r25	; 0x22
    1ae0:	89 a3       	std	Y+33, r24	; 0x21
    1ae2:	0f c0       	rjmp	.+30     	; 0x1b02 <LCD_Vid_SendCommand4Bit_test+0x570>
    1ae4:	88 ec       	ldi	r24, 0xC8	; 200
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	98 a3       	std	Y+32, r25	; 0x20
    1aea:	8f 8f       	std	Y+31, r24	; 0x1f
    1aec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aee:	98 a1       	ldd	r25, Y+32	; 0x20
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <LCD_Vid_SendCommand4Bit_test+0x55e>
    1af4:	98 a3       	std	Y+32, r25	; 0x20
    1af6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af8:	89 a1       	ldd	r24, Y+33	; 0x21
    1afa:	9a a1       	ldd	r25, Y+34	; 0x22
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	9a a3       	std	Y+34, r25	; 0x22
    1b00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b02:	89 a1       	ldd	r24, Y+33	; 0x21
    1b04:	9a a1       	ldd	r25, Y+34	; 0x22
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	69 f7       	brne	.-38     	; 0x1ae4 <LCD_Vid_SendCommand4Bit_test+0x552>
    1b0a:	14 c0       	rjmp	.+40     	; 0x1b34 <LCD_Vid_SendCommand4Bit_test+0x5a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b10:	8d a1       	ldd	r24, Y+37	; 0x25
    1b12:	9e a1       	ldd	r25, Y+38	; 0x26
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9a a3       	std	Y+34, r25	; 0x22
    1b1e:	89 a3       	std	Y+33, r24	; 0x21
    1b20:	89 a1       	ldd	r24, Y+33	; 0x21
    1b22:	9a a1       	ldd	r25, Y+34	; 0x22
    1b24:	9e 8f       	std	Y+30, r25	; 0x1e
    1b26:	8d 8f       	std	Y+29, r24	; 0x1d
    1b28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <LCD_Vid_SendCommand4Bit_test+0x59a>
    1b30:	9e 8f       	std	Y+30, r25	; 0x1e
    1b32:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1b34:	82 e0       	ldi	r24, 0x02	; 2
    1b36:	67 e0       	ldi	r22, 0x07	; 7
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>


//*****************************************
x=command<<4;
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e9 5a       	subi	r30, 0xA9	; 169
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	80 81       	ld	r24, Z
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	eb 5a       	subi	r30, 0xAB	; 171
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	82 95       	swap	r24
    1b52:	92 95       	swap	r25
    1b54:	90 7f       	andi	r25, 0xF0	; 240
    1b56:	98 27       	eor	r25, r24
    1b58:	80 7f       	andi	r24, 0xF0	; 240
    1b5a:	98 27       	eor	r25, r24
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	80 83       	st	Z, r24
x=x&0xf0;
    1b60:	de 01       	movw	r26, r28
    1b62:	ab 5a       	subi	r26, 0xAB	; 171
    1b64:	bf 4f       	sbci	r27, 0xFF	; 255
    1b66:	fe 01       	movw	r30, r28
    1b68:	eb 5a       	subi	r30, 0xAB	; 171
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	80 7f       	andi	r24, 0xF0	; 240
    1b72:	90 70       	andi	r25, 0x00	; 0
    1b74:	8d 93       	st	X+, r24
    1b76:	9c 93       	st	X, r25
LCD_INFO.LCD_BYTE=x;
    1b78:	fe 01       	movw	r30, r28
    1b7a:	eb 5a       	subi	r30, 0xAB	; 171
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	80 81       	ld	r24, Z
    1b80:	80 93 b2 01 	sts	0x01B2, r24
DIO_SetPinValue(PORTDATA,0,LCD_INFO.BITs.b4);
    1b84:	80 91 b2 01 	lds	r24, 0x01B2
    1b88:	82 95       	swap	r24
    1b8a:	8f 70       	andi	r24, 0x0F	; 15
    1b8c:	81 70       	andi	r24, 0x01	; 1
    1b8e:	98 2f       	mov	r25, r24
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	49 2f       	mov	r20, r25
    1b96:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,1,LCD_INFO.BITs.b5);
    1b9a:	80 91 b2 01 	lds	r24, 0x01B2
    1b9e:	82 95       	swap	r24
    1ba0:	86 95       	lsr	r24
    1ba2:	87 70       	andi	r24, 0x07	; 7
    1ba4:	81 70       	andi	r24, 0x01	; 1
    1ba6:	98 2f       	mov	r25, r24
    1ba8:	82 e0       	ldi	r24, 0x02	; 2
    1baa:	61 e0       	ldi	r22, 0x01	; 1
    1bac:	49 2f       	mov	r20, r25
    1bae:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,2,LCD_INFO.BITs.b6);
    1bb2:	80 91 b2 01 	lds	r24, 0x01B2
    1bb6:	82 95       	swap	r24
    1bb8:	86 95       	lsr	r24
    1bba:	86 95       	lsr	r24
    1bbc:	83 70       	andi	r24, 0x03	; 3
    1bbe:	81 70       	andi	r24, 0x01	; 1
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	82 e0       	ldi	r24, 0x02	; 2
    1bc4:	62 e0       	ldi	r22, 0x02	; 2
    1bc6:	49 2f       	mov	r20, r25
    1bc8:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,3,LCD_INFO.BITs.b7);
    1bcc:	80 91 b2 01 	lds	r24, 0x01B2
    1bd0:	88 1f       	adc	r24, r24
    1bd2:	88 27       	eor	r24, r24
    1bd4:	88 1f       	adc	r24, r24
    1bd6:	98 2f       	mov	r25, r24
    1bd8:	82 e0       	ldi	r24, 0x02	; 2
    1bda:	63 e0       	ldi	r22, 0x03	; 3
    1bdc:	49 2f       	mov	r20, r25
    1bde:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>


DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1be2:	82 e0       	ldi	r24, 0x02	; 2
    1be4:	67 e0       	ldi	r22, 0x07	; 7
    1be6:	41 e0       	ldi	r20, 0x01	; 1
    1be8:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a0 e0       	ldi	r26, 0x00	; 0
    1bf2:	b0 e4       	ldi	r27, 0x40	; 64
    1bf4:	89 8f       	std	Y+25, r24	; 0x19
    1bf6:	9a 8f       	std	Y+26, r25	; 0x1a
    1bf8:	ab 8f       	std	Y+27, r26	; 0x1b
    1bfa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	4a ef       	ldi	r20, 0xFA	; 250
    1c0a:	54 e4       	ldi	r21, 0x44	; 68
    1c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	8d 8b       	std	Y+21, r24	; 0x15
    1c16:	9e 8b       	std	Y+22, r25	; 0x16
    1c18:	af 8b       	std	Y+23, r26	; 0x17
    1c1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c20:	8f 89       	ldd	r24, Y+23	; 0x17
    1c22:	98 8d       	ldd	r25, Y+24	; 0x18
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e8       	ldi	r20, 0x80	; 128
    1c2a:	5f e3       	ldi	r21, 0x3F	; 63
    1c2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c30:	88 23       	and	r24, r24
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <LCD_Vid_SendCommand4Bit_test+0x6ac>
		__ticks = 1;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c 8b       	std	Y+20, r25	; 0x14
    1c3a:	8b 8b       	std	Y+19, r24	; 0x13
    1c3c:	3f c0       	rjmp	.+126    	; 0x1cbc <LCD_Vid_SendCommand4Bit_test+0x72a>
	else if (__tmp > 65535)
    1c3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c40:	7e 89       	ldd	r23, Y+22	; 0x16
    1c42:	8f 89       	ldd	r24, Y+23	; 0x17
    1c44:	98 8d       	ldd	r25, Y+24	; 0x18
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	4c f5       	brge	.+82     	; 0x1ca8 <LCD_Vid_SendCommand4Bit_test+0x716>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c56:	69 8d       	ldd	r22, Y+25	; 0x19
    1c58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e2       	ldi	r20, 0x20	; 32
    1c64:	51 e4       	ldi	r21, 0x41	; 65
    1c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9c 8b       	std	Y+20, r25	; 0x14
    1c7c:	8b 8b       	std	Y+19, r24	; 0x13
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <LCD_Vid_SendCommand4Bit_test+0x70c>
    1c80:	88 ec       	ldi	r24, 0xC8	; 200
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9a 8b       	std	Y+18, r25	; 0x12
    1c86:	89 8b       	std	Y+17, r24	; 0x11
    1c88:	89 89       	ldd	r24, Y+17	; 0x11
    1c8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <LCD_Vid_SendCommand4Bit_test+0x6fa>
    1c90:	9a 8b       	std	Y+18, r25	; 0x12
    1c92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c94:	8b 89       	ldd	r24, Y+19	; 0x13
    1c96:	9c 89       	ldd	r25, Y+20	; 0x14
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	9c 8b       	std	Y+20, r25	; 0x14
    1c9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	69 f7       	brne	.-38     	; 0x1c80 <LCD_Vid_SendCommand4Bit_test+0x6ee>
    1ca6:	14 c0       	rjmp	.+40     	; 0x1cd0 <LCD_Vid_SendCommand4Bit_test+0x73e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    1caa:	7e 89       	ldd	r23, Y+22	; 0x16
    1cac:	8f 89       	ldd	r24, Y+23	; 0x17
    1cae:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9c 8b       	std	Y+20, r25	; 0x14
    1cba:	8b 8b       	std	Y+19, r24	; 0x13
    1cbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc0:	98 8b       	std	Y+16, r25	; 0x10
    1cc2:	8f 87       	std	Y+15, r24	; 0x0f
    1cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc6:	98 89       	ldd	r25, Y+16	; 0x10
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <LCD_Vid_SendCommand4Bit_test+0x736>
    1ccc:	98 8b       	std	Y+16, r25	; 0x10
    1cce:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,LOW);
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	67 e0       	ldi	r22, 0x07	; 7
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a0 e0       	ldi	r26, 0x00	; 0
    1ce0:	b0 e4       	ldi	r27, 0x40	; 64
    1ce2:	8b 87       	std	Y+11, r24	; 0x0b
    1ce4:	9c 87       	std	Y+12, r25	; 0x0c
    1ce6:	ad 87       	std	Y+13, r26	; 0x0d
    1ce8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a ef       	ldi	r20, 0xFA	; 250
    1cf8:	54 e4       	ldi	r21, 0x44	; 68
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	8f 83       	std	Y+7, r24	; 0x07
    1d04:	98 87       	std	Y+8, r25	; 0x08
    1d06:	a9 87       	std	Y+9, r26	; 0x09
    1d08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0c:	78 85       	ldd	r23, Y+8	; 0x08
    1d0e:	89 85       	ldd	r24, Y+9	; 0x09
    1d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <LCD_Vid_SendCommand4Bit_test+0x79a>
		__ticks = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9e 83       	std	Y+6, r25	; 0x06
    1d28:	8d 83       	std	Y+5, r24	; 0x05
    1d2a:	3f c0       	rjmp	.+126    	; 0x1daa <LCD_Vid_SendCommand4Bit_test+0x818>
	else if (__tmp > 65535)
    1d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2e:	78 85       	ldd	r23, Y+8	; 0x08
    1d30:	89 85       	ldd	r24, Y+9	; 0x09
    1d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	3f ef       	ldi	r19, 0xFF	; 255
    1d38:	4f e7       	ldi	r20, 0x7F	; 127
    1d3a:	57 e4       	ldi	r21, 0x47	; 71
    1d3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d40:	18 16       	cp	r1, r24
    1d42:	4c f5       	brge	.+82     	; 0x1d96 <LCD_Vid_SendCommand4Bit_test+0x804>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e2       	ldi	r20, 0x20	; 32
    1d52:	51 e4       	ldi	r21, 0x41	; 65
    1d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	cd 01       	movw	r24, r26
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <LCD_Vid_SendCommand4Bit_test+0x7fa>
    1d6e:	88 ec       	ldi	r24, 0xC8	; 200
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9c 83       	std	Y+4, r25	; 0x04
    1d74:	8b 83       	std	Y+3, r24	; 0x03
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <LCD_Vid_SendCommand4Bit_test+0x7e8>
    1d7e:	9c 83       	std	Y+4, r25	; 0x04
    1d80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	9e 83       	std	Y+6, r25	; 0x06
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	69 f7       	brne	.-38     	; 0x1d6e <LCD_Vid_SendCommand4Bit_test+0x7dc>
    1d94:	14 c0       	rjmp	.+40     	; 0x1dbe <LCD_Vid_SendCommand4Bit_test+0x82c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d96:	6f 81       	ldd	r22, Y+7	; 0x07
    1d98:	78 85       	ldd	r23, Y+8	; 0x08
    1d9a:	89 85       	ldd	r24, Y+9	; 0x09
    1d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9e 83       	std	Y+6, r25	; 0x06
    1da8:	8d 83       	std	Y+5, r24	; 0x05
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	9a 83       	std	Y+2, r25	; 0x02
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_Vid_SendCommand4Bit_test+0x824>
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	67 e0       	ldi	r22, 0x07	; 7
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
    1dc4:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
}
    1dc8:	c9 5a       	subi	r28, 0xA9	; 169
    1dca:	df 4f       	sbci	r29, 0xFF	; 255
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	1f 91       	pop	r17
    1ddc:	0f 91       	pop	r16
    1dde:	08 95       	ret

00001de0 <LCD_Vid_SendCommand4Bit>:

void LCD_Vid_SendCommand4Bit(unsigned char command)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	eb 97       	sbiw	r28, 0x3b	; 59
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	8b af       	std	Y+59, r24	; 0x3b
	unsigned int  x;
	DIO_SetPinValue(PORTCONTROL,RS,LOW);
    1df6:	82 e0       	ldi	r24, 0x02	; 2
    1df8:	65 e0       	ldi	r22, 0x05	; 5
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
	DIO_SetPinValue(PORTCONTROL,RW,LOW);
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	66 e0       	ldi	r22, 0x06	; 6
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>

x=command;
    1e0a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9a af       	std	Y+58, r25	; 0x3a
    1e12:	89 af       	std	Y+57, r24	; 0x39
x=x&0xf0;
    1e14:	89 ad       	ldd	r24, Y+57	; 0x39
    1e16:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e18:	80 7f       	andi	r24, 0xF0	; 240
    1e1a:	90 70       	andi	r25, 0x00	; 0
    1e1c:	9a af       	std	Y+58, r25	; 0x3a
    1e1e:	89 af       	std	Y+57, r24	; 0x39
LCD_INFO.LCD_BYTE=x;
    1e20:	89 ad       	ldd	r24, Y+57	; 0x39
    1e22:	80 93 b2 01 	sts	0x01B2, r24
DIO_SetPinValue(PORTDATA,0,LCD_INFO.BITs.b4);
    1e26:	80 91 b2 01 	lds	r24, 0x01B2
    1e2a:	82 95       	swap	r24
    1e2c:	8f 70       	andi	r24, 0x0F	; 15
    1e2e:	81 70       	andi	r24, 0x01	; 1
    1e30:	98 2f       	mov	r25, r24
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	49 2f       	mov	r20, r25
    1e38:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,1,LCD_INFO.BITs.b5);
    1e3c:	80 91 b2 01 	lds	r24, 0x01B2
    1e40:	82 95       	swap	r24
    1e42:	86 95       	lsr	r24
    1e44:	87 70       	andi	r24, 0x07	; 7
    1e46:	81 70       	andi	r24, 0x01	; 1
    1e48:	98 2f       	mov	r25, r24
    1e4a:	82 e0       	ldi	r24, 0x02	; 2
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
    1e4e:	49 2f       	mov	r20, r25
    1e50:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,2,LCD_INFO.BITs.b6);
    1e54:	80 91 b2 01 	lds	r24, 0x01B2
    1e58:	82 95       	swap	r24
    1e5a:	86 95       	lsr	r24
    1e5c:	86 95       	lsr	r24
    1e5e:	83 70       	andi	r24, 0x03	; 3
    1e60:	81 70       	andi	r24, 0x01	; 1
    1e62:	98 2f       	mov	r25, r24
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	62 e0       	ldi	r22, 0x02	; 2
    1e68:	49 2f       	mov	r20, r25
    1e6a:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,3,LCD_INFO.BITs.b7);
    1e6e:	80 91 b2 01 	lds	r24, 0x01B2
    1e72:	88 1f       	adc	r24, r24
    1e74:	88 27       	eor	r24, r24
    1e76:	88 1f       	adc	r24, r24
    1e78:	98 2f       	mov	r25, r24
    1e7a:	82 e0       	ldi	r24, 0x02	; 2
    1e7c:	63 e0       	ldi	r22, 0x03	; 3
    1e7e:	49 2f       	mov	r20, r25
    1e80:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>

DIO_SetPinValue(PORTCONTROL,E,HIGH);
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	67 e0       	ldi	r22, 0x07	; 7
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	a0 e0       	ldi	r26, 0x00	; 0
    1e94:	b0 e4       	ldi	r27, 0x40	; 64
    1e96:	8d ab       	std	Y+53, r24	; 0x35
    1e98:	9e ab       	std	Y+54, r25	; 0x36
    1e9a:	af ab       	std	Y+55, r26	; 0x37
    1e9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9e:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ea2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ea4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	4a ef       	ldi	r20, 0xFA	; 250
    1eac:	54 e4       	ldi	r21, 0x44	; 68
    1eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	89 ab       	std	Y+49, r24	; 0x31
    1eb8:	9a ab       	std	Y+50, r25	; 0x32
    1eba:	ab ab       	std	Y+51, r26	; 0x33
    1ebc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ebe:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e8       	ldi	r20, 0x80	; 128
    1ecc:	5f e3       	ldi	r21, 0x3F	; 63
    1ece:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed2:	88 23       	and	r24, r24
    1ed4:	2c f4       	brge	.+10     	; 0x1ee0 <LCD_Vid_SendCommand4Bit+0x100>
		__ticks = 1;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	98 ab       	std	Y+48, r25	; 0x30
    1edc:	8f a7       	std	Y+47, r24	; 0x2f
    1ede:	3f c0       	rjmp	.+126    	; 0x1f5e <LCD_Vid_SendCommand4Bit+0x17e>
	else if (__tmp > 65535)
    1ee0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ee6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	3f ef       	ldi	r19, 0xFF	; 255
    1eec:	4f e7       	ldi	r20, 0x7F	; 127
    1eee:	57 e4       	ldi	r21, 0x47	; 71
    1ef0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef4:	18 16       	cp	r1, r24
    1ef6:	4c f5       	brge	.+82     	; 0x1f4a <LCD_Vid_SendCommand4Bit+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef8:	6d a9       	ldd	r22, Y+53	; 0x35
    1efa:	7e a9       	ldd	r23, Y+54	; 0x36
    1efc:	8f a9       	ldd	r24, Y+55	; 0x37
    1efe:	98 ad       	ldd	r25, Y+56	; 0x38
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e2       	ldi	r20, 0x20	; 32
    1f06:	51 e4       	ldi	r21, 0x41	; 65
    1f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	bc 01       	movw	r22, r24
    1f12:	cd 01       	movw	r24, r26
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	98 ab       	std	Y+48, r25	; 0x30
    1f1e:	8f a7       	std	Y+47, r24	; 0x2f
    1f20:	0f c0       	rjmp	.+30     	; 0x1f40 <LCD_Vid_SendCommand4Bit+0x160>
    1f22:	88 ec       	ldi	r24, 0xC8	; 200
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9e a7       	std	Y+46, r25	; 0x2e
    1f28:	8d a7       	std	Y+45, r24	; 0x2d
    1f2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <LCD_Vid_SendCommand4Bit+0x14e>
    1f32:	9e a7       	std	Y+46, r25	; 0x2e
    1f34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f38:	98 a9       	ldd	r25, Y+48	; 0x30
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	98 ab       	std	Y+48, r25	; 0x30
    1f3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f42:	98 a9       	ldd	r25, Y+48	; 0x30
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	69 f7       	brne	.-38     	; 0x1f22 <LCD_Vid_SendCommand4Bit+0x142>
    1f48:	14 c0       	rjmp	.+40     	; 0x1f72 <LCD_Vid_SendCommand4Bit+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f50:	9c a9       	ldd	r25, Y+52	; 0x34
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	98 ab       	std	Y+48, r25	; 0x30
    1f5c:	8f a7       	std	Y+47, r24	; 0x2f
    1f5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f60:	98 a9       	ldd	r25, Y+48	; 0x30
    1f62:	9c a7       	std	Y+44, r25	; 0x2c
    1f64:	8b a7       	std	Y+43, r24	; 0x2b
    1f66:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f68:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <LCD_Vid_SendCommand4Bit+0x18a>
    1f6e:	9c a7       	std	Y+44, r25	; 0x2c
    1f70:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,LOW);
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	67 e0       	ldi	r22, 0x07	; 7
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	a0 e0       	ldi	r26, 0x00	; 0
    1f82:	b0 e4       	ldi	r27, 0x40	; 64
    1f84:	8f a3       	std	Y+39, r24	; 0x27
    1f86:	98 a7       	std	Y+40, r25	; 0x28
    1f88:	a9 a7       	std	Y+41, r26	; 0x29
    1f8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f8e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f90:	89 a5       	ldd	r24, Y+41	; 0x29
    1f92:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	4a ef       	ldi	r20, 0xFA	; 250
    1f9a:	54 e4       	ldi	r21, 0x44	; 68
    1f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	8b a3       	std	Y+35, r24	; 0x23
    1fa6:	9c a3       	std	Y+36, r25	; 0x24
    1fa8:	ad a3       	std	Y+37, r26	; 0x25
    1faa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fac:	6b a1       	ldd	r22, Y+35	; 0x23
    1fae:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e8       	ldi	r20, 0x80	; 128
    1fba:	5f e3       	ldi	r21, 0x3F	; 63
    1fbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fc0:	88 23       	and	r24, r24
    1fc2:	2c f4       	brge	.+10     	; 0x1fce <LCD_Vid_SendCommand4Bit+0x1ee>
		__ticks = 1;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	9a a3       	std	Y+34, r25	; 0x22
    1fca:	89 a3       	std	Y+33, r24	; 0x21
    1fcc:	3f c0       	rjmp	.+126    	; 0x204c <LCD_Vid_SendCommand4Bit+0x26c>
	else if (__tmp > 65535)
    1fce:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	3f ef       	ldi	r19, 0xFF	; 255
    1fda:	4f e7       	ldi	r20, 0x7F	; 127
    1fdc:	57 e4       	ldi	r21, 0x47	; 71
    1fde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fe2:	18 16       	cp	r1, r24
    1fe4:	4c f5       	brge	.+82     	; 0x2038 <LCD_Vid_SendCommand4Bit+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe6:	6f a1       	ldd	r22, Y+39	; 0x27
    1fe8:	78 a5       	ldd	r23, Y+40	; 0x28
    1fea:	89 a5       	ldd	r24, Y+41	; 0x29
    1fec:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e2       	ldi	r20, 0x20	; 32
    1ff4:	51 e4       	ldi	r21, 0x41	; 65
    1ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	bc 01       	movw	r22, r24
    2000:	cd 01       	movw	r24, r26
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9a a3       	std	Y+34, r25	; 0x22
    200c:	89 a3       	std	Y+33, r24	; 0x21
    200e:	0f c0       	rjmp	.+30     	; 0x202e <LCD_Vid_SendCommand4Bit+0x24e>
    2010:	88 ec       	ldi	r24, 0xC8	; 200
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	98 a3       	std	Y+32, r25	; 0x20
    2016:	8f 8f       	std	Y+31, r24	; 0x1f
    2018:	8f 8d       	ldd	r24, Y+31	; 0x1f
    201a:	98 a1       	ldd	r25, Y+32	; 0x20
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <LCD_Vid_SendCommand4Bit+0x23c>
    2020:	98 a3       	std	Y+32, r25	; 0x20
    2022:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2024:	89 a1       	ldd	r24, Y+33	; 0x21
    2026:	9a a1       	ldd	r25, Y+34	; 0x22
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	9a a3       	std	Y+34, r25	; 0x22
    202c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202e:	89 a1       	ldd	r24, Y+33	; 0x21
    2030:	9a a1       	ldd	r25, Y+34	; 0x22
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	69 f7       	brne	.-38     	; 0x2010 <LCD_Vid_SendCommand4Bit+0x230>
    2036:	14 c0       	rjmp	.+40     	; 0x2060 <LCD_Vid_SendCommand4Bit+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2038:	6b a1       	ldd	r22, Y+35	; 0x23
    203a:	7c a1       	ldd	r23, Y+36	; 0x24
    203c:	8d a1       	ldd	r24, Y+37	; 0x25
    203e:	9e a1       	ldd	r25, Y+38	; 0x26
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9a a3       	std	Y+34, r25	; 0x22
    204a:	89 a3       	std	Y+33, r24	; 0x21
    204c:	89 a1       	ldd	r24, Y+33	; 0x21
    204e:	9a a1       	ldd	r25, Y+34	; 0x22
    2050:	9e 8f       	std	Y+30, r25	; 0x1e
    2052:	8d 8f       	std	Y+29, r24	; 0x1d
    2054:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2056:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <LCD_Vid_SendCommand4Bit+0x278>
    205c:	9e 8f       	std	Y+30, r25	; 0x1e
    205e:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,HIGH);
    2060:	82 e0       	ldi	r24, 0x02	; 2
    2062:	67 e0       	ldi	r22, 0x07	; 7
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
//*****************************************
x=command<<4;
    206a:	8b ad       	ldd	r24, Y+59	; 0x3b
    206c:	88 2f       	mov	r24, r24
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	82 95       	swap	r24
    2072:	92 95       	swap	r25
    2074:	90 7f       	andi	r25, 0xF0	; 240
    2076:	98 27       	eor	r25, r24
    2078:	80 7f       	andi	r24, 0xF0	; 240
    207a:	98 27       	eor	r25, r24
    207c:	9a af       	std	Y+58, r25	; 0x3a
    207e:	89 af       	std	Y+57, r24	; 0x39
x=x&0xf0;
    2080:	89 ad       	ldd	r24, Y+57	; 0x39
    2082:	9a ad       	ldd	r25, Y+58	; 0x3a
    2084:	80 7f       	andi	r24, 0xF0	; 240
    2086:	90 70       	andi	r25, 0x00	; 0
    2088:	9a af       	std	Y+58, r25	; 0x3a
    208a:	89 af       	std	Y+57, r24	; 0x39
LCD_INFO.LCD_BYTE=x;
    208c:	89 ad       	ldd	r24, Y+57	; 0x39
    208e:	80 93 b2 01 	sts	0x01B2, r24
DIO_SetPinValue(PORTDATA,0,LCD_INFO.BITs.b4);
    2092:	80 91 b2 01 	lds	r24, 0x01B2
    2096:	82 95       	swap	r24
    2098:	8f 70       	andi	r24, 0x0F	; 15
    209a:	81 70       	andi	r24, 0x01	; 1
    209c:	98 2f       	mov	r25, r24
    209e:	82 e0       	ldi	r24, 0x02	; 2
    20a0:	60 e0       	ldi	r22, 0x00	; 0
    20a2:	49 2f       	mov	r20, r25
    20a4:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,1,LCD_INFO.BITs.b5);
    20a8:	80 91 b2 01 	lds	r24, 0x01B2
    20ac:	82 95       	swap	r24
    20ae:	86 95       	lsr	r24
    20b0:	87 70       	andi	r24, 0x07	; 7
    20b2:	81 70       	andi	r24, 0x01	; 1
    20b4:	98 2f       	mov	r25, r24
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	61 e0       	ldi	r22, 0x01	; 1
    20ba:	49 2f       	mov	r20, r25
    20bc:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,2,LCD_INFO.BITs.b6);
    20c0:	80 91 b2 01 	lds	r24, 0x01B2
    20c4:	82 95       	swap	r24
    20c6:	86 95       	lsr	r24
    20c8:	86 95       	lsr	r24
    20ca:	83 70       	andi	r24, 0x03	; 3
    20cc:	81 70       	andi	r24, 0x01	; 1
    20ce:	98 2f       	mov	r25, r24
    20d0:	82 e0       	ldi	r24, 0x02	; 2
    20d2:	62 e0       	ldi	r22, 0x02	; 2
    20d4:	49 2f       	mov	r20, r25
    20d6:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
DIO_SetPinValue(PORTDATA,3,LCD_INFO.BITs.b7);
    20da:	80 91 b2 01 	lds	r24, 0x01B2
    20de:	88 1f       	adc	r24, r24
    20e0:	88 27       	eor	r24, r24
    20e2:	88 1f       	adc	r24, r24
    20e4:	98 2f       	mov	r25, r24
    20e6:	82 e0       	ldi	r24, 0x02	; 2
    20e8:	63 e0       	ldi	r22, 0x03	; 3
    20ea:	49 2f       	mov	r20, r25
    20ec:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>

DIO_SetPinValue(PORTCONTROL,E,HIGH);
    20f0:	82 e0       	ldi	r24, 0x02	; 2
    20f2:	67 e0       	ldi	r22, 0x07	; 7
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	a0 e0       	ldi	r26, 0x00	; 0
    2100:	b0 e4       	ldi	r27, 0x40	; 64
    2102:	89 8f       	std	Y+25, r24	; 0x19
    2104:	9a 8f       	std	Y+26, r25	; 0x1a
    2106:	ab 8f       	std	Y+27, r26	; 0x1b
    2108:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210a:	69 8d       	ldd	r22, Y+25	; 0x19
    210c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    210e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2110:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	4a ef       	ldi	r20, 0xFA	; 250
    2118:	54 e4       	ldi	r21, 0x44	; 68
    211a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	8d 8b       	std	Y+21, r24	; 0x15
    2124:	9e 8b       	std	Y+22, r25	; 0x16
    2126:	af 8b       	std	Y+23, r26	; 0x17
    2128:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    212a:	6d 89       	ldd	r22, Y+21	; 0x15
    212c:	7e 89       	ldd	r23, Y+22	; 0x16
    212e:	8f 89       	ldd	r24, Y+23	; 0x17
    2130:	98 8d       	ldd	r25, Y+24	; 0x18
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e8       	ldi	r20, 0x80	; 128
    2138:	5f e3       	ldi	r21, 0x3F	; 63
    213a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213e:	88 23       	and	r24, r24
    2140:	2c f4       	brge	.+10     	; 0x214c <LCD_Vid_SendCommand4Bit+0x36c>
		__ticks = 1;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9c 8b       	std	Y+20, r25	; 0x14
    2148:	8b 8b       	std	Y+19, r24	; 0x13
    214a:	3f c0       	rjmp	.+126    	; 0x21ca <LCD_Vid_SendCommand4Bit+0x3ea>
	else if (__tmp > 65535)
    214c:	6d 89       	ldd	r22, Y+21	; 0x15
    214e:	7e 89       	ldd	r23, Y+22	; 0x16
    2150:	8f 89       	ldd	r24, Y+23	; 0x17
    2152:	98 8d       	ldd	r25, Y+24	; 0x18
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	3f ef       	ldi	r19, 0xFF	; 255
    2158:	4f e7       	ldi	r20, 0x7F	; 127
    215a:	57 e4       	ldi	r21, 0x47	; 71
    215c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2160:	18 16       	cp	r1, r24
    2162:	4c f5       	brge	.+82     	; 0x21b6 <LCD_Vid_SendCommand4Bit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2164:	69 8d       	ldd	r22, Y+25	; 0x19
    2166:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2168:	8b 8d       	ldd	r24, Y+27	; 0x1b
    216a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e2       	ldi	r20, 0x20	; 32
    2172:	51 e4       	ldi	r21, 0x41	; 65
    2174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	bc 01       	movw	r22, r24
    217e:	cd 01       	movw	r24, r26
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9c 8b       	std	Y+20, r25	; 0x14
    218a:	8b 8b       	std	Y+19, r24	; 0x13
    218c:	0f c0       	rjmp	.+30     	; 0x21ac <LCD_Vid_SendCommand4Bit+0x3cc>
    218e:	88 ec       	ldi	r24, 0xC8	; 200
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	9a 8b       	std	Y+18, r25	; 0x12
    2194:	89 8b       	std	Y+17, r24	; 0x11
    2196:	89 89       	ldd	r24, Y+17	; 0x11
    2198:	9a 89       	ldd	r25, Y+18	; 0x12
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_Vid_SendCommand4Bit+0x3ba>
    219e:	9a 8b       	std	Y+18, r25	; 0x12
    21a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a2:	8b 89       	ldd	r24, Y+19	; 0x13
    21a4:	9c 89       	ldd	r25, Y+20	; 0x14
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	9c 8b       	std	Y+20, r25	; 0x14
    21aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ac:	8b 89       	ldd	r24, Y+19	; 0x13
    21ae:	9c 89       	ldd	r25, Y+20	; 0x14
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	69 f7       	brne	.-38     	; 0x218e <LCD_Vid_SendCommand4Bit+0x3ae>
    21b4:	14 c0       	rjmp	.+40     	; 0x21de <LCD_Vid_SendCommand4Bit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	9c 8b       	std	Y+20, r25	; 0x14
    21c8:	8b 8b       	std	Y+19, r24	; 0x13
    21ca:	8b 89       	ldd	r24, Y+19	; 0x13
    21cc:	9c 89       	ldd	r25, Y+20	; 0x14
    21ce:	98 8b       	std	Y+16, r25	; 0x10
    21d0:	8f 87       	std	Y+15, r24	; 0x0f
    21d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d4:	98 89       	ldd	r25, Y+16	; 0x10
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <LCD_Vid_SendCommand4Bit+0x3f6>
    21da:	98 8b       	std	Y+16, r25	; 0x10
    21dc:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,LOW);
    21de:	82 e0       	ldi	r24, 0x02	; 2
    21e0:	67 e0       	ldi	r22, 0x07	; 7
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a0 e0       	ldi	r26, 0x00	; 0
    21ee:	b0 e4       	ldi	r27, 0x40	; 64
    21f0:	8b 87       	std	Y+11, r24	; 0x0b
    21f2:	9c 87       	std	Y+12, r25	; 0x0c
    21f4:	ad 87       	std	Y+13, r26	; 0x0d
    21f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a ef       	ldi	r20, 0xFA	; 250
    2206:	54 e4       	ldi	r21, 0x44	; 68
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8f 83       	std	Y+7, r24	; 0x07
    2212:	98 87       	std	Y+8, r25	; 0x08
    2214:	a9 87       	std	Y+9, r26	; 0x09
    2216:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2218:	6f 81       	ldd	r22, Y+7	; 0x07
    221a:	78 85       	ldd	r23, Y+8	; 0x08
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e8       	ldi	r20, 0x80	; 128
    2226:	5f e3       	ldi	r21, 0x3F	; 63
    2228:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    222c:	88 23       	and	r24, r24
    222e:	2c f4       	brge	.+10     	; 0x223a <LCD_Vid_SendCommand4Bit+0x45a>
		__ticks = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	3f c0       	rjmp	.+126    	; 0x22b8 <LCD_Vid_SendCommand4Bit+0x4d8>
	else if (__tmp > 65535)
    223a:	6f 81       	ldd	r22, Y+7	; 0x07
    223c:	78 85       	ldd	r23, Y+8	; 0x08
    223e:	89 85       	ldd	r24, Y+9	; 0x09
    2240:	9a 85       	ldd	r25, Y+10	; 0x0a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	3f ef       	ldi	r19, 0xFF	; 255
    2246:	4f e7       	ldi	r20, 0x7F	; 127
    2248:	57 e4       	ldi	r21, 0x47	; 71
    224a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    224e:	18 16       	cp	r1, r24
    2250:	4c f5       	brge	.+82     	; 0x22a4 <LCD_Vid_SendCommand4Bit+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2252:	6b 85       	ldd	r22, Y+11	; 0x0b
    2254:	7c 85       	ldd	r23, Y+12	; 0x0c
    2256:	8d 85       	ldd	r24, Y+13	; 0x0d
    2258:	9e 85       	ldd	r25, Y+14	; 0x0e
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	51 e4       	ldi	r21, 0x41	; 65
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9e 83       	std	Y+6, r25	; 0x06
    2278:	8d 83       	std	Y+5, r24	; 0x05
    227a:	0f c0       	rjmp	.+30     	; 0x229a <LCD_Vid_SendCommand4Bit+0x4ba>
    227c:	88 ec       	ldi	r24, 0xC8	; 200
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_Vid_SendCommand4Bit+0x4a8>
    228c:	9c 83       	std	Y+4, r25	; 0x04
    228e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229a:	8d 81       	ldd	r24, Y+5	; 0x05
    229c:	9e 81       	ldd	r25, Y+6	; 0x06
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	69 f7       	brne	.-38     	; 0x227c <LCD_Vid_SendCommand4Bit+0x49c>
    22a2:	14 c0       	rjmp	.+40     	; 0x22cc <LCD_Vid_SendCommand4Bit+0x4ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <LCD_Vid_SendCommand4Bit+0x4e4>
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
DIO_SetPinValue(PORTCONTROL,E,HIGH);
    22cc:	82 e0       	ldi	r24, 0x02	; 2
    22ce:	67 e0       	ldi	r22, 0x07	; 7
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
}
    22d6:	eb 96       	adiw	r28, 0x3b	; 59
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <LCD_Vid_SendChar4Bit>:

void LCD_Vid_SendChar4Bit(unsigned char Data)
{int x;
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	6f 97       	sbiw	r28, 0x1f	; 31
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	8f 8f       	std	Y+31, r24	; 0x1f
	DIO_SetPinValue(PORTCONTROL,RS,HIGH);
    22fe:	82 e0       	ldi	r24, 0x02	; 2
    2300:	65 e0       	ldi	r22, 0x05	; 5
    2302:	41 e0       	ldi	r20, 0x01	; 1
    2304:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
	DIO_SetPinValue(PORTCONTROL,RW,LOW);
    2308:	82 e0       	ldi	r24, 0x02	; 2
    230a:	66 e0       	ldi	r22, 0x06	; 6
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
	DIO_SetPinValue(PORTCONTROL,E,HIGH);
    2312:	82 e0       	ldi	r24, 0x02	; 2
    2314:	67 e0       	ldi	r22, 0x07	; 7
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>

	x=Data;
    231c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    231e:	88 2f       	mov	r24, r24
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9e 8f       	std	Y+30, r25	; 0x1e
    2324:	8d 8f       	std	Y+29, r24	; 0x1d
	x=x&0xf0;
    2326:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2328:	9e 8d       	ldd	r25, Y+30	; 0x1e
    232a:	80 7f       	andi	r24, 0xF0	; 240
    232c:	90 70       	andi	r25, 0x00	; 0
    232e:	9e 8f       	std	Y+30, r25	; 0x1e
    2330:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_INFO.LCD_BYTE=x;
    2332:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2334:	80 93 b2 01 	sts	0x01B2, r24
	DIO_SetPinValue(PORTDATA,0,LCD_INFO.BITs.b4);
    2338:	80 91 b2 01 	lds	r24, 0x01B2
    233c:	82 95       	swap	r24
    233e:	8f 70       	andi	r24, 0x0F	; 15
    2340:	81 70       	andi	r24, 0x01	; 1
    2342:	98 2f       	mov	r25, r24
    2344:	82 e0       	ldi	r24, 0x02	; 2
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	49 2f       	mov	r20, r25
    234a:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
	DIO_SetPinValue(PORTDATA,1,LCD_INFO.BITs.b5);
    234e:	80 91 b2 01 	lds	r24, 0x01B2
    2352:	82 95       	swap	r24
    2354:	86 95       	lsr	r24
    2356:	87 70       	andi	r24, 0x07	; 7
    2358:	81 70       	andi	r24, 0x01	; 1
    235a:	98 2f       	mov	r25, r24
    235c:	82 e0       	ldi	r24, 0x02	; 2
    235e:	61 e0       	ldi	r22, 0x01	; 1
    2360:	49 2f       	mov	r20, r25
    2362:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
	DIO_SetPinValue(PORTDATA,2,LCD_INFO.BITs.b6);
    2366:	80 91 b2 01 	lds	r24, 0x01B2
    236a:	82 95       	swap	r24
    236c:	86 95       	lsr	r24
    236e:	86 95       	lsr	r24
    2370:	83 70       	andi	r24, 0x03	; 3
    2372:	81 70       	andi	r24, 0x01	; 1
    2374:	98 2f       	mov	r25, r24
    2376:	82 e0       	ldi	r24, 0x02	; 2
    2378:	62 e0       	ldi	r22, 0x02	; 2
    237a:	49 2f       	mov	r20, r25
    237c:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
	DIO_SetPinValue(PORTDATA,3,LCD_INFO.BITs.b7);
    2380:	80 91 b2 01 	lds	r24, 0x01B2
    2384:	88 1f       	adc	r24, r24
    2386:	88 27       	eor	r24, r24
    2388:	88 1f       	adc	r24, r24
    238a:	98 2f       	mov	r25, r24
    238c:	82 e0       	ldi	r24, 0x02	; 2
    238e:	63 e0       	ldi	r22, 0x03	; 3
    2390:	49 2f       	mov	r20, r25
    2392:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
	DIO_SetPinValue(PORTCONTROL,E,LOW);
    2396:	82 e0       	ldi	r24, 0x02	; 2
    2398:	67 e0       	ldi	r22, 0x07	; 7
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e0       	ldi	r26, 0x00	; 0
    23a6:	b0 e4       	ldi	r27, 0x40	; 64
    23a8:	89 8f       	std	Y+25, r24	; 0x19
    23aa:	9a 8f       	std	Y+26, r25	; 0x1a
    23ac:	ab 8f       	std	Y+27, r26	; 0x1b
    23ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b0:	69 8d       	ldd	r22, Y+25	; 0x19
    23b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	4a ef       	ldi	r20, 0xFA	; 250
    23be:	54 e4       	ldi	r21, 0x44	; 68
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	8d 8b       	std	Y+21, r24	; 0x15
    23ca:	9e 8b       	std	Y+22, r25	; 0x16
    23cc:	af 8b       	std	Y+23, r26	; 0x17
    23ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23d0:	6d 89       	ldd	r22, Y+21	; 0x15
    23d2:	7e 89       	ldd	r23, Y+22	; 0x16
    23d4:	8f 89       	ldd	r24, Y+23	; 0x17
    23d6:	98 8d       	ldd	r25, Y+24	; 0x18
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e8       	ldi	r20, 0x80	; 128
    23de:	5f e3       	ldi	r21, 0x3F	; 63
    23e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e4:	88 23       	and	r24, r24
    23e6:	2c f4       	brge	.+10     	; 0x23f2 <LCD_Vid_SendChar4Bit+0x10a>
		__ticks = 1;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	9c 8b       	std	Y+20, r25	; 0x14
    23ee:	8b 8b       	std	Y+19, r24	; 0x13
    23f0:	3f c0       	rjmp	.+126    	; 0x2470 <LCD_Vid_SendChar4Bit+0x188>
	else if (__tmp > 65535)
    23f2:	6d 89       	ldd	r22, Y+21	; 0x15
    23f4:	7e 89       	ldd	r23, Y+22	; 0x16
    23f6:	8f 89       	ldd	r24, Y+23	; 0x17
    23f8:	98 8d       	ldd	r25, Y+24	; 0x18
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	3f ef       	ldi	r19, 0xFF	; 255
    23fe:	4f e7       	ldi	r20, 0x7F	; 127
    2400:	57 e4       	ldi	r21, 0x47	; 71
    2402:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2406:	18 16       	cp	r1, r24
    2408:	4c f5       	brge	.+82     	; 0x245c <LCD_Vid_SendChar4Bit+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240a:	69 8d       	ldd	r22, Y+25	; 0x19
    240c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    240e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2410:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e2       	ldi	r20, 0x20	; 32
    2418:	51 e4       	ldi	r21, 0x41	; 65
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	bc 01       	movw	r22, r24
    2424:	cd 01       	movw	r24, r26
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	9c 8b       	std	Y+20, r25	; 0x14
    2430:	8b 8b       	std	Y+19, r24	; 0x13
    2432:	0f c0       	rjmp	.+30     	; 0x2452 <LCD_Vid_SendChar4Bit+0x16a>
    2434:	88 ec       	ldi	r24, 0xC8	; 200
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	9a 8b       	std	Y+18, r25	; 0x12
    243a:	89 8b       	std	Y+17, r24	; 0x11
    243c:	89 89       	ldd	r24, Y+17	; 0x11
    243e:	9a 89       	ldd	r25, Y+18	; 0x12
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <LCD_Vid_SendChar4Bit+0x158>
    2444:	9a 8b       	std	Y+18, r25	; 0x12
    2446:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2448:	8b 89       	ldd	r24, Y+19	; 0x13
    244a:	9c 89       	ldd	r25, Y+20	; 0x14
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	9c 8b       	std	Y+20, r25	; 0x14
    2450:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2452:	8b 89       	ldd	r24, Y+19	; 0x13
    2454:	9c 89       	ldd	r25, Y+20	; 0x14
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	69 f7       	brne	.-38     	; 0x2434 <LCD_Vid_SendChar4Bit+0x14c>
    245a:	14 c0       	rjmp	.+40     	; 0x2484 <LCD_Vid_SendChar4Bit+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245c:	6d 89       	ldd	r22, Y+21	; 0x15
    245e:	7e 89       	ldd	r23, Y+22	; 0x16
    2460:	8f 89       	ldd	r24, Y+23	; 0x17
    2462:	98 8d       	ldd	r25, Y+24	; 0x18
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	9c 8b       	std	Y+20, r25	; 0x14
    246e:	8b 8b       	std	Y+19, r24	; 0x13
    2470:	8b 89       	ldd	r24, Y+19	; 0x13
    2472:	9c 89       	ldd	r25, Y+20	; 0x14
    2474:	98 8b       	std	Y+16, r25	; 0x10
    2476:	8f 87       	std	Y+15, r24	; 0x0f
    2478:	8f 85       	ldd	r24, Y+15	; 0x0f
    247a:	98 89       	ldd	r25, Y+16	; 0x10
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD_Vid_SendChar4Bit+0x194>
    2480:	98 8b       	std	Y+16, r25	; 0x10
    2482:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(PORTCONTROL,E,HIGH);
    2484:	82 e0       	ldi	r24, 0x02	; 2
    2486:	67 e0       	ldi	r22, 0x07	; 7
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>

	//*****************************************
	x=Data<<4;
    248e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	82 95       	swap	r24
    2496:	92 95       	swap	r25
    2498:	90 7f       	andi	r25, 0xF0	; 240
    249a:	98 27       	eor	r25, r24
    249c:	80 7f       	andi	r24, 0xF0	; 240
    249e:	98 27       	eor	r25, r24
    24a0:	9e 8f       	std	Y+30, r25	; 0x1e
    24a2:	8d 8f       	std	Y+29, r24	; 0x1d
	x=x&0xf0;
    24a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24a8:	80 7f       	andi	r24, 0xF0	; 240
    24aa:	90 70       	andi	r25, 0x00	; 0
    24ac:	9e 8f       	std	Y+30, r25	; 0x1e
    24ae:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_INFO.LCD_BYTE=x;
    24b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b2:	80 93 b2 01 	sts	0x01B2, r24
	DIO_SetPinValue(PORTDATA,0,LCD_INFO.BITs.b4);
    24b6:	80 91 b2 01 	lds	r24, 0x01B2
    24ba:	82 95       	swap	r24
    24bc:	8f 70       	andi	r24, 0x0F	; 15
    24be:	81 70       	andi	r24, 0x01	; 1
    24c0:	98 2f       	mov	r25, r24
    24c2:	82 e0       	ldi	r24, 0x02	; 2
    24c4:	60 e0       	ldi	r22, 0x00	; 0
    24c6:	49 2f       	mov	r20, r25
    24c8:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
	DIO_SetPinValue(PORTDATA,1,LCD_INFO.BITs.b5);
    24cc:	80 91 b2 01 	lds	r24, 0x01B2
    24d0:	82 95       	swap	r24
    24d2:	86 95       	lsr	r24
    24d4:	87 70       	andi	r24, 0x07	; 7
    24d6:	81 70       	andi	r24, 0x01	; 1
    24d8:	98 2f       	mov	r25, r24
    24da:	82 e0       	ldi	r24, 0x02	; 2
    24dc:	61 e0       	ldi	r22, 0x01	; 1
    24de:	49 2f       	mov	r20, r25
    24e0:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
	DIO_SetPinValue(PORTDATA,2,LCD_INFO.BITs.b6);
    24e4:	80 91 b2 01 	lds	r24, 0x01B2
    24e8:	82 95       	swap	r24
    24ea:	86 95       	lsr	r24
    24ec:	86 95       	lsr	r24
    24ee:	83 70       	andi	r24, 0x03	; 3
    24f0:	81 70       	andi	r24, 0x01	; 1
    24f2:	98 2f       	mov	r25, r24
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	62 e0       	ldi	r22, 0x02	; 2
    24f8:	49 2f       	mov	r20, r25
    24fa:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
	DIO_SetPinValue(PORTDATA,3,LCD_INFO.BITs.b7);
    24fe:	80 91 b2 01 	lds	r24, 0x01B2
    2502:	88 1f       	adc	r24, r24
    2504:	88 27       	eor	r24, r24
    2506:	88 1f       	adc	r24, r24
    2508:	98 2f       	mov	r25, r24
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	63 e0       	ldi	r22, 0x03	; 3
    250e:	49 2f       	mov	r20, r25
    2510:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
	DIO_SetPinValue(PORTCONTROL,E,LOW);
    2514:	82 e0       	ldi	r24, 0x02	; 2
    2516:	67 e0       	ldi	r22, 0x07	; 7
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	a0 e0       	ldi	r26, 0x00	; 0
    2524:	b0 e4       	ldi	r27, 0x40	; 64
    2526:	8b 87       	std	Y+11, r24	; 0x0b
    2528:	9c 87       	std	Y+12, r25	; 0x0c
    252a:	ad 87       	std	Y+13, r26	; 0x0d
    252c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2530:	7c 85       	ldd	r23, Y+12	; 0x0c
    2532:	8d 85       	ldd	r24, Y+13	; 0x0d
    2534:	9e 85       	ldd	r25, Y+14	; 0x0e
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	4a ef       	ldi	r20, 0xFA	; 250
    253c:	54 e4       	ldi	r21, 0x44	; 68
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	8f 83       	std	Y+7, r24	; 0x07
    2548:	98 87       	std	Y+8, r25	; 0x08
    254a:	a9 87       	std	Y+9, r26	; 0x09
    254c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    254e:	6f 81       	ldd	r22, Y+7	; 0x07
    2550:	78 85       	ldd	r23, Y+8	; 0x08
    2552:	89 85       	ldd	r24, Y+9	; 0x09
    2554:	9a 85       	ldd	r25, Y+10	; 0x0a
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e8       	ldi	r20, 0x80	; 128
    255c:	5f e3       	ldi	r21, 0x3F	; 63
    255e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2562:	88 23       	and	r24, r24
    2564:	2c f4       	brge	.+10     	; 0x2570 <LCD_Vid_SendChar4Bit+0x288>
		__ticks = 1;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	3f c0       	rjmp	.+126    	; 0x25ee <LCD_Vid_SendChar4Bit+0x306>
	else if (__tmp > 65535)
    2570:	6f 81       	ldd	r22, Y+7	; 0x07
    2572:	78 85       	ldd	r23, Y+8	; 0x08
    2574:	89 85       	ldd	r24, Y+9	; 0x09
    2576:	9a 85       	ldd	r25, Y+10	; 0x0a
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	3f ef       	ldi	r19, 0xFF	; 255
    257c:	4f e7       	ldi	r20, 0x7F	; 127
    257e:	57 e4       	ldi	r21, 0x47	; 71
    2580:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2584:	18 16       	cp	r1, r24
    2586:	4c f5       	brge	.+82     	; 0x25da <LCD_Vid_SendChar4Bit+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2588:	6b 85       	ldd	r22, Y+11	; 0x0b
    258a:	7c 85       	ldd	r23, Y+12	; 0x0c
    258c:	8d 85       	ldd	r24, Y+13	; 0x0d
    258e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e2       	ldi	r20, 0x20	; 32
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	8d 83       	std	Y+5, r24	; 0x05
    25b0:	0f c0       	rjmp	.+30     	; 0x25d0 <LCD_Vid_SendChar4Bit+0x2e8>
    25b2:	88 ec       	ldi	r24, 0xC8	; 200
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	9c 83       	std	Y+4, r25	; 0x04
    25b8:	8b 83       	std	Y+3, r24	; 0x03
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	9c 81       	ldd	r25, Y+4	; 0x04
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <LCD_Vid_SendChar4Bit+0x2d6>
    25c2:	9c 83       	std	Y+4, r25	; 0x04
    25c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c6:	8d 81       	ldd	r24, Y+5	; 0x05
    25c8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	9e 83       	std	Y+6, r25	; 0x06
    25ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	69 f7       	brne	.-38     	; 0x25b2 <LCD_Vid_SendChar4Bit+0x2ca>
    25d8:	14 c0       	rjmp	.+40     	; 0x2602 <LCD_Vid_SendChar4Bit+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25da:	6f 81       	ldd	r22, Y+7	; 0x07
    25dc:	78 85       	ldd	r23, Y+8	; 0x08
    25de:	89 85       	ldd	r24, Y+9	; 0x09
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
    25ee:	8d 81       	ldd	r24, Y+5	; 0x05
    25f0:	9e 81       	ldd	r25, Y+6	; 0x06
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <LCD_Vid_SendChar4Bit+0x312>
    25fe:	9a 83       	std	Y+2, r25	; 0x02
    2600:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(PORTCONTROL,E,HIGH);
    2602:	82 e0       	ldi	r24, 0x02	; 2
    2604:	67 e0       	ldi	r22, 0x07	; 7
    2606:	41 e0       	ldi	r20, 0x01	; 1
    2608:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>

}
    260c:	6f 96       	adiw	r28, 0x1f	; 31
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <LCD_Vid_4BitInit>:

void LCD_Vid_4BitInit(void)
{
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	e8 97       	sbiw	r28, 0x38	; 56
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	cd bf       	out	0x3d, r28	; 61
DIO_SetBinDirection(PORTCONTROL,RS,output);
    2632:	82 e0       	ldi	r24, 0x02	; 2
    2634:	65 e0       	ldi	r22, 0x05	; 5
    2636:	41 e0       	ldi	r20, 0x01	; 1
    2638:	0e 94 ad 1b 	call	0x375a	; 0x375a <DIO_SetBinDirection>
DIO_SetBinDirection(PORTCONTROL,RW,output);
    263c:	82 e0       	ldi	r24, 0x02	; 2
    263e:	66 e0       	ldi	r22, 0x06	; 6
    2640:	41 e0       	ldi	r20, 0x01	; 1
    2642:	0e 94 ad 1b 	call	0x375a	; 0x375a <DIO_SetBinDirection>
DIO_SetBinDirection(PORTCONTROL,E,output);
    2646:	82 e0       	ldi	r24, 0x02	; 2
    2648:	67 e0       	ldi	r22, 0x07	; 7
    264a:	41 e0       	ldi	r20, 0x01	; 1
    264c:	0e 94 ad 1b 	call	0x375a	; 0x375a <DIO_SetBinDirection>
DIO_SetBinDirection(PORTDATA,0,output);
    2650:	82 e0       	ldi	r24, 0x02	; 2
    2652:	60 e0       	ldi	r22, 0x00	; 0
    2654:	41 e0       	ldi	r20, 0x01	; 1
    2656:	0e 94 ad 1b 	call	0x375a	; 0x375a <DIO_SetBinDirection>
DIO_SetBinDirection(PORTDATA,1,output);
    265a:	82 e0       	ldi	r24, 0x02	; 2
    265c:	61 e0       	ldi	r22, 0x01	; 1
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	0e 94 ad 1b 	call	0x375a	; 0x375a <DIO_SetBinDirection>
DIO_SetBinDirection(PORTDATA,2,output);
    2664:	82 e0       	ldi	r24, 0x02	; 2
    2666:	62 e0       	ldi	r22, 0x02	; 2
    2668:	41 e0       	ldi	r20, 0x01	; 1
    266a:	0e 94 ad 1b 	call	0x375a	; 0x375a <DIO_SetBinDirection>
DIO_SetBinDirection(PORTDATA,3,output);
    266e:	82 e0       	ldi	r24, 0x02	; 2
    2670:	63 e0       	ldi	r22, 0x03	; 3
    2672:	41 e0       	ldi	r20, 0x01	; 1
    2674:	0e 94 ad 1b 	call	0x375a	; 0x375a <DIO_SetBinDirection>
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	a0 ef       	ldi	r26, 0xF0	; 240
    267e:	b1 e4       	ldi	r27, 0x41	; 65
    2680:	8d ab       	std	Y+53, r24	; 0x35
    2682:	9e ab       	std	Y+54, r25	; 0x36
    2684:	af ab       	std	Y+55, r26	; 0x37
    2686:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2688:	6d a9       	ldd	r22, Y+53	; 0x35
    268a:	7e a9       	ldd	r23, Y+54	; 0x36
    268c:	8f a9       	ldd	r24, Y+55	; 0x37
    268e:	98 ad       	ldd	r25, Y+56	; 0x38
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	4a ef       	ldi	r20, 0xFA	; 250
    2696:	54 e4       	ldi	r21, 0x44	; 68
    2698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	89 ab       	std	Y+49, r24	; 0x31
    26a2:	9a ab       	std	Y+50, r25	; 0x32
    26a4:	ab ab       	std	Y+51, r26	; 0x33
    26a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26a8:	69 a9       	ldd	r22, Y+49	; 0x31
    26aa:	7a a9       	ldd	r23, Y+50	; 0x32
    26ac:	8b a9       	ldd	r24, Y+51	; 0x33
    26ae:	9c a9       	ldd	r25, Y+52	; 0x34
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e8       	ldi	r20, 0x80	; 128
    26b6:	5f e3       	ldi	r21, 0x3F	; 63
    26b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26bc:	88 23       	and	r24, r24
    26be:	2c f4       	brge	.+10     	; 0x26ca <LCD_Vid_4BitInit+0xac>
		__ticks = 1;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	98 ab       	std	Y+48, r25	; 0x30
    26c6:	8f a7       	std	Y+47, r24	; 0x2f
    26c8:	3f c0       	rjmp	.+126    	; 0x2748 <LCD_Vid_4BitInit+0x12a>
	else if (__tmp > 65535)
    26ca:	69 a9       	ldd	r22, Y+49	; 0x31
    26cc:	7a a9       	ldd	r23, Y+50	; 0x32
    26ce:	8b a9       	ldd	r24, Y+51	; 0x33
    26d0:	9c a9       	ldd	r25, Y+52	; 0x34
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	3f ef       	ldi	r19, 0xFF	; 255
    26d6:	4f e7       	ldi	r20, 0x7F	; 127
    26d8:	57 e4       	ldi	r21, 0x47	; 71
    26da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26de:	18 16       	cp	r1, r24
    26e0:	4c f5       	brge	.+82     	; 0x2734 <LCD_Vid_4BitInit+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e2:	6d a9       	ldd	r22, Y+53	; 0x35
    26e4:	7e a9       	ldd	r23, Y+54	; 0x36
    26e6:	8f a9       	ldd	r24, Y+55	; 0x37
    26e8:	98 ad       	ldd	r25, Y+56	; 0x38
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e2       	ldi	r20, 0x20	; 32
    26f0:	51 e4       	ldi	r21, 0x41	; 65
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	98 ab       	std	Y+48, r25	; 0x30
    2708:	8f a7       	std	Y+47, r24	; 0x2f
    270a:	0f c0       	rjmp	.+30     	; 0x272a <LCD_Vid_4BitInit+0x10c>
    270c:	88 ec       	ldi	r24, 0xC8	; 200
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9e a7       	std	Y+46, r25	; 0x2e
    2712:	8d a7       	std	Y+45, r24	; 0x2d
    2714:	8d a5       	ldd	r24, Y+45	; 0x2d
    2716:	9e a5       	ldd	r25, Y+46	; 0x2e
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <LCD_Vid_4BitInit+0xfa>
    271c:	9e a7       	std	Y+46, r25	; 0x2e
    271e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2720:	8f a5       	ldd	r24, Y+47	; 0x2f
    2722:	98 a9       	ldd	r25, Y+48	; 0x30
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	98 ab       	std	Y+48, r25	; 0x30
    2728:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272a:	8f a5       	ldd	r24, Y+47	; 0x2f
    272c:	98 a9       	ldd	r25, Y+48	; 0x30
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	69 f7       	brne	.-38     	; 0x270c <LCD_Vid_4BitInit+0xee>
    2732:	14 c0       	rjmp	.+40     	; 0x275c <LCD_Vid_4BitInit+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2734:	69 a9       	ldd	r22, Y+49	; 0x31
    2736:	7a a9       	ldd	r23, Y+50	; 0x32
    2738:	8b a9       	ldd	r24, Y+51	; 0x33
    273a:	9c a9       	ldd	r25, Y+52	; 0x34
    273c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	98 ab       	std	Y+48, r25	; 0x30
    2746:	8f a7       	std	Y+47, r24	; 0x2f
    2748:	8f a5       	ldd	r24, Y+47	; 0x2f
    274a:	98 a9       	ldd	r25, Y+48	; 0x30
    274c:	9c a7       	std	Y+44, r25	; 0x2c
    274e:	8b a7       	std	Y+43, r24	; 0x2b
    2750:	8b a5       	ldd	r24, Y+43	; 0x2b
    2752:	9c a5       	ldd	r25, Y+44	; 0x2c
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <LCD_Vid_4BitInit+0x136>
    2758:	9c a7       	std	Y+44, r25	; 0x2c
    275a:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(30);
LCD_Vid_SendCommand4Bit_test(FunctionSet_4bit);
    275c:	8c e2       	ldi	r24, 0x2C	; 44
    275e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_Vid_SendCommand4Bit_test>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	a0 e0       	ldi	r26, 0x00	; 0
    2768:	b0 e4       	ldi	r27, 0x40	; 64
    276a:	8f a3       	std	Y+39, r24	; 0x27
    276c:	98 a7       	std	Y+40, r25	; 0x28
    276e:	a9 a7       	std	Y+41, r26	; 0x29
    2770:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2772:	6f a1       	ldd	r22, Y+39	; 0x27
    2774:	78 a5       	ldd	r23, Y+40	; 0x28
    2776:	89 a5       	ldd	r24, Y+41	; 0x29
    2778:	9a a5       	ldd	r25, Y+42	; 0x2a
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	4a ef       	ldi	r20, 0xFA	; 250
    2780:	54 e4       	ldi	r21, 0x44	; 68
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	8b a3       	std	Y+35, r24	; 0x23
    278c:	9c a3       	std	Y+36, r25	; 0x24
    278e:	ad a3       	std	Y+37, r26	; 0x25
    2790:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2792:	6b a1       	ldd	r22, Y+35	; 0x23
    2794:	7c a1       	ldd	r23, Y+36	; 0x24
    2796:	8d a1       	ldd	r24, Y+37	; 0x25
    2798:	9e a1       	ldd	r25, Y+38	; 0x26
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e8       	ldi	r20, 0x80	; 128
    27a0:	5f e3       	ldi	r21, 0x3F	; 63
    27a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	2c f4       	brge	.+10     	; 0x27b4 <LCD_Vid_4BitInit+0x196>
		__ticks = 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9a a3       	std	Y+34, r25	; 0x22
    27b0:	89 a3       	std	Y+33, r24	; 0x21
    27b2:	3f c0       	rjmp	.+126    	; 0x2832 <LCD_Vid_4BitInit+0x214>
	else if (__tmp > 65535)
    27b4:	6b a1       	ldd	r22, Y+35	; 0x23
    27b6:	7c a1       	ldd	r23, Y+36	; 0x24
    27b8:	8d a1       	ldd	r24, Y+37	; 0x25
    27ba:	9e a1       	ldd	r25, Y+38	; 0x26
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	3f ef       	ldi	r19, 0xFF	; 255
    27c0:	4f e7       	ldi	r20, 0x7F	; 127
    27c2:	57 e4       	ldi	r21, 0x47	; 71
    27c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c8:	18 16       	cp	r1, r24
    27ca:	4c f5       	brge	.+82     	; 0x281e <LCD_Vid_4BitInit+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27cc:	6f a1       	ldd	r22, Y+39	; 0x27
    27ce:	78 a5       	ldd	r23, Y+40	; 0x28
    27d0:	89 a5       	ldd	r24, Y+41	; 0x29
    27d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e2       	ldi	r20, 0x20	; 32
    27da:	51 e4       	ldi	r21, 0x41	; 65
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	9a a3       	std	Y+34, r25	; 0x22
    27f2:	89 a3       	std	Y+33, r24	; 0x21
    27f4:	0f c0       	rjmp	.+30     	; 0x2814 <LCD_Vid_4BitInit+0x1f6>
    27f6:	88 ec       	ldi	r24, 0xC8	; 200
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	98 a3       	std	Y+32, r25	; 0x20
    27fc:	8f 8f       	std	Y+31, r24	; 0x1f
    27fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2800:	98 a1       	ldd	r25, Y+32	; 0x20
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <LCD_Vid_4BitInit+0x1e4>
    2806:	98 a3       	std	Y+32, r25	; 0x20
    2808:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280a:	89 a1       	ldd	r24, Y+33	; 0x21
    280c:	9a a1       	ldd	r25, Y+34	; 0x22
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	9a a3       	std	Y+34, r25	; 0x22
    2812:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2814:	89 a1       	ldd	r24, Y+33	; 0x21
    2816:	9a a1       	ldd	r25, Y+34	; 0x22
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	69 f7       	brne	.-38     	; 0x27f6 <LCD_Vid_4BitInit+0x1d8>
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <LCD_Vid_4BitInit+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281e:	6b a1       	ldd	r22, Y+35	; 0x23
    2820:	7c a1       	ldd	r23, Y+36	; 0x24
    2822:	8d a1       	ldd	r24, Y+37	; 0x25
    2824:	9e a1       	ldd	r25, Y+38	; 0x26
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	9a a3       	std	Y+34, r25	; 0x22
    2830:	89 a3       	std	Y+33, r24	; 0x21
    2832:	89 a1       	ldd	r24, Y+33	; 0x21
    2834:	9a a1       	ldd	r25, Y+34	; 0x22
    2836:	9e 8f       	std	Y+30, r25	; 0x1e
    2838:	8d 8f       	std	Y+29, r24	; 0x1d
    283a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    283c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <LCD_Vid_4BitInit+0x220>
    2842:	9e 8f       	std	Y+30, r25	; 0x1e
    2844:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(2);
LCD_Vid_SendCommand4Bit(DisplayON);
    2846:	8e e0       	ldi	r24, 0x0E	; 14
    2848:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_Vid_SendCommand4Bit>
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	a0 e0       	ldi	r26, 0x00	; 0
    2852:	b0 e4       	ldi	r27, 0x40	; 64
    2854:	89 8f       	std	Y+25, r24	; 0x19
    2856:	9a 8f       	std	Y+26, r25	; 0x1a
    2858:	ab 8f       	std	Y+27, r26	; 0x1b
    285a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285c:	69 8d       	ldd	r22, Y+25	; 0x19
    285e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2860:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2862:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	4a ef       	ldi	r20, 0xFA	; 250
    286a:	54 e4       	ldi	r21, 0x44	; 68
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	8d 8b       	std	Y+21, r24	; 0x15
    2876:	9e 8b       	std	Y+22, r25	; 0x16
    2878:	af 8b       	std	Y+23, r26	; 0x17
    287a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    287c:	6d 89       	ldd	r22, Y+21	; 0x15
    287e:	7e 89       	ldd	r23, Y+22	; 0x16
    2880:	8f 89       	ldd	r24, Y+23	; 0x17
    2882:	98 8d       	ldd	r25, Y+24	; 0x18
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e8       	ldi	r20, 0x80	; 128
    288a:	5f e3       	ldi	r21, 0x3F	; 63
    288c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2890:	88 23       	and	r24, r24
    2892:	2c f4       	brge	.+10     	; 0x289e <LCD_Vid_4BitInit+0x280>
		__ticks = 1;
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	9c 8b       	std	Y+20, r25	; 0x14
    289a:	8b 8b       	std	Y+19, r24	; 0x13
    289c:	3f c0       	rjmp	.+126    	; 0x291c <LCD_Vid_4BitInit+0x2fe>
	else if (__tmp > 65535)
    289e:	6d 89       	ldd	r22, Y+21	; 0x15
    28a0:	7e 89       	ldd	r23, Y+22	; 0x16
    28a2:	8f 89       	ldd	r24, Y+23	; 0x17
    28a4:	98 8d       	ldd	r25, Y+24	; 0x18
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f e7       	ldi	r20, 0x7F	; 127
    28ac:	57 e4       	ldi	r21, 0x47	; 71
    28ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b2:	18 16       	cp	r1, r24
    28b4:	4c f5       	brge	.+82     	; 0x2908 <LCD_Vid_4BitInit+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b6:	69 8d       	ldd	r22, Y+25	; 0x19
    28b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e2       	ldi	r20, 0x20	; 32
    28c4:	51 e4       	ldi	r21, 0x41	; 65
    28c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9c 8b       	std	Y+20, r25	; 0x14
    28dc:	8b 8b       	std	Y+19, r24	; 0x13
    28de:	0f c0       	rjmp	.+30     	; 0x28fe <LCD_Vid_4BitInit+0x2e0>
    28e0:	88 ec       	ldi	r24, 0xC8	; 200
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	9a 8b       	std	Y+18, r25	; 0x12
    28e6:	89 8b       	std	Y+17, r24	; 0x11
    28e8:	89 89       	ldd	r24, Y+17	; 0x11
    28ea:	9a 89       	ldd	r25, Y+18	; 0x12
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <LCD_Vid_4BitInit+0x2ce>
    28f0:	9a 8b       	std	Y+18, r25	; 0x12
    28f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f4:	8b 89       	ldd	r24, Y+19	; 0x13
    28f6:	9c 89       	ldd	r25, Y+20	; 0x14
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	9c 8b       	std	Y+20, r25	; 0x14
    28fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2900:	9c 89       	ldd	r25, Y+20	; 0x14
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	69 f7       	brne	.-38     	; 0x28e0 <LCD_Vid_4BitInit+0x2c2>
    2906:	14 c0       	rjmp	.+40     	; 0x2930 <LCD_Vid_4BitInit+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2908:	6d 89       	ldd	r22, Y+21	; 0x15
    290a:	7e 89       	ldd	r23, Y+22	; 0x16
    290c:	8f 89       	ldd	r24, Y+23	; 0x17
    290e:	98 8d       	ldd	r25, Y+24	; 0x18
    2910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	9c 8b       	std	Y+20, r25	; 0x14
    291a:	8b 8b       	std	Y+19, r24	; 0x13
    291c:	8b 89       	ldd	r24, Y+19	; 0x13
    291e:	9c 89       	ldd	r25, Y+20	; 0x14
    2920:	98 8b       	std	Y+16, r25	; 0x10
    2922:	8f 87       	std	Y+15, r24	; 0x0f
    2924:	8f 85       	ldd	r24, Y+15	; 0x0f
    2926:	98 89       	ldd	r25, Y+16	; 0x10
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <LCD_Vid_4BitInit+0x30a>
    292c:	98 8b       	std	Y+16, r25	; 0x10
    292e:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(2);
LCD_Vid_SendCommand4Bit(DisplayClear);
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_Vid_SendCommand4Bit>
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 e0       	ldi	r26, 0x00	; 0
    293c:	b0 e4       	ldi	r27, 0x40	; 64
    293e:	8b 87       	std	Y+11, r24	; 0x0b
    2940:	9c 87       	std	Y+12, r25	; 0x0c
    2942:	ad 87       	std	Y+13, r26	; 0x0d
    2944:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2946:	6b 85       	ldd	r22, Y+11	; 0x0b
    2948:	7c 85       	ldd	r23, Y+12	; 0x0c
    294a:	8d 85       	ldd	r24, Y+13	; 0x0d
    294c:	9e 85       	ldd	r25, Y+14	; 0x0e
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	4a ef       	ldi	r20, 0xFA	; 250
    2954:	54 e4       	ldi	r21, 0x44	; 68
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	8f 83       	std	Y+7, r24	; 0x07
    2960:	98 87       	std	Y+8, r25	; 0x08
    2962:	a9 87       	std	Y+9, r26	; 0x09
    2964:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2966:	6f 81       	ldd	r22, Y+7	; 0x07
    2968:	78 85       	ldd	r23, Y+8	; 0x08
    296a:	89 85       	ldd	r24, Y+9	; 0x09
    296c:	9a 85       	ldd	r25, Y+10	; 0x0a
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e8       	ldi	r20, 0x80	; 128
    2974:	5f e3       	ldi	r21, 0x3F	; 63
    2976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    297a:	88 23       	and	r24, r24
    297c:	2c f4       	brge	.+10     	; 0x2988 <LCD_Vid_4BitInit+0x36a>
		__ticks = 1;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	9e 83       	std	Y+6, r25	; 0x06
    2984:	8d 83       	std	Y+5, r24	; 0x05
    2986:	3f c0       	rjmp	.+126    	; 0x2a06 <LCD_Vid_4BitInit+0x3e8>
	else if (__tmp > 65535)
    2988:	6f 81       	ldd	r22, Y+7	; 0x07
    298a:	78 85       	ldd	r23, Y+8	; 0x08
    298c:	89 85       	ldd	r24, Y+9	; 0x09
    298e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	3f ef       	ldi	r19, 0xFF	; 255
    2994:	4f e7       	ldi	r20, 0x7F	; 127
    2996:	57 e4       	ldi	r21, 0x47	; 71
    2998:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    299c:	18 16       	cp	r1, r24
    299e:	4c f5       	brge	.+82     	; 0x29f2 <LCD_Vid_4BitInit+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e2       	ldi	r20, 0x20	; 32
    29ae:	51 e4       	ldi	r21, 0x41	; 65
    29b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	9e 83       	std	Y+6, r25	; 0x06
    29c6:	8d 83       	std	Y+5, r24	; 0x05
    29c8:	0f c0       	rjmp	.+30     	; 0x29e8 <LCD_Vid_4BitInit+0x3ca>
    29ca:	88 ec       	ldi	r24, 0xC8	; 200
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	9c 83       	std	Y+4, r25	; 0x04
    29d0:	8b 83       	std	Y+3, r24	; 0x03
    29d2:	8b 81       	ldd	r24, Y+3	; 0x03
    29d4:	9c 81       	ldd	r25, Y+4	; 0x04
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	f1 f7       	brne	.-4      	; 0x29d6 <LCD_Vid_4BitInit+0x3b8>
    29da:	9c 83       	std	Y+4, r25	; 0x04
    29dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29de:	8d 81       	ldd	r24, Y+5	; 0x05
    29e0:	9e 81       	ldd	r25, Y+6	; 0x06
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	9e 83       	std	Y+6, r25	; 0x06
    29e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ea:	9e 81       	ldd	r25, Y+6	; 0x06
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	69 f7       	brne	.-38     	; 0x29ca <LCD_Vid_4BitInit+0x3ac>
    29f0:	14 c0       	rjmp	.+40     	; 0x2a1a <LCD_Vid_4BitInit+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f2:	6f 81       	ldd	r22, Y+7	; 0x07
    29f4:	78 85       	ldd	r23, Y+8	; 0x08
    29f6:	89 85       	ldd	r24, Y+9	; 0x09
    29f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	9e 83       	std	Y+6, r25	; 0x06
    2a04:	8d 83       	std	Y+5, r24	; 0x05
    2a06:	8d 81       	ldd	r24, Y+5	; 0x05
    2a08:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0a:	9a 83       	std	Y+2, r25	; 0x02
    2a0c:	89 83       	std	Y+1, r24	; 0x01
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	9a 81       	ldd	r25, Y+2	; 0x02
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <LCD_Vid_4BitInit+0x3f4>
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
LCD_Vid_SendCommand4Bit(EntryModeSet);
    2a1a:	86 e0       	ldi	r24, 0x06	; 6
    2a1c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_Vid_SendCommand4Bit>

}
    2a20:	e8 96       	adiw	r28, 0x38	; 56
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	08 95       	ret

00002a32 <LCD_displayString_4bit>:
void LCD_displayString_4bit(const char *Str)
{
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <LCD_displayString_4bit+0x6>
    2a38:	0f 92       	push	r0
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	9b 83       	std	Y+3, r25	; 0x03
    2a40:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a42:	19 82       	std	Y+1, r1	; 0x01
    2a44:	0e c0       	rjmp	.+28     	; 0x2a62 <LCD_displayString_4bit+0x30>
	while(Str[i] != '\0')
	{
		LCD_Vid_SendChar4Bit(Str[i]);
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	28 2f       	mov	r18, r24
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a50:	fc 01       	movw	r30, r24
    2a52:	e2 0f       	add	r30, r18
    2a54:	f3 1f       	adc	r31, r19
    2a56:	80 81       	ld	r24, Z
    2a58:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_Vid_SendChar4Bit>
		i++;
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	8f 5f       	subi	r24, 0xFF	; 255
    2a60:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_displayString_4bit(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	28 2f       	mov	r18, r24
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	e2 0f       	add	r30, r18
    2a70:	f3 1f       	adc	r31, r19
    2a72:	80 81       	ld	r24, Z
    2a74:	88 23       	and	r24, r24
    2a76:	39 f7       	brne	.-50     	; 0x2a46 <LCD_displayString_4bit+0x14>
	{
		LCD_Vid_SendChar4Bit(Str[i]);
		i++;
	}

}
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <LCD_displayString>:


void LCD_displayString(const char *Str)
{
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <LCD_displayString+0x6>
    2a8a:	0f 92       	push	r0
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	9b 83       	std	Y+3, r25	; 0x03
    2a92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a94:	19 82       	std	Y+1, r1	; 0x01
    2a96:	0e c0       	rjmp	.+28     	; 0x2ab4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_Vid_SendChar(Str[i]);
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	e2 0f       	add	r30, r18
    2aa6:	f3 1f       	adc	r31, r19
    2aa8:	80 81       	ld	r24, Z
    2aaa:	0e 94 2c 08 	call	0x1058	; 0x1058 <LCD_Vid_SendChar>
		i++;
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	8f 5f       	subi	r24, 0xFF	; 255
    2ab2:	89 83       	std	Y+1, r24	; 0x01


void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	28 2f       	mov	r18, r24
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	9b 81       	ldd	r25, Y+3	; 0x03
    2abe:	fc 01       	movw	r30, r24
    2ac0:	e2 0f       	add	r30, r18
    2ac2:	f3 1f       	adc	r31, r19
    2ac4:	80 81       	ld	r24, Z
    2ac6:	88 23       	and	r24, r24
    2ac8:	39 f7       	brne	.-50     	; 0x2a98 <LCD_displayString+0x14>
	{
		LCD_Vid_SendChar(Str[i]);
		i++;
	}

}
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	00 d0       	rcall	.+0      	; 0x2adc <LCD_goToRowColumn+0x6>
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <LCD_goToRowColumn+0x8>
    2ade:	0f 92       	push	r0
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	8a 83       	std	Y+2, r24	; 0x02
    2ae6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	28 2f       	mov	r18, r24
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	3d 83       	std	Y+5, r19	; 0x05
    2af0:	2c 83       	std	Y+4, r18	; 0x04
    2af2:	8c 81       	ldd	r24, Y+4	; 0x04
    2af4:	9d 81       	ldd	r25, Y+5	; 0x05
    2af6:	81 30       	cpi	r24, 0x01	; 1
    2af8:	91 05       	cpc	r25, r1
    2afa:	c1 f0       	breq	.+48     	; 0x2b2c <LCD_goToRowColumn+0x56>
    2afc:	2c 81       	ldd	r18, Y+4	; 0x04
    2afe:	3d 81       	ldd	r19, Y+5	; 0x05
    2b00:	22 30       	cpi	r18, 0x02	; 2
    2b02:	31 05       	cpc	r19, r1
    2b04:	2c f4       	brge	.+10     	; 0x2b10 <LCD_goToRowColumn+0x3a>
    2b06:	8c 81       	ldd	r24, Y+4	; 0x04
    2b08:	9d 81       	ldd	r25, Y+5	; 0x05
    2b0a:	00 97       	sbiw	r24, 0x00	; 0
    2b0c:	61 f0       	breq	.+24     	; 0x2b26 <LCD_goToRowColumn+0x50>
    2b0e:	19 c0       	rjmp	.+50     	; 0x2b42 <LCD_goToRowColumn+0x6c>
    2b10:	2c 81       	ldd	r18, Y+4	; 0x04
    2b12:	3d 81       	ldd	r19, Y+5	; 0x05
    2b14:	22 30       	cpi	r18, 0x02	; 2
    2b16:	31 05       	cpc	r19, r1
    2b18:	69 f0       	breq	.+26     	; 0x2b34 <LCD_goToRowColumn+0x5e>
    2b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b1e:	83 30       	cpi	r24, 0x03	; 3
    2b20:	91 05       	cpc	r25, r1
    2b22:	61 f0       	breq	.+24     	; 0x2b3c <LCD_goToRowColumn+0x66>
    2b24:	0e c0       	rjmp	.+28     	; 0x2b42 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	0b c0       	rjmp	.+22     	; 0x2b42 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2e:	80 5c       	subi	r24, 0xC0	; 192
    2b30:	89 83       	std	Y+1, r24	; 0x01
    2b32:	07 c0       	rjmp	.+14     	; 0x2b42 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	80 5f       	subi	r24, 0xF0	; 240
    2b38:	89 83       	std	Y+1, r24	; 0x01
    2b3a:	03 c0       	rjmp	.+6      	; 0x2b42 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	80 5b       	subi	r24, 0xB0	; 176
    2b40:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_Vid_SendCommand(Address | SET_CURSOR_LOCATION);
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	80 68       	ori	r24, 0x80	; 128
    2b46:	0e 94 17 07 	call	0xe2e	; 0xe2e <LCD_Vid_SendCommand>
}
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	00 d0       	rcall	.+0      	; 0x2b60 <LCD_displayStringRowColumn+0x6>
    2b60:	00 d0       	rcall	.+0      	; 0x2b62 <LCD_displayStringRowColumn+0x8>
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
    2b66:	89 83       	std	Y+1, r24	; 0x01
    2b68:	6a 83       	std	Y+2, r22	; 0x02
    2b6a:	5c 83       	std	Y+4, r21	; 0x04
    2b6c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	6a 81       	ldd	r22, Y+2	; 0x02
    2b72:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2b76:	8b 81       	ldd	r24, Y+3	; 0x03
    2b78:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7a:	0e 94 42 15 	call	0x2a84	; 0x2a84 <LCD_displayString>
}
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	62 97       	sbiw	r28, 0x12	; 18
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	f8 94       	cli
    2b9a:	de bf       	out	0x3e, r29	; 62
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	cd bf       	out	0x3d, r28	; 61
    2ba0:	9a 8b       	std	Y+18, r25	; 0x12
    2ba2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2ba4:	89 89       	ldd	r24, Y+17	; 0x11
    2ba6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ba8:	9e 01       	movw	r18, r28
    2baa:	2f 5f       	subi	r18, 0xFF	; 255
    2bac:	3f 4f       	sbci	r19, 0xFF	; 255
    2bae:	b9 01       	movw	r22, r18
    2bb0:	4a e0       	ldi	r20, 0x0A	; 10
    2bb2:	50 e0       	ldi	r21, 0x00	; 0
    2bb4:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <itoa>
   LCD_displayString(buff);
    2bb8:	ce 01       	movw	r24, r28
    2bba:	01 96       	adiw	r24, 0x01	; 1
    2bbc:	0e 94 42 15 	call	0x2a84	; 0x2a84 <LCD_displayString>
}
    2bc0:	62 96       	adiw	r28, 0x12	; 18
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	cd bf       	out	0x3d, r28	; 61
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
	LCD_Vid_SendCommand(DisplayClear); //clear display
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	0e 94 17 07 	call	0xe2e	; 0xe2e <LCD_Vid_SendCommand>
}
    2be0:	cf 91       	pop	r28
    2be2:	df 91       	pop	r29
    2be4:	08 95       	ret

00002be6 <LCD_clearScreen_4bit>:
void LCD_clearScreen_4bit(void)
{
    2be6:	df 93       	push	r29
    2be8:	cf 93       	push	r28
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62
	LCD_Vid_SendCommand4Bit(DisplayClear); //clear display
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_Vid_SendCommand4Bit>
}
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <LCD_intgerToString_4bit>:

void LCD_intgerToString_4bit(int data)
{
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	62 97       	sbiw	r28, 0x12	; 18
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	9a 8b       	std	Y+18, r25	; 0x12
    2c10:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2c12:	89 89       	ldd	r24, Y+17	; 0x11
    2c14:	9a 89       	ldd	r25, Y+18	; 0x12
    2c16:	9e 01       	movw	r18, r28
    2c18:	2f 5f       	subi	r18, 0xFF	; 255
    2c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1c:	b9 01       	movw	r22, r18
    2c1e:	4a e0       	ldi	r20, 0x0A	; 10
    2c20:	50 e0       	ldi	r21, 0x00	; 0
    2c22:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <itoa>
   LCD_displayString_4bit(buff);
    2c26:	ce 01       	movw	r24, r28
    2c28:	01 96       	adiw	r24, 0x01	; 1
    2c2a:	0e 94 19 15 	call	0x2a32	; 0x2a32 <LCD_displayString_4bit>
}
    2c2e:	62 96       	adiw	r28, 0x12	; 18
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	f8 94       	cli
    2c34:	de bf       	out	0x3e, r29	; 62
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	cd bf       	out	0x3d, r28	; 61
    2c3a:	cf 91       	pop	r28
    2c3c:	df 91       	pop	r29
    2c3e:	08 95       	ret

00002c40 <LCD_goToRowColumn_4bit>:
void LCD_goToRowColumn_4bit(uint8 row,uint8 col)
{
    2c40:	df 93       	push	r29
    2c42:	cf 93       	push	r28
    2c44:	00 d0       	rcall	.+0      	; 0x2c46 <LCD_goToRowColumn_4bit+0x6>
    2c46:	00 d0       	rcall	.+0      	; 0x2c48 <LCD_goToRowColumn_4bit+0x8>
    2c48:	0f 92       	push	r0
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
    2c4e:	8a 83       	std	Y+2, r24	; 0x02
    2c50:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	28 2f       	mov	r18, r24
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	3d 83       	std	Y+5, r19	; 0x05
    2c5a:	2c 83       	std	Y+4, r18	; 0x04
    2c5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c60:	81 30       	cpi	r24, 0x01	; 1
    2c62:	91 05       	cpc	r25, r1
    2c64:	c1 f0       	breq	.+48     	; 0x2c96 <LCD_goToRowColumn_4bit+0x56>
    2c66:	2c 81       	ldd	r18, Y+4	; 0x04
    2c68:	3d 81       	ldd	r19, Y+5	; 0x05
    2c6a:	22 30       	cpi	r18, 0x02	; 2
    2c6c:	31 05       	cpc	r19, r1
    2c6e:	2c f4       	brge	.+10     	; 0x2c7a <LCD_goToRowColumn_4bit+0x3a>
    2c70:	8c 81       	ldd	r24, Y+4	; 0x04
    2c72:	9d 81       	ldd	r25, Y+5	; 0x05
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	61 f0       	breq	.+24     	; 0x2c90 <LCD_goToRowColumn_4bit+0x50>
    2c78:	19 c0       	rjmp	.+50     	; 0x2cac <LCD_goToRowColumn_4bit+0x6c>
    2c7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2c7e:	22 30       	cpi	r18, 0x02	; 2
    2c80:	31 05       	cpc	r19, r1
    2c82:	69 f0       	breq	.+26     	; 0x2c9e <LCD_goToRowColumn_4bit+0x5e>
    2c84:	8c 81       	ldd	r24, Y+4	; 0x04
    2c86:	9d 81       	ldd	r25, Y+5	; 0x05
    2c88:	83 30       	cpi	r24, 0x03	; 3
    2c8a:	91 05       	cpc	r25, r1
    2c8c:	61 f0       	breq	.+24     	; 0x2ca6 <LCD_goToRowColumn_4bit+0x66>
    2c8e:	0e c0       	rjmp	.+28     	; 0x2cac <LCD_goToRowColumn_4bit+0x6c>
	{
		case 0:
				Address=col;
    2c90:	8b 81       	ldd	r24, Y+3	; 0x03
    2c92:	89 83       	std	Y+1, r24	; 0x01
    2c94:	0b c0       	rjmp	.+22     	; 0x2cac <LCD_goToRowColumn_4bit+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2c96:	8b 81       	ldd	r24, Y+3	; 0x03
    2c98:	80 5c       	subi	r24, 0xC0	; 192
    2c9a:	89 83       	std	Y+1, r24	; 0x01
    2c9c:	07 c0       	rjmp	.+14     	; 0x2cac <LCD_goToRowColumn_4bit+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	80 5f       	subi	r24, 0xF0	; 240
    2ca2:	89 83       	std	Y+1, r24	; 0x01
    2ca4:	03 c0       	rjmp	.+6      	; 0x2cac <LCD_goToRowColumn_4bit+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca8:	80 5b       	subi	r24, 0xB0	; 176
    2caa:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_Vid_SendCommand4Bit(Address | SET_CURSOR_LOCATION);
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	80 68       	ori	r24, 0x80	; 128
    2cb0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_Vid_SendCommand4Bit>
}
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <LCD_voidGoto>:
void LCD_voidGoto(u8 y,u8 x)
{
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <LCD_voidGoto+0x6>
    2cca:	00 d0       	rcall	.+0      	; 0x2ccc <LCD_voidGoto+0x8>
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	8b 83       	std	Y+3, r24	; 0x03
    2cd2:	6c 83       	std	Y+4, r22	; 0x04
	u8 arr[2]={0x80,0xc0};
    2cd4:	80 e8       	ldi	r24, 0x80	; 128
    2cd6:	89 83       	std	Y+1, r24	; 0x01
    2cd8:	80 ec       	ldi	r24, 0xC0	; 192
    2cda:	8a 83       	std	Y+2, r24	; 0x02
	LCD_Vid_SendCommand4Bit(arr[y] + x);
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cde:	28 2f       	mov	r18, r24
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	01 96       	adiw	r24, 0x01	; 1
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	e2 0f       	add	r30, r18
    2cea:	f3 1f       	adc	r31, r19
    2cec:	90 81       	ld	r25, Z
    2cee:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf0:	89 0f       	add	r24, r25
    2cf2:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_Vid_SendCommand4Bit>
}
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <main>:
char Rec_UDR;
char Temp_UDR;
//proto type
/* Include BIT_MATH file */
int main(void)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <main+0x6>
    2d0a:	00 d0       	rcall	.+0      	; 0x2d0c <main+0x8>
    2d0c:	00 d0       	rcall	.+0      	; 0x2d0e <main+0xa>
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
	SREG_Reg=0b10000000;//global interrput enable
    2d12:	ef e5       	ldi	r30, 0x5F	; 95
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 e8       	ldi	r24, 0x80	; 128
    2d18:	80 83       	st	Z, r24

int GAS=0;
    2d1a:	1e 82       	std	Y+6, r1	; 0x06
    2d1c:	1d 82       	std	Y+5, r1	; 0x05
uint32 temp;
LCD_Vid_4BitInit(); /* initialize LCD driver */
    2d1e:	0e 94 0f 13 	call	0x261e	; 0x261e <LCD_Vid_4BitInit>
	USART_vidinit();
    2d22:	0e 94 1a 1a 	call	0x3434	; 0x3434 <USART_vidinit>
	ADC_init(); /* initialize ADC driver */
    2d26:	0e 94 ae 1a 	call	0x355c	; 0x355c <ADC_init>
DIO_SetPortdirection(PORTBB,output);
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	61 e0       	ldi	r22, 0x01	; 1
    2d2e:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <DIO_SetPortdirection>
LCD_displayString_4bit("Direction= ");
    2d32:	80 e6       	ldi	r24, 0x60	; 96
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	0e 94 19 15 	call	0x2a32	; 0x2a32 <LCD_displayString_4bit>

while(1){



	LCD_goToRowColumn_4bit(0,10);/* display the number every time at this position */
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	6a e0       	ldi	r22, 0x0A	; 10
    2d3e:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_goToRowColumn_4bit>
//****MOTOR Driver HW_95 and DC motor and linear follower *****//
/* display the number every time at this position */
	if(Temp_UDR=='w')
    2d42:	80 91 ba 01 	lds	r24, 0x01BA
    2d46:	87 37       	cpi	r24, 0x77	; 119
    2d48:	f1 f4       	brne	.+60     	; 0x2d86 <main+0x82>
				{
						USR_vidSend('w');
    2d4a:	87 e7       	ldi	r24, 0x77	; 119
    2d4c:	0e 94 41 1a 	call	0x3482	; 0x3482 <USR_vidSend>
						DIO_SetPinValue(PORTBB,pin3,LOW);
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	63 e0       	ldi	r22, 0x03	; 3
    2d54:	40 e0       	ldi	r20, 0x00	; 0
    2d56:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
						DIO_SetPinValue(PORTBB,pin4,HIGH);
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	64 e0       	ldi	r22, 0x04	; 4
    2d5e:	41 e0       	ldi	r20, 0x01	; 1
    2d60:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
						DIO_SetPinValue(PORTBB,pin5,LOW);
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	65 e0       	ldi	r22, 0x05	; 5
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
						DIO_SetPinValue(PORTBB,pin6,HIGH);
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	66 e0       	ldi	r22, 0x06	; 6
    2d72:	41 e0       	ldi	r20, 0x01	; 1
    2d74:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
						LCD_displayString_4bit("Forward");
    2d78:	8c e6       	ldi	r24, 0x6C	; 108
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 19 15 	call	0x2a32	; 0x2a32 <LCD_displayString_4bit>
						Temp_UDR=0;
    2d80:	10 92 ba 01 	sts	0x01BA, r1
    2d84:	5c c0       	rjmp	.+184    	; 0x2e3e <main+0x13a>
				}
		else if(Temp_UDR=='a')
    2d86:	80 91 ba 01 	lds	r24, 0x01BA
    2d8a:	81 36       	cpi	r24, 0x61	; 97
    2d8c:	d9 f4       	brne	.+54     	; 0x2dc4 <main+0xc0>
				{

				DIO_SetPinValue(PORTBB,pin5,LOW);
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	65 e0       	ldi	r22, 0x05	; 5
    2d92:	40 e0       	ldi	r20, 0x00	; 0
    2d94:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
				DIO_SetPinValue(PORTBB,pin6,HIGH);
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	66 e0       	ldi	r22, 0x06	; 6
    2d9c:	41 e0       	ldi	r20, 0x01	; 1
    2d9e:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
				DIO_SetPinValue(PORTBB,pin3,LOW);
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	63 e0       	ldi	r22, 0x03	; 3
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
				DIO_SetPinValue(PORTBB,pin4,LOW);
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	64 e0       	ldi	r22, 0x04	; 4
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
				LCD_displayString_4bit("Left  ");
    2db6:	84 e7       	ldi	r24, 0x74	; 116
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	0e 94 19 15 	call	0x2a32	; 0x2a32 <LCD_displayString_4bit>
				Temp_UDR=0;
    2dbe:	10 92 ba 01 	sts	0x01BA, r1
    2dc2:	3d c0       	rjmp	.+122    	; 0x2e3e <main+0x13a>

				}
			else if(Temp_UDR=='s')
    2dc4:	80 91 ba 01 	lds	r24, 0x01BA
    2dc8:	83 37       	cpi	r24, 0x73	; 115
    2dca:	d9 f4       	brne	.+54     	; 0x2e02 <main+0xfe>
				{

				DIO_SetPinValue(PORTBB,pin3,LOW);
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	63 e0       	ldi	r22, 0x03	; 3
    2dd0:	40 e0       	ldi	r20, 0x00	; 0
    2dd2:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
				DIO_SetPinValue(PORTBB,pin4,LOW);
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	64 e0       	ldi	r22, 0x04	; 4
    2dda:	40 e0       	ldi	r20, 0x00	; 0
    2ddc:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
				DIO_SetPinValue(PORTBB,pin5,LOW);
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	65 e0       	ldi	r22, 0x05	; 5
    2de4:	40 e0       	ldi	r20, 0x00	; 0
    2de6:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
				DIO_SetPinValue(PORTBB,pin6,LOW);
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	66 e0       	ldi	r22, 0x06	; 6
    2dee:	40 e0       	ldi	r20, 0x00	; 0
    2df0:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
				LCD_displayString_4bit("Stop  ");
    2df4:	8b e7       	ldi	r24, 0x7B	; 123
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 19 15 	call	0x2a32	; 0x2a32 <LCD_displayString_4bit>
				Temp_UDR=0;
    2dfc:	10 92 ba 01 	sts	0x01BA, r1
    2e00:	1e c0       	rjmp	.+60     	; 0x2e3e <main+0x13a>
				}
			else if(Temp_UDR=='d')
    2e02:	80 91 ba 01 	lds	r24, 0x01BA
    2e06:	84 36       	cpi	r24, 0x64	; 100
    2e08:	d1 f4       	brne	.+52     	; 0x2e3e <main+0x13a>
				{

				DIO_SetPinValue(PORTBB,pin3,LOW);
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	63 e0       	ldi	r22, 0x03	; 3
    2e0e:	40 e0       	ldi	r20, 0x00	; 0
    2e10:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
				DIO_SetPinValue(PORTBB,pin4,HIGH);
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	64 e0       	ldi	r22, 0x04	; 4
    2e18:	41 e0       	ldi	r20, 0x01	; 1
    2e1a:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
				DIO_SetPinValue(PORTBB,pin5,LOW);
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	65 e0       	ldi	r22, 0x05	; 5
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
				DIO_SetPinValue(PORTBB,pin6,LOW);
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	66 e0       	ldi	r22, 0x06	; 6
    2e2c:	40 e0       	ldi	r20, 0x00	; 0
    2e2e:	0e 94 b5 1c 	call	0x396a	; 0x396a <DIO_SetPinValue>
				LCD_displayString_4bit("Right  ");
    2e32:	82 e8       	ldi	r24, 0x82	; 130
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	0e 94 19 15 	call	0x2a32	; 0x2a32 <LCD_displayString_4bit>
				Temp_UDR=0;
    2e3a:	10 92 ba 01 	sts	0x01BA, r1

				}
LCD_goToRowColumn_4bit(1,0);
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	60 e0       	ldi	r22, 0x00	; 0
    2e42:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_goToRowColumn_4bit>
/* display this string "Temp =" only once at LCD */
LCD_displayString_4bit("Temp=");
    2e46:	8a e8       	ldi	r24, 0x8A	; 138
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	0e 94 19 15 	call	0x2a32	; 0x2a32 <LCD_displayString_4bit>
temp = ADC_readChannel(2); /* read channel two where the temp sensor is connect */
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	0e 94 bc 1a 	call	0x3578	; 0x3578 <ADC_readChannel>
    2e54:	cc 01       	movw	r24, r24
    2e56:	a0 e0       	ldi	r26, 0x00	; 0
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	89 83       	std	Y+1, r24	; 0x01
    2e5c:	9a 83       	std	Y+2, r25	; 0x02
    2e5e:	ab 83       	std	Y+3, r26	; 0x03
    2e60:	bc 83       	std	Y+4, r27	; 0x04
temp = (temp*150*5)/(1023*1.5); /* calculate the temp from the ADC value*/
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	9a 81       	ldd	r25, Y+2	; 0x02
    2e66:	ab 81       	ldd	r26, Y+3	; 0x03
    2e68:	bc 81       	ldd	r27, Y+4	; 0x04
    2e6a:	2e ee       	ldi	r18, 0xEE	; 238
    2e6c:	32 e0       	ldi	r19, 0x02	; 2
    2e6e:	40 e0       	ldi	r20, 0x00	; 0
    2e70:	50 e0       	ldi	r21, 0x00	; 0
    2e72:	bc 01       	movw	r22, r24
    2e74:	cd 01       	movw	r24, r26
    2e76:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__mulsi3>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	bc 01       	movw	r22, r24
    2e80:	cd 01       	movw	r24, r26
    2e82:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	bc 01       	movw	r22, r24
    2e8c:	cd 01       	movw	r24, r26
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 ed       	ldi	r19, 0xD0	; 208
    2e92:	4f eb       	ldi	r20, 0xBF	; 191
    2e94:	54 e4       	ldi	r21, 0x44	; 68
    2e96:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	89 83       	std	Y+1, r24	; 0x01
    2eac:	9a 83       	std	Y+2, r25	; 0x02
    2eae:	ab 83       	std	Y+3, r26	; 0x03
    2eb0:	bc 83       	std	Y+4, r27	; 0x04
LCD_intgerToString_4bit(temp); /* display the temp on LCD screen */
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb6:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <LCD_intgerToString_4bit>
/* display character 'C' on the screen "Temp =   C" */
 LCD_Vid_SendChar4Bit('C');
    2eba:	83 e4       	ldi	r24, 0x43	; 67
    2ebc:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_Vid_SendChar4Bit>
 LCD_goToRowColumn_4bit(1,9);
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	69 e0       	ldi	r22, 0x09	; 9
    2ec4:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_goToRowColumn_4bit>
/* display this string "gas=" only once at LCD */
 LCD_displayString_4bit("Gas=");
    2ec8:	80 e9       	ldi	r24, 0x90	; 144
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	0e 94 19 15 	call	0x2a32	; 0x2a32 <LCD_displayString_4bit>
 LCD_goToRowColumn_4bit(1,13);
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	6d e0       	ldi	r22, 0x0D	; 13
    2ed4:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_goToRowColumn_4bit>
GAS = ADC_readChannel(1);
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	0e 94 bc 1a 	call	0x3578	; 0x3578 <ADC_readChannel>
    2ede:	9e 83       	std	Y+6, r25	; 0x06
    2ee0:	8d 83       	std	Y+5, r24	; 0x05
///*** this condition is for gas read is 2 or 3 digit to ignore the digit  between them we do this ******//
 if(GAS<100){
    2ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee6:	84 36       	cpi	r24, 0x64	; 100
    2ee8:	91 05       	cpc	r25, r1
    2eea:	24 f4       	brge	.+8      	; 0x2ef4 <main+0x1f0>
LCD_intgerToString_4bit(0);}
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <LCD_intgerToString_4bit>
/* read channel one where the temp sensor is connect */
LCD_intgerToString_4bit(GAS); /* display the GAS on LCD screen */
    2ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef8:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <LCD_intgerToString_4bit>

//	USR_u8Recive();


	if(Temp_UDR=='t')
    2efc:	80 91 ba 01 	lds	r24, 0x01BA
    2f00:	84 37       	cpi	r24, 0x74	; 116
    2f02:	09 f0       	breq	.+2      	; 0x2f06 <main+0x202>
    2f04:	98 c0       	rjmp	.+304    	; 0x3036 <main+0x332>
			{	t=temp;
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0a:	90 93 b4 01 	sts	0x01B4, r25
    2f0e:	80 93 b3 01 	sts	0x01B3, r24
				for(x=0;x<=3;x++)
    2f12:	10 92 b6 01 	sts	0x01B6, r1
    2f16:	10 92 b5 01 	sts	0x01B5, r1
    2f1a:	30 c0       	rjmp	.+96     	; 0x2f7c <main+0x278>
				{	r=t%10;
    2f1c:	80 91 b3 01 	lds	r24, 0x01B3
    2f20:	90 91 b4 01 	lds	r25, 0x01B4
    2f24:	2a e0       	ldi	r18, 0x0A	; 10
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	b9 01       	movw	r22, r18
    2f2a:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__divmodhi4>
    2f2e:	90 93 bc 01 	sts	0x01BC, r25
    2f32:	80 93 bb 01 	sts	0x01BB, r24
					arr[x]=r;
    2f36:	20 91 b5 01 	lds	r18, 0x01B5
    2f3a:	30 91 b6 01 	lds	r19, 0x01B6
    2f3e:	80 91 bb 01 	lds	r24, 0x01BB
    2f42:	90 91 bc 01 	lds	r25, 0x01BC
    2f46:	f9 01       	movw	r30, r18
    2f48:	e2 55       	subi	r30, 0x52	; 82
    2f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f4c:	80 83       	st	Z, r24
				t=t/10;}
    2f4e:	80 91 b3 01 	lds	r24, 0x01B3
    2f52:	90 91 b4 01 	lds	r25, 0x01B4
    2f56:	2a e0       	ldi	r18, 0x0A	; 10
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	b9 01       	movw	r22, r18
    2f5c:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__divmodhi4>
    2f60:	cb 01       	movw	r24, r22
    2f62:	90 93 b4 01 	sts	0x01B4, r25
    2f66:	80 93 b3 01 	sts	0x01B3, r24
//	USR_u8Recive();


	if(Temp_UDR=='t')
			{	t=temp;
				for(x=0;x<=3;x++)
    2f6a:	80 91 b5 01 	lds	r24, 0x01B5
    2f6e:	90 91 b6 01 	lds	r25, 0x01B6
    2f72:	01 96       	adiw	r24, 0x01	; 1
    2f74:	90 93 b6 01 	sts	0x01B6, r25
    2f78:	80 93 b5 01 	sts	0x01B5, r24
    2f7c:	80 91 b5 01 	lds	r24, 0x01B5
    2f80:	90 91 b6 01 	lds	r25, 0x01B6
    2f84:	84 30       	cpi	r24, 0x04	; 4
    2f86:	91 05       	cpc	r25, r1
    2f88:	4c f2       	brlt	.-110    	; 0x2f1c <main+0x218>
				{	r=t%10;
					arr[x]=r;
				t=t/10;}
				for(x=3;x>=0;x--)
    2f8a:	83 e0       	ldi	r24, 0x03	; 3
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	90 93 b6 01 	sts	0x01B6, r25
    2f92:	80 93 b5 01 	sts	0x01B5, r24
    2f96:	1c c0       	rjmp	.+56     	; 0x2fd0 <main+0x2cc>
					{
					if(arr[x]!=0){
    2f98:	80 91 b5 01 	lds	r24, 0x01B5
    2f9c:	90 91 b6 01 	lds	r25, 0x01B6
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	e2 55       	subi	r30, 0x52	; 82
    2fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa6:	80 81       	ld	r24, Z
    2fa8:	88 23       	and	r24, r24
    2faa:	49 f0       	breq	.+18     	; 0x2fbe <main+0x2ba>
					y=x;
    2fac:	80 91 b5 01 	lds	r24, 0x01B5
    2fb0:	90 91 b6 01 	lds	r25, 0x01B6
    2fb4:	90 93 be 01 	sts	0x01BE, r25
    2fb8:	80 93 bd 01 	sts	0x01BD, r24
    2fbc:	0f c0       	rjmp	.+30     	; 0x2fdc <main+0x2d8>
			{	t=temp;
				for(x=0;x<=3;x++)
				{	r=t%10;
					arr[x]=r;
				t=t/10;}
				for(x=3;x>=0;x--)
    2fbe:	80 91 b5 01 	lds	r24, 0x01B5
    2fc2:	90 91 b6 01 	lds	r25, 0x01B6
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	90 93 b6 01 	sts	0x01B6, r25
    2fcc:	80 93 b5 01 	sts	0x01B5, r24
    2fd0:	80 91 b5 01 	lds	r24, 0x01B5
    2fd4:	90 91 b6 01 	lds	r25, 0x01B6
    2fd8:	99 23       	and	r25, r25
    2fda:	f4 f6       	brge	.-68     	; 0x2f98 <main+0x294>
					{
					if(arr[x]!=0){
					y=x;
					break;
					}}
				USR_send_string_Uart("temperature=");
    2fdc:	85 e9       	ldi	r24, 0x95	; 149
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	0e 94 85 1a 	call	0x350a	; 0x350a <USR_send_string_Uart>
					for(x=y;x>=0;x--)
    2fe4:	80 91 bd 01 	lds	r24, 0x01BD
    2fe8:	90 91 be 01 	lds	r25, 0x01BE
    2fec:	90 93 b6 01 	sts	0x01B6, r25
    2ff0:	80 93 b5 01 	sts	0x01B5, r24
    2ff4:	13 c0       	rjmp	.+38     	; 0x301c <main+0x318>
				{
										USR_vidSend_Num(arr[x]);
    2ff6:	80 91 b5 01 	lds	r24, 0x01B5
    2ffa:	90 91 b6 01 	lds	r25, 0x01B6
    2ffe:	fc 01       	movw	r30, r24
    3000:	e2 55       	subi	r30, 0x52	; 82
    3002:	fe 4f       	sbci	r31, 0xFE	; 254
    3004:	80 81       	ld	r24, Z
    3006:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <USR_vidSend_Num>
					if(arr[x]!=0){
					y=x;
					break;
					}}
				USR_send_string_Uart("temperature=");
					for(x=y;x>=0;x--)
    300a:	80 91 b5 01 	lds	r24, 0x01B5
    300e:	90 91 b6 01 	lds	r25, 0x01B6
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	90 93 b6 01 	sts	0x01B6, r25
    3018:	80 93 b5 01 	sts	0x01B5, r24
    301c:	80 91 b5 01 	lds	r24, 0x01B5
    3020:	90 91 b6 01 	lds	r25, 0x01B6
    3024:	99 23       	and	r25, r25
    3026:	3c f7       	brge	.-50     	; 0x2ff6 <main+0x2f2>
				{
										USR_vidSend_Num(arr[x]);

							}

					USR_send_string_Uart("\n");
    3028:	82 ea       	ldi	r24, 0xA2	; 162
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	0e 94 85 1a 	call	0x350a	; 0x350a <USR_send_string_Uart>
				Temp_UDR='z';
    3030:	8a e7       	ldi	r24, 0x7A	; 122
    3032:	80 93 ba 01 	sts	0x01BA, r24
			}
			if(Temp_UDR=='T')
    3036:	80 91 ba 01 	lds	r24, 0x01BA
    303a:	84 35       	cpi	r24, 0x54	; 84
    303c:	09 f0       	breq	.+2      	; 0x3040 <main+0x33c>
    303e:	98 c0       	rjmp	.+304    	; 0x3170 <main+0x46c>
			{	t=temp;
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	9a 81       	ldd	r25, Y+2	; 0x02
    3044:	90 93 b4 01 	sts	0x01B4, r25
    3048:	80 93 b3 01 	sts	0x01B3, r24
				for(x=0;x<=3;x++)
    304c:	10 92 b6 01 	sts	0x01B6, r1
    3050:	10 92 b5 01 	sts	0x01B5, r1
    3054:	30 c0       	rjmp	.+96     	; 0x30b6 <main+0x3b2>
				{	r=t%10;
    3056:	80 91 b3 01 	lds	r24, 0x01B3
    305a:	90 91 b4 01 	lds	r25, 0x01B4
    305e:	2a e0       	ldi	r18, 0x0A	; 10
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	b9 01       	movw	r22, r18
    3064:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__divmodhi4>
    3068:	90 93 bc 01 	sts	0x01BC, r25
    306c:	80 93 bb 01 	sts	0x01BB, r24
					arr[x]=r;
    3070:	20 91 b5 01 	lds	r18, 0x01B5
    3074:	30 91 b6 01 	lds	r19, 0x01B6
    3078:	80 91 bb 01 	lds	r24, 0x01BB
    307c:	90 91 bc 01 	lds	r25, 0x01BC
    3080:	f9 01       	movw	r30, r18
    3082:	e2 55       	subi	r30, 0x52	; 82
    3084:	fe 4f       	sbci	r31, 0xFE	; 254
    3086:	80 83       	st	Z, r24
				t=t/10;}
    3088:	80 91 b3 01 	lds	r24, 0x01B3
    308c:	90 91 b4 01 	lds	r25, 0x01B4
    3090:	2a e0       	ldi	r18, 0x0A	; 10
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	b9 01       	movw	r22, r18
    3096:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__divmodhi4>
    309a:	cb 01       	movw	r24, r22
    309c:	90 93 b4 01 	sts	0x01B4, r25
    30a0:	80 93 b3 01 	sts	0x01B3, r24
					USR_send_string_Uart("\n");
				Temp_UDR='z';
			}
			if(Temp_UDR=='T')
			{	t=temp;
				for(x=0;x<=3;x++)
    30a4:	80 91 b5 01 	lds	r24, 0x01B5
    30a8:	90 91 b6 01 	lds	r25, 0x01B6
    30ac:	01 96       	adiw	r24, 0x01	; 1
    30ae:	90 93 b6 01 	sts	0x01B6, r25
    30b2:	80 93 b5 01 	sts	0x01B5, r24
    30b6:	80 91 b5 01 	lds	r24, 0x01B5
    30ba:	90 91 b6 01 	lds	r25, 0x01B6
    30be:	84 30       	cpi	r24, 0x04	; 4
    30c0:	91 05       	cpc	r25, r1
    30c2:	4c f2       	brlt	.-110    	; 0x3056 <main+0x352>
				{	r=t%10;
					arr[x]=r;
				t=t/10;}
				for(x=3;x>=0;x--)
    30c4:	83 e0       	ldi	r24, 0x03	; 3
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	90 93 b6 01 	sts	0x01B6, r25
    30cc:	80 93 b5 01 	sts	0x01B5, r24
    30d0:	1c c0       	rjmp	.+56     	; 0x310a <main+0x406>
					{
					if(arr[x]!=0){
    30d2:	80 91 b5 01 	lds	r24, 0x01B5
    30d6:	90 91 b6 01 	lds	r25, 0x01B6
    30da:	fc 01       	movw	r30, r24
    30dc:	e2 55       	subi	r30, 0x52	; 82
    30de:	fe 4f       	sbci	r31, 0xFE	; 254
    30e0:	80 81       	ld	r24, Z
    30e2:	88 23       	and	r24, r24
    30e4:	49 f0       	breq	.+18     	; 0x30f8 <main+0x3f4>
					y=x;
    30e6:	80 91 b5 01 	lds	r24, 0x01B5
    30ea:	90 91 b6 01 	lds	r25, 0x01B6
    30ee:	90 93 be 01 	sts	0x01BE, r25
    30f2:	80 93 bd 01 	sts	0x01BD, r24
    30f6:	0f c0       	rjmp	.+30     	; 0x3116 <main+0x412>
			{	t=temp;
				for(x=0;x<=3;x++)
				{	r=t%10;
					arr[x]=r;
				t=t/10;}
				for(x=3;x>=0;x--)
    30f8:	80 91 b5 01 	lds	r24, 0x01B5
    30fc:	90 91 b6 01 	lds	r25, 0x01B6
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	90 93 b6 01 	sts	0x01B6, r25
    3106:	80 93 b5 01 	sts	0x01B5, r24
    310a:	80 91 b5 01 	lds	r24, 0x01B5
    310e:	90 91 b6 01 	lds	r25, 0x01B6
    3112:	99 23       	and	r25, r25
    3114:	f4 f6       	brge	.-68     	; 0x30d2 <main+0x3ce>
					{
					if(arr[x]!=0){
					y=x;
					break;
					}}
				USR_send_string_Uart("temperature=");
    3116:	85 e9       	ldi	r24, 0x95	; 149
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	0e 94 85 1a 	call	0x350a	; 0x350a <USR_send_string_Uart>
					for(x=y;x>=0;x--)
    311e:	80 91 bd 01 	lds	r24, 0x01BD
    3122:	90 91 be 01 	lds	r25, 0x01BE
    3126:	90 93 b6 01 	sts	0x01B6, r25
    312a:	80 93 b5 01 	sts	0x01B5, r24
    312e:	13 c0       	rjmp	.+38     	; 0x3156 <main+0x452>
				{
										USR_vidSend_Num(arr[x]);
    3130:	80 91 b5 01 	lds	r24, 0x01B5
    3134:	90 91 b6 01 	lds	r25, 0x01B6
    3138:	fc 01       	movw	r30, r24
    313a:	e2 55       	subi	r30, 0x52	; 82
    313c:	fe 4f       	sbci	r31, 0xFE	; 254
    313e:	80 81       	ld	r24, Z
    3140:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <USR_vidSend_Num>
					if(arr[x]!=0){
					y=x;
					break;
					}}
				USR_send_string_Uart("temperature=");
					for(x=y;x>=0;x--)
    3144:	80 91 b5 01 	lds	r24, 0x01B5
    3148:	90 91 b6 01 	lds	r25, 0x01B6
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	90 93 b6 01 	sts	0x01B6, r25
    3152:	80 93 b5 01 	sts	0x01B5, r24
    3156:	80 91 b5 01 	lds	r24, 0x01B5
    315a:	90 91 b6 01 	lds	r25, 0x01B6
    315e:	99 23       	and	r25, r25
    3160:	3c f7       	brge	.-50     	; 0x3130 <main+0x42c>
				{
										USR_vidSend_Num(arr[x]);

							}
//
					USR_send_string_Uart("\r");
    3162:	84 ea       	ldi	r24, 0xA4	; 164
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	0e 94 85 1a 	call	0x350a	; 0x350a <USR_send_string_Uart>

				Temp_UDR='z';
    316a:	8a e7       	ldi	r24, 0x7A	; 122
    316c:	80 93 ba 01 	sts	0x01BA, r24
			}



	if(Temp_UDR=='g')
    3170:	80 91 ba 01 	lds	r24, 0x01BA
    3174:	87 36       	cpi	r24, 0x67	; 103
    3176:	09 f0       	breq	.+2      	; 0x317a <main+0x476>
    3178:	98 c0       	rjmp	.+304    	; 0x32aa <main+0x5a6>
			{
		 g=GAS;
    317a:	8d 81       	ldd	r24, Y+5	; 0x05
    317c:	9e 81       	ldd	r25, Y+6	; 0x06
    317e:	90 93 b9 01 	sts	0x01B9, r25
    3182:	80 93 b8 01 	sts	0x01B8, r24
						for(x=0;x<=3;x++)
    3186:	10 92 b6 01 	sts	0x01B6, r1
    318a:	10 92 b5 01 	sts	0x01B5, r1
    318e:	30 c0       	rjmp	.+96     	; 0x31f0 <main+0x4ec>
						{	r=g%10;
    3190:	80 91 b8 01 	lds	r24, 0x01B8
    3194:	90 91 b9 01 	lds	r25, 0x01B9
    3198:	2a e0       	ldi	r18, 0x0A	; 10
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	b9 01       	movw	r22, r18
    319e:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__divmodhi4>
    31a2:	90 93 bc 01 	sts	0x01BC, r25
    31a6:	80 93 bb 01 	sts	0x01BB, r24
							arr[x]=r;
    31aa:	20 91 b5 01 	lds	r18, 0x01B5
    31ae:	30 91 b6 01 	lds	r19, 0x01B6
    31b2:	80 91 bb 01 	lds	r24, 0x01BB
    31b6:	90 91 bc 01 	lds	r25, 0x01BC
    31ba:	f9 01       	movw	r30, r18
    31bc:	e2 55       	subi	r30, 0x52	; 82
    31be:	fe 4f       	sbci	r31, 0xFE	; 254
    31c0:	80 83       	st	Z, r24
						g=g/10;}
    31c2:	80 91 b8 01 	lds	r24, 0x01B8
    31c6:	90 91 b9 01 	lds	r25, 0x01B9
    31ca:	2a e0       	ldi	r18, 0x0A	; 10
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	b9 01       	movw	r22, r18
    31d0:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__divmodhi4>
    31d4:	cb 01       	movw	r24, r22
    31d6:	90 93 b9 01 	sts	0x01B9, r25
    31da:	80 93 b8 01 	sts	0x01B8, r24


	if(Temp_UDR=='g')
			{
		 g=GAS;
						for(x=0;x<=3;x++)
    31de:	80 91 b5 01 	lds	r24, 0x01B5
    31e2:	90 91 b6 01 	lds	r25, 0x01B6
    31e6:	01 96       	adiw	r24, 0x01	; 1
    31e8:	90 93 b6 01 	sts	0x01B6, r25
    31ec:	80 93 b5 01 	sts	0x01B5, r24
    31f0:	80 91 b5 01 	lds	r24, 0x01B5
    31f4:	90 91 b6 01 	lds	r25, 0x01B6
    31f8:	84 30       	cpi	r24, 0x04	; 4
    31fa:	91 05       	cpc	r25, r1
    31fc:	4c f2       	brlt	.-110    	; 0x3190 <main+0x48c>
						{	r=g%10;
							arr[x]=r;
						g=g/10;}
						for(x=3;x>=0;x--)
    31fe:	83 e0       	ldi	r24, 0x03	; 3
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	90 93 b6 01 	sts	0x01B6, r25
    3206:	80 93 b5 01 	sts	0x01B5, r24
    320a:	1c c0       	rjmp	.+56     	; 0x3244 <main+0x540>
										{
										if(arr[x]!=0){
    320c:	80 91 b5 01 	lds	r24, 0x01B5
    3210:	90 91 b6 01 	lds	r25, 0x01B6
    3214:	fc 01       	movw	r30, r24
    3216:	e2 55       	subi	r30, 0x52	; 82
    3218:	fe 4f       	sbci	r31, 0xFE	; 254
    321a:	80 81       	ld	r24, Z
    321c:	88 23       	and	r24, r24
    321e:	49 f0       	breq	.+18     	; 0x3232 <main+0x52e>
										y=x;
    3220:	80 91 b5 01 	lds	r24, 0x01B5
    3224:	90 91 b6 01 	lds	r25, 0x01B6
    3228:	90 93 be 01 	sts	0x01BE, r25
    322c:	80 93 bd 01 	sts	0x01BD, r24
    3230:	0f c0       	rjmp	.+30     	; 0x3250 <main+0x54c>
		 g=GAS;
						for(x=0;x<=3;x++)
						{	r=g%10;
							arr[x]=r;
						g=g/10;}
						for(x=3;x>=0;x--)
    3232:	80 91 b5 01 	lds	r24, 0x01B5
    3236:	90 91 b6 01 	lds	r25, 0x01B6
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	90 93 b6 01 	sts	0x01B6, r25
    3240:	80 93 b5 01 	sts	0x01B5, r24
    3244:	80 91 b5 01 	lds	r24, 0x01B5
    3248:	90 91 b6 01 	lds	r25, 0x01B6
    324c:	99 23       	and	r25, r25
    324e:	f4 f6       	brge	.-68     	; 0x320c <main+0x508>
										{
										if(arr[x]!=0){
										y=x;
										break;
										}}
						USR_send_string_Uart("Gas=");
    3250:	80 e9       	ldi	r24, 0x90	; 144
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	0e 94 85 1a 	call	0x350a	; 0x350a <USR_send_string_Uart>

						for(x=y;x>=0;x--)
    3258:	80 91 bd 01 	lds	r24, 0x01BD
    325c:	90 91 be 01 	lds	r25, 0x01BE
    3260:	90 93 b6 01 	sts	0x01B6, r25
    3264:	80 93 b5 01 	sts	0x01B5, r24
    3268:	13 c0       	rjmp	.+38     	; 0x3290 <main+0x58c>
							{
							USR_vidSend_Num(arr[x]);
    326a:	80 91 b5 01 	lds	r24, 0x01B5
    326e:	90 91 b6 01 	lds	r25, 0x01B6
    3272:	fc 01       	movw	r30, r24
    3274:	e2 55       	subi	r30, 0x52	; 82
    3276:	fe 4f       	sbci	r31, 0xFE	; 254
    3278:	80 81       	ld	r24, Z
    327a:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <USR_vidSend_Num>
										y=x;
										break;
										}}
						USR_send_string_Uart("Gas=");

						for(x=y;x>=0;x--)
    327e:	80 91 b5 01 	lds	r24, 0x01B5
    3282:	90 91 b6 01 	lds	r25, 0x01B6
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	90 93 b6 01 	sts	0x01B6, r25
    328c:	80 93 b5 01 	sts	0x01B5, r24
    3290:	80 91 b5 01 	lds	r24, 0x01B5
    3294:	90 91 b6 01 	lds	r25, 0x01B6
    3298:	99 23       	and	r25, r25
    329a:	3c f7       	brge	.-50     	; 0x326a <main+0x566>
							{
							USR_vidSend_Num(arr[x]);

							}
						USR_send_string_Uart("\n");
    329c:	82 ea       	ldi	r24, 0xA2	; 162
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	0e 94 85 1a 	call	0x350a	; 0x350a <USR_send_string_Uart>
						Temp_UDR='z';
    32a4:	8a e7       	ldi	r24, 0x7A	; 122
    32a6:	80 93 ba 01 	sts	0x01BA, r24

			}



	if(Temp_UDR=='G')
    32aa:	80 91 ba 01 	lds	r24, 0x01BA
    32ae:	87 34       	cpi	r24, 0x47	; 71
    32b0:	09 f0       	breq	.+2      	; 0x32b4 <main+0x5b0>
    32b2:	43 cd       	rjmp	.-1402   	; 0x2d3a <main+0x36>
				{
			 g=GAS;
    32b4:	8d 81       	ldd	r24, Y+5	; 0x05
    32b6:	9e 81       	ldd	r25, Y+6	; 0x06
    32b8:	90 93 b9 01 	sts	0x01B9, r25
    32bc:	80 93 b8 01 	sts	0x01B8, r24
							for(x=0;x<=3;x++)
    32c0:	10 92 b6 01 	sts	0x01B6, r1
    32c4:	10 92 b5 01 	sts	0x01B5, r1
    32c8:	30 c0       	rjmp	.+96     	; 0x332a <main+0x626>
							{	r=g%10;
    32ca:	80 91 b8 01 	lds	r24, 0x01B8
    32ce:	90 91 b9 01 	lds	r25, 0x01B9
    32d2:	2a e0       	ldi	r18, 0x0A	; 10
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	b9 01       	movw	r22, r18
    32d8:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__divmodhi4>
    32dc:	90 93 bc 01 	sts	0x01BC, r25
    32e0:	80 93 bb 01 	sts	0x01BB, r24
								arr[x]=r;
    32e4:	20 91 b5 01 	lds	r18, 0x01B5
    32e8:	30 91 b6 01 	lds	r19, 0x01B6
    32ec:	80 91 bb 01 	lds	r24, 0x01BB
    32f0:	90 91 bc 01 	lds	r25, 0x01BC
    32f4:	f9 01       	movw	r30, r18
    32f6:	e2 55       	subi	r30, 0x52	; 82
    32f8:	fe 4f       	sbci	r31, 0xFE	; 254
    32fa:	80 83       	st	Z, r24
							g=g/10;}
    32fc:	80 91 b8 01 	lds	r24, 0x01B8
    3300:	90 91 b9 01 	lds	r25, 0x01B9
    3304:	2a e0       	ldi	r18, 0x0A	; 10
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	b9 01       	movw	r22, r18
    330a:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__divmodhi4>
    330e:	cb 01       	movw	r24, r22
    3310:	90 93 b9 01 	sts	0x01B9, r25
    3314:	80 93 b8 01 	sts	0x01B8, r24


	if(Temp_UDR=='G')
				{
			 g=GAS;
							for(x=0;x<=3;x++)
    3318:	80 91 b5 01 	lds	r24, 0x01B5
    331c:	90 91 b6 01 	lds	r25, 0x01B6
    3320:	01 96       	adiw	r24, 0x01	; 1
    3322:	90 93 b6 01 	sts	0x01B6, r25
    3326:	80 93 b5 01 	sts	0x01B5, r24
    332a:	80 91 b5 01 	lds	r24, 0x01B5
    332e:	90 91 b6 01 	lds	r25, 0x01B6
    3332:	84 30       	cpi	r24, 0x04	; 4
    3334:	91 05       	cpc	r25, r1
    3336:	4c f2       	brlt	.-110    	; 0x32ca <main+0x5c6>
							{	r=g%10;
								arr[x]=r;
							g=g/10;}
							for(x=3;x>=0;x--)
    3338:	83 e0       	ldi	r24, 0x03	; 3
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	90 93 b6 01 	sts	0x01B6, r25
    3340:	80 93 b5 01 	sts	0x01B5, r24
    3344:	1c c0       	rjmp	.+56     	; 0x337e <main+0x67a>
											{
											if(arr[x]!=0){
    3346:	80 91 b5 01 	lds	r24, 0x01B5
    334a:	90 91 b6 01 	lds	r25, 0x01B6
    334e:	fc 01       	movw	r30, r24
    3350:	e2 55       	subi	r30, 0x52	; 82
    3352:	fe 4f       	sbci	r31, 0xFE	; 254
    3354:	80 81       	ld	r24, Z
    3356:	88 23       	and	r24, r24
    3358:	49 f0       	breq	.+18     	; 0x336c <main+0x668>
											y=x;
    335a:	80 91 b5 01 	lds	r24, 0x01B5
    335e:	90 91 b6 01 	lds	r25, 0x01B6
    3362:	90 93 be 01 	sts	0x01BE, r25
    3366:	80 93 bd 01 	sts	0x01BD, r24
    336a:	0f c0       	rjmp	.+30     	; 0x338a <main+0x686>
			 g=GAS;
							for(x=0;x<=3;x++)
							{	r=g%10;
								arr[x]=r;
							g=g/10;}
							for(x=3;x>=0;x--)
    336c:	80 91 b5 01 	lds	r24, 0x01B5
    3370:	90 91 b6 01 	lds	r25, 0x01B6
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	90 93 b6 01 	sts	0x01B6, r25
    337a:	80 93 b5 01 	sts	0x01B5, r24
    337e:	80 91 b5 01 	lds	r24, 0x01B5
    3382:	90 91 b6 01 	lds	r25, 0x01B6
    3386:	99 23       	and	r25, r25
    3388:	f4 f6       	brge	.-68     	; 0x3346 <main+0x642>
											{
											if(arr[x]!=0){
											y=x;
											break;
											}}
							USR_send_string_Uart("Gas=");
    338a:	80 e9       	ldi	r24, 0x90	; 144
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	0e 94 85 1a 	call	0x350a	; 0x350a <USR_send_string_Uart>

							for(x=y;x>=0;x--)
    3392:	80 91 bd 01 	lds	r24, 0x01BD
    3396:	90 91 be 01 	lds	r25, 0x01BE
    339a:	90 93 b6 01 	sts	0x01B6, r25
    339e:	80 93 b5 01 	sts	0x01B5, r24
    33a2:	13 c0       	rjmp	.+38     	; 0x33ca <main+0x6c6>
								{
								USR_vidSend_Num(arr[x]);
    33a4:	80 91 b5 01 	lds	r24, 0x01B5
    33a8:	90 91 b6 01 	lds	r25, 0x01B6
    33ac:	fc 01       	movw	r30, r24
    33ae:	e2 55       	subi	r30, 0x52	; 82
    33b0:	fe 4f       	sbci	r31, 0xFE	; 254
    33b2:	80 81       	ld	r24, Z
    33b4:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <USR_vidSend_Num>
											y=x;
											break;
											}}
							USR_send_string_Uart("Gas=");

							for(x=y;x>=0;x--)
    33b8:	80 91 b5 01 	lds	r24, 0x01B5
    33bc:	90 91 b6 01 	lds	r25, 0x01B6
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	90 93 b6 01 	sts	0x01B6, r25
    33c6:	80 93 b5 01 	sts	0x01B5, r24
    33ca:	80 91 b5 01 	lds	r24, 0x01B5
    33ce:	90 91 b6 01 	lds	r25, 0x01B6
    33d2:	99 23       	and	r25, r25
    33d4:	3c f7       	brge	.-50     	; 0x33a4 <main+0x6a0>
								{
								USR_vidSend_Num(arr[x]);

								}
							USR_send_string_Uart("\r");
    33d6:	84 ea       	ldi	r24, 0xA4	; 164
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	0e 94 85 1a 	call	0x350a	; 0x350a <USR_send_string_Uart>

							Temp_UDR='z';
    33de:	8a e7       	ldi	r24, 0x7A	; 122
    33e0:	80 93 ba 01 	sts	0x01BA, r24
    33e4:	aa cc       	rjmp	.-1708   	; 0x2d3a <main+0x36>

000033e6 <__vector_13>:

}
	return 0;
}

ISR( USART_RXC_vect){
    33e6:	1f 92       	push	r1
    33e8:	0f 92       	push	r0
    33ea:	0f b6       	in	r0, 0x3f	; 63
    33ec:	0f 92       	push	r0
    33ee:	11 24       	eor	r1, r1
    33f0:	8f 93       	push	r24
    33f2:	ef 93       	push	r30
    33f4:	ff 93       	push	r31
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
	Rec_UDR=UDR;
    33fe:	ec e2       	ldi	r30, 0x2C	; 44
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	80 81       	ld	r24, Z
    3404:	80 93 b7 01 	sts	0x01B7, r24
	if((Rec_UDR!='\r\n')&&(Rec_UDR!='\n')&&(Rec_UDR!='\r')){
    3408:	80 91 b7 01 	lds	r24, 0x01B7
    340c:	8a 30       	cpi	r24, 0x0A	; 10
    340e:	41 f0       	breq	.+16     	; 0x3420 <__vector_13+0x3a>
    3410:	80 91 b7 01 	lds	r24, 0x01B7
    3414:	8d 30       	cpi	r24, 0x0D	; 13
    3416:	21 f0       	breq	.+8      	; 0x3420 <__vector_13+0x3a>
		Temp_UDR=Rec_UDR;
    3418:	80 91 b7 01 	lds	r24, 0x01B7
    341c:	80 93 ba 01 	sts	0x01BA, r24


}

}
    3420:	cf 91       	pop	r28
    3422:	df 91       	pop	r29
    3424:	ff 91       	pop	r31
    3426:	ef 91       	pop	r30
    3428:	8f 91       	pop	r24
    342a:	0f 90       	pop	r0
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	0f 90       	pop	r0
    3430:	1f 90       	pop	r1
    3432:	18 95       	reti

00003434 <USART_vidinit>:
 *      Author: Helmy
 */
#include "bit_math.h"
#include <avr/io.h>
void USART_vidinit(void)
{	SET_BIT(UCSRB,TXEN);
    3434:	df 93       	push	r29
    3436:	cf 93       	push	r28
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
    343c:	aa e2       	ldi	r26, 0x2A	; 42
    343e:	b0 e0       	ldi	r27, 0x00	; 0
    3440:	ea e2       	ldi	r30, 0x2A	; 42
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	80 81       	ld	r24, Z
    3446:	88 60       	ori	r24, 0x08	; 8
    3448:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
    344a:	aa e2       	ldi	r26, 0x2A	; 42
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	ea e2       	ldi	r30, 0x2A	; 42
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	80 81       	ld	r24, Z
    3454:	80 61       	ori	r24, 0x10	; 16
    3456:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXCIE);
    3458:	aa e2       	ldi	r26, 0x2A	; 42
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	ea e2       	ldi	r30, 0x2A	; 42
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	80 68       	ori	r24, 0x80	; 128
    3464:	8c 93       	st	X, r24

	UCSRC=0b10000110;
    3466:	e0 e4       	ldi	r30, 0x40	; 64
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	86 e8       	ldi	r24, 0x86	; 134
    346c:	80 83       	st	Z, r24
	UBRRH=0;
    346e:	e0 e4       	ldi	r30, 0x40	; 64
    3470:	f0 e0       	ldi	r31, 0x00	; 0
    3472:	10 82       	st	Z, r1
	UBRRL=51;//Baud rate 9600 at 8MHZ
    3474:	e9 e2       	ldi	r30, 0x29	; 41
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	83 e3       	ldi	r24, 0x33	; 51
    347a:	80 83       	st	Z, r24

}
    347c:	cf 91       	pop	r28
    347e:	df 91       	pop	r29
    3480:	08 95       	ret

00003482 <USR_vidSend>:
void USR_vidSend(unsigned char Data){
    3482:	df 93       	push	r29
    3484:	cf 93       	push	r28
    3486:	0f 92       	push	r0
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	89 83       	std	Y+1, r24	; 0x01
	UDR=Data;
    348e:	ec e2       	ldi	r30, 0x2C	; 44
    3490:	f0 e0       	ldi	r31, 0x00	; 0
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	80 83       	st	Z, r24
	while(GET_BIT(UCSRA,5)==0);
    3496:	eb e2       	ldi	r30, 0x2B	; 43
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	80 81       	ld	r24, Z
    349c:	82 95       	swap	r24
    349e:	86 95       	lsr	r24
    34a0:	87 70       	andi	r24, 0x07	; 7
    34a2:	88 2f       	mov	r24, r24
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	81 70       	andi	r24, 0x01	; 1
    34a8:	90 70       	andi	r25, 0x00	; 0
    34aa:	00 97       	sbiw	r24, 0x00	; 0
    34ac:	a1 f3       	breq	.-24     	; 0x3496 <USR_vidSend+0x14>
}
    34ae:	0f 90       	pop	r0
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	08 95       	ret

000034b6 <USR_vidSend_Num>:
void USR_vidSend_Num(unsigned char Data){
    34b6:	df 93       	push	r29
    34b8:	cf 93       	push	r28
    34ba:	0f 92       	push	r0
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
    34c0:	89 83       	std	Y+1, r24	; 0x01
	UDR=Data+48;
    34c2:	ec e2       	ldi	r30, 0x2C	; 44
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	80 5d       	subi	r24, 0xD0	; 208
    34ca:	80 83       	st	Z, r24
	while(GET_BIT(UCSRA,5)==0);
    34cc:	eb e2       	ldi	r30, 0x2B	; 43
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	80 81       	ld	r24, Z
    34d2:	82 95       	swap	r24
    34d4:	86 95       	lsr	r24
    34d6:	87 70       	andi	r24, 0x07	; 7
    34d8:	88 2f       	mov	r24, r24
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	81 70       	andi	r24, 0x01	; 1
    34de:	90 70       	andi	r25, 0x00	; 0
    34e0:	00 97       	sbiw	r24, 0x00	; 0
    34e2:	a1 f3       	breq	.-24     	; 0x34cc <USR_vidSend_Num+0x16>
}
    34e4:	0f 90       	pop	r0
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	08 95       	ret

000034ec <USR_u8Recive>:
unsigned char USR_u8Recive(void){
    34ec:	df 93       	push	r29
    34ee:	cf 93       	push	r28
    34f0:	cd b7       	in	r28, 0x3d	; 61
    34f2:	de b7       	in	r29, 0x3e	; 62
		while(GET_BIT(UCSRA,7)==0);
    34f4:	eb e2       	ldi	r30, 0x2B	; 43
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	88 23       	and	r24, r24
    34fc:	dc f7       	brge	.-10     	; 0x34f4 <USR_u8Recive+0x8>
		return UDR;
    34fe:	ec e2       	ldi	r30, 0x2C	; 44
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
}
    3504:	cf 91       	pop	r28
    3506:	df 91       	pop	r29
    3508:	08 95       	ret

0000350a <USR_send_string_Uart>:

void USR_send_string_Uart(const char *Str)
{
    350a:	df 93       	push	r29
    350c:	cf 93       	push	r28
    350e:	00 d0       	rcall	.+0      	; 0x3510 <USR_send_string_Uart+0x6>
    3510:	0f 92       	push	r0
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
    3516:	9b 83       	std	Y+3, r25	; 0x03
    3518:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i = 0;
    351a:	19 82       	std	Y+1, r1	; 0x01
    351c:	0e c0       	rjmp	.+28     	; 0x353a <USR_send_string_Uart+0x30>
	while(Str[i] != '\0')
	{
		USR_vidSend(Str[i]);
    351e:	89 81       	ldd	r24, Y+1	; 0x01
    3520:	28 2f       	mov	r18, r24
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	8a 81       	ldd	r24, Y+2	; 0x02
    3526:	9b 81       	ldd	r25, Y+3	; 0x03
    3528:	fc 01       	movw	r30, r24
    352a:	e2 0f       	add	r30, r18
    352c:	f3 1f       	adc	r31, r19
    352e:	80 81       	ld	r24, Z
    3530:	0e 94 41 1a 	call	0x3482	; 0x3482 <USR_vidSend>
		i++;
    3534:	89 81       	ldd	r24, Y+1	; 0x01
    3536:	8f 5f       	subi	r24, 0xFF	; 255
    3538:	89 83       	std	Y+1, r24	; 0x01
}

void USR_send_string_Uart(const char *Str)
{
	unsigned char i = 0;
	while(Str[i] != '\0')
    353a:	89 81       	ldd	r24, Y+1	; 0x01
    353c:	28 2f       	mov	r18, r24
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	8a 81       	ldd	r24, Y+2	; 0x02
    3542:	9b 81       	ldd	r25, Y+3	; 0x03
    3544:	fc 01       	movw	r30, r24
    3546:	e2 0f       	add	r30, r18
    3548:	f3 1f       	adc	r31, r19
    354a:	80 81       	ld	r24, Z
    354c:	88 23       	and	r24, r24
    354e:	39 f7       	brne	.-50     	; 0x351e <USR_send_string_Uart+0x14>
	{
		USR_vidSend(Str[i]);
		i++;
	}

}
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
    3556:	cf 91       	pop	r28
    3558:	df 91       	pop	r29
    355a:	08 95       	ret

0000355c <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
    355c:	df 93       	push	r29
    355e:	cf 93       	push	r28
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
    3564:	e7 e2       	ldi	r30, 0x27	; 39
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	10 82       	st	Z, r1
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
    356a:	e6 e2       	ldi	r30, 0x26	; 38
    356c:	f0 e0       	ldi	r31, 0x00	; 0
    356e:	83 e8       	ldi	r24, 0x83	; 131
    3570:	80 83       	st	Z, r24
}
    3572:	cf 91       	pop	r28
    3574:	df 91       	pop	r29
    3576:	08 95       	ret

00003578 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    3578:	df 93       	push	r29
    357a:	cf 93       	push	r28
    357c:	0f 92       	push	r0
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62
    3582:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
    3584:	89 81       	ldd	r24, Y+1	; 0x01
    3586:	87 70       	andi	r24, 0x07	; 7
    3588:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    358a:	a7 e2       	ldi	r26, 0x27	; 39
    358c:	b0 e0       	ldi	r27, 0x00	; 0
    358e:	e7 e2       	ldi	r30, 0x27	; 39
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	80 81       	ld	r24, Z
    3594:	80 7e       	andi	r24, 0xE0	; 224
    3596:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
    3598:	a7 e2       	ldi	r26, 0x27	; 39
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	e7 e2       	ldi	r30, 0x27	; 39
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	90 81       	ld	r25, Z
    35a2:	89 81       	ldd	r24, Y+1	; 0x01
    35a4:	89 2b       	or	r24, r25
    35a6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
    35a8:	a6 e2       	ldi	r26, 0x26	; 38
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	e6 e2       	ldi	r30, 0x26	; 38
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	80 64       	ori	r24, 0x40	; 64
    35b4:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
    35b6:	e6 e2       	ldi	r30, 0x26	; 38
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	80 81       	ld	r24, Z
    35bc:	88 2f       	mov	r24, r24
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	80 71       	andi	r24, 0x10	; 16
    35c2:	90 70       	andi	r25, 0x00	; 0
    35c4:	00 97       	sbiw	r24, 0x00	; 0
    35c6:	b9 f3       	breq	.-18     	; 0x35b6 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
    35c8:	a6 e2       	ldi	r26, 0x26	; 38
    35ca:	b0 e0       	ldi	r27, 0x00	; 0
    35cc:	e6 e2       	ldi	r30, 0x26	; 38
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	80 81       	ld	r24, Z
    35d2:	80 61       	ori	r24, 0x10	; 16
    35d4:	8c 93       	st	X, r24
	return ADC; /* return the data register */
    35d6:	e4 e2       	ldi	r30, 0x24	; 36
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	91 81       	ldd	r25, Z+1	; 0x01
}
    35de:	0f 90       	pop	r0
    35e0:	cf 91       	pop	r28
    35e2:	df 91       	pop	r29
    35e4:	08 95       	ret

000035e6 <DIO_SetPortdirection>:
#include "DIO_Types.h"
#include "bit_math.h"
#include "dio.h"

void DIO_SetPortdirection(DIO_PORT_ID Port_Id ,DIO_Direction Direction)
{
    35e6:	df 93       	push	r29
    35e8:	cf 93       	push	r28
    35ea:	00 d0       	rcall	.+0      	; 0x35ec <DIO_SetPortdirection+0x6>
    35ec:	00 d0       	rcall	.+0      	; 0x35ee <DIO_SetPortdirection+0x8>
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <DIO_SetPortdirection+0xa>
    35f0:	cd b7       	in	r28, 0x3d	; 61
    35f2:	de b7       	in	r29, 0x3e	; 62
    35f4:	89 83       	std	Y+1, r24	; 0x01
    35f6:	6a 83       	std	Y+2, r22	; 0x02
	if (output == Direction)
    35f8:	8a 81       	ldd	r24, Y+2	; 0x02
    35fa:	81 30       	cpi	r24, 0x01	; 1
    35fc:	99 f5       	brne	.+102    	; 0x3664 <DIO_SetPortdirection+0x7e>
	{
		switch(Port_Id)
    35fe:	89 81       	ldd	r24, Y+1	; 0x01
    3600:	28 2f       	mov	r18, r24
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	3e 83       	std	Y+6, r19	; 0x06
    3606:	2d 83       	std	Y+5, r18	; 0x05
    3608:	8d 81       	ldd	r24, Y+5	; 0x05
    360a:	9e 81       	ldd	r25, Y+6	; 0x06
    360c:	81 30       	cpi	r24, 0x01	; 1
    360e:	91 05       	cpc	r25, r1
    3610:	d1 f0       	breq	.+52     	; 0x3646 <DIO_SetPortdirection+0x60>
    3612:	2d 81       	ldd	r18, Y+5	; 0x05
    3614:	3e 81       	ldd	r19, Y+6	; 0x06
    3616:	22 30       	cpi	r18, 0x02	; 2
    3618:	31 05       	cpc	r19, r1
    361a:	2c f4       	brge	.+10     	; 0x3626 <DIO_SetPortdirection+0x40>
    361c:	8d 81       	ldd	r24, Y+5	; 0x05
    361e:	9e 81       	ldd	r25, Y+6	; 0x06
    3620:	00 97       	sbiw	r24, 0x00	; 0
    3622:	61 f0       	breq	.+24     	; 0x363c <DIO_SetPortdirection+0x56>
    3624:	50 c0       	rjmp	.+160    	; 0x36c6 <DIO_SetPortdirection+0xe0>
    3626:	2d 81       	ldd	r18, Y+5	; 0x05
    3628:	3e 81       	ldd	r19, Y+6	; 0x06
    362a:	22 30       	cpi	r18, 0x02	; 2
    362c:	31 05       	cpc	r19, r1
    362e:	81 f0       	breq	.+32     	; 0x3650 <DIO_SetPortdirection+0x6a>
    3630:	8d 81       	ldd	r24, Y+5	; 0x05
    3632:	9e 81       	ldd	r25, Y+6	; 0x06
    3634:	83 30       	cpi	r24, 0x03	; 3
    3636:	91 05       	cpc	r25, r1
    3638:	81 f0       	breq	.+32     	; 0x365a <DIO_SetPortdirection+0x74>
    363a:	45 c0       	rjmp	.+138    	; 0x36c6 <DIO_SetPortdirection+0xe0>
		{
		case PORTAA: DDRA_Reg= 0xff;break;
    363c:	ea e3       	ldi	r30, 0x3A	; 58
    363e:	f0 e0       	ldi	r31, 0x00	; 0
    3640:	8f ef       	ldi	r24, 0xFF	; 255
    3642:	80 83       	st	Z, r24
    3644:	40 c0       	rjmp	.+128    	; 0x36c6 <DIO_SetPortdirection+0xe0>
		case PORTBB: DDRB_Reg= 0xff;break;
    3646:	e7 e3       	ldi	r30, 0x37	; 55
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	8f ef       	ldi	r24, 0xFF	; 255
    364c:	80 83       	st	Z, r24
    364e:	3b c0       	rjmp	.+118    	; 0x36c6 <DIO_SetPortdirection+0xe0>
		case PORTCC: DDRC_Reg= 0xff;break;
    3650:	e4 e3       	ldi	r30, 0x34	; 52
    3652:	f0 e0       	ldi	r31, 0x00	; 0
    3654:	8f ef       	ldi	r24, 0xFF	; 255
    3656:	80 83       	st	Z, r24
    3658:	36 c0       	rjmp	.+108    	; 0x36c6 <DIO_SetPortdirection+0xe0>
		case PORTDD: DDRD_Reg= 0xff;break;
    365a:	e1 e3       	ldi	r30, 0x31	; 49
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	8f ef       	ldi	r24, 0xFF	; 255
    3660:	80 83       	st	Z, r24
    3662:	31 c0       	rjmp	.+98     	; 0x36c6 <DIO_SetPortdirection+0xe0>

		}

	}
	else if(input == Direction)
    3664:	8a 81       	ldd	r24, Y+2	; 0x02
    3666:	88 23       	and	r24, r24
    3668:	71 f5       	brne	.+92     	; 0x36c6 <DIO_SetPortdirection+0xe0>
	{
			switch(Port_Id)
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	28 2f       	mov	r18, r24
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	3c 83       	std	Y+4, r19	; 0x04
    3672:	2b 83       	std	Y+3, r18	; 0x03
    3674:	8b 81       	ldd	r24, Y+3	; 0x03
    3676:	9c 81       	ldd	r25, Y+4	; 0x04
    3678:	81 30       	cpi	r24, 0x01	; 1
    367a:	91 05       	cpc	r25, r1
    367c:	c9 f0       	breq	.+50     	; 0x36b0 <DIO_SetPortdirection+0xca>
    367e:	2b 81       	ldd	r18, Y+3	; 0x03
    3680:	3c 81       	ldd	r19, Y+4	; 0x04
    3682:	22 30       	cpi	r18, 0x02	; 2
    3684:	31 05       	cpc	r19, r1
    3686:	2c f4       	brge	.+10     	; 0x3692 <DIO_SetPortdirection+0xac>
    3688:	8b 81       	ldd	r24, Y+3	; 0x03
    368a:	9c 81       	ldd	r25, Y+4	; 0x04
    368c:	00 97       	sbiw	r24, 0x00	; 0
    368e:	61 f0       	breq	.+24     	; 0x36a8 <DIO_SetPortdirection+0xc2>
    3690:	1a c0       	rjmp	.+52     	; 0x36c6 <DIO_SetPortdirection+0xe0>
    3692:	2b 81       	ldd	r18, Y+3	; 0x03
    3694:	3c 81       	ldd	r19, Y+4	; 0x04
    3696:	22 30       	cpi	r18, 0x02	; 2
    3698:	31 05       	cpc	r19, r1
    369a:	71 f0       	breq	.+28     	; 0x36b8 <DIO_SetPortdirection+0xd2>
    369c:	8b 81       	ldd	r24, Y+3	; 0x03
    369e:	9c 81       	ldd	r25, Y+4	; 0x04
    36a0:	83 30       	cpi	r24, 0x03	; 3
    36a2:	91 05       	cpc	r25, r1
    36a4:	69 f0       	breq	.+26     	; 0x36c0 <DIO_SetPortdirection+0xda>
    36a6:	0f c0       	rjmp	.+30     	; 0x36c6 <DIO_SetPortdirection+0xe0>
			{
			case PORTAA:DDRA_Reg = 0x00;break;
    36a8:	ea e3       	ldi	r30, 0x3A	; 58
    36aa:	f0 e0       	ldi	r31, 0x00	; 0
    36ac:	10 82       	st	Z, r1
    36ae:	0b c0       	rjmp	.+22     	; 0x36c6 <DIO_SetPortdirection+0xe0>
			case PORTBB:DDRB_Reg = 0x00;break;
    36b0:	e7 e3       	ldi	r30, 0x37	; 55
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	10 82       	st	Z, r1
    36b6:	07 c0       	rjmp	.+14     	; 0x36c6 <DIO_SetPortdirection+0xe0>
			case PORTCC:DDRC_Reg = 0x00;break;
    36b8:	e4 e3       	ldi	r30, 0x34	; 52
    36ba:	f0 e0       	ldi	r31, 0x00	; 0
    36bc:	10 82       	st	Z, r1
    36be:	03 c0       	rjmp	.+6      	; 0x36c6 <DIO_SetPortdirection+0xe0>
			case PORTDD:DDRD_Reg = 0x00;break;
    36c0:	e1 e3       	ldi	r30, 0x31	; 49
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	10 82       	st	Z, r1
			}
	}
}
    36c6:	26 96       	adiw	r28, 0x06	; 6
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	de bf       	out	0x3e, r29	; 62
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	cd bf       	out	0x3d, r28	; 61
    36d2:	cf 91       	pop	r28
    36d4:	df 91       	pop	r29
    36d6:	08 95       	ret

000036d8 <DIO_SetPortValue>:

void DIO_SetPortValue(DIO_PORT_ID Port_Id,unsigned char value)
{
    36d8:	df 93       	push	r29
    36da:	cf 93       	push	r28
    36dc:	00 d0       	rcall	.+0      	; 0x36de <DIO_SetPortValue+0x6>
    36de:	00 d0       	rcall	.+0      	; 0x36e0 <DIO_SetPortValue+0x8>
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	89 83       	std	Y+1, r24	; 0x01
    36e6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port_Id)
    36e8:	89 81       	ldd	r24, Y+1	; 0x01
    36ea:	28 2f       	mov	r18, r24
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	3c 83       	std	Y+4, r19	; 0x04
    36f0:	2b 83       	std	Y+3, r18	; 0x03
    36f2:	8b 81       	ldd	r24, Y+3	; 0x03
    36f4:	9c 81       	ldd	r25, Y+4	; 0x04
    36f6:	81 30       	cpi	r24, 0x01	; 1
    36f8:	91 05       	cpc	r25, r1
    36fa:	d1 f0       	breq	.+52     	; 0x3730 <DIO_SetPortValue+0x58>
    36fc:	2b 81       	ldd	r18, Y+3	; 0x03
    36fe:	3c 81       	ldd	r19, Y+4	; 0x04
    3700:	22 30       	cpi	r18, 0x02	; 2
    3702:	31 05       	cpc	r19, r1
    3704:	2c f4       	brge	.+10     	; 0x3710 <DIO_SetPortValue+0x38>
    3706:	8b 81       	ldd	r24, Y+3	; 0x03
    3708:	9c 81       	ldd	r25, Y+4	; 0x04
    370a:	00 97       	sbiw	r24, 0x00	; 0
    370c:	61 f0       	breq	.+24     	; 0x3726 <DIO_SetPortValue+0x4e>
    370e:	1e c0       	rjmp	.+60     	; 0x374c <DIO_SetPortValue+0x74>
    3710:	2b 81       	ldd	r18, Y+3	; 0x03
    3712:	3c 81       	ldd	r19, Y+4	; 0x04
    3714:	22 30       	cpi	r18, 0x02	; 2
    3716:	31 05       	cpc	r19, r1
    3718:	81 f0       	breq	.+32     	; 0x373a <DIO_SetPortValue+0x62>
    371a:	8b 81       	ldd	r24, Y+3	; 0x03
    371c:	9c 81       	ldd	r25, Y+4	; 0x04
    371e:	83 30       	cpi	r24, 0x03	; 3
    3720:	91 05       	cpc	r25, r1
    3722:	81 f0       	breq	.+32     	; 0x3744 <DIO_SetPortValue+0x6c>
    3724:	13 c0       	rjmp	.+38     	; 0x374c <DIO_SetPortValue+0x74>
			{
			case PORTAA: PORTA_Reg= value;break;
    3726:	eb e3       	ldi	r30, 0x3B	; 59
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	8a 81       	ldd	r24, Y+2	; 0x02
    372c:	80 83       	st	Z, r24
    372e:	0e c0       	rjmp	.+28     	; 0x374c <DIO_SetPortValue+0x74>
			case PORTBB: PORTB_Reg= value;break;
    3730:	e8 e3       	ldi	r30, 0x38	; 56
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	8a 81       	ldd	r24, Y+2	; 0x02
    3736:	80 83       	st	Z, r24
    3738:	09 c0       	rjmp	.+18     	; 0x374c <DIO_SetPortValue+0x74>
			case PORTCC: PORTC_Reg= value;break;
    373a:	e5 e3       	ldi	r30, 0x35	; 53
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	8a 81       	ldd	r24, Y+2	; 0x02
    3740:	80 83       	st	Z, r24
    3742:	04 c0       	rjmp	.+8      	; 0x374c <DIO_SetPortValue+0x74>
			case PORTDD: PORTD_Reg= value;break;
    3744:	e2 e3       	ldi	r30, 0x32	; 50
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	8a 81       	ldd	r24, Y+2	; 0x02
    374a:	80 83       	st	Z, r24
			}

};
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <DIO_SetBinDirection>:
void DIO_SetBinDirection(DIO_PORT_ID Port_Id,DIO_PORT_ID pin_id,DIO_Direction Direction)
{
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	27 97       	sbiw	r28, 0x07	; 7
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	89 83       	std	Y+1, r24	; 0x01
    3770:	6a 83       	std	Y+2, r22	; 0x02
    3772:	4b 83       	std	Y+3, r20	; 0x03
	if(Port_Id <= PORTDD && pin_id<=pin7)
    3774:	89 81       	ldd	r24, Y+1	; 0x01
    3776:	84 30       	cpi	r24, 0x04	; 4
    3778:	08 f0       	brcs	.+2      	; 0x377c <DIO_SetBinDirection+0x22>
    377a:	ee c0       	rjmp	.+476    	; 0x3958 <DIO_SetBinDirection+0x1fe>
    377c:	8a 81       	ldd	r24, Y+2	; 0x02
    377e:	88 30       	cpi	r24, 0x08	; 8
    3780:	08 f0       	brcs	.+2      	; 0x3784 <DIO_SetBinDirection+0x2a>
    3782:	ea c0       	rjmp	.+468    	; 0x3958 <DIO_SetBinDirection+0x1fe>
{	if ( output == Direction )
    3784:	8b 81       	ldd	r24, Y+3	; 0x03
    3786:	81 30       	cpi	r24, 0x01	; 1
    3788:	09 f0       	breq	.+2      	; 0x378c <DIO_SetBinDirection+0x32>
    378a:	6f c0       	rjmp	.+222    	; 0x386a <DIO_SetBinDirection+0x110>
{
	switch(Port_Id)
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	28 2f       	mov	r18, r24
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	3f 83       	std	Y+7, r19	; 0x07
    3794:	2e 83       	std	Y+6, r18	; 0x06
    3796:	8e 81       	ldd	r24, Y+6	; 0x06
    3798:	9f 81       	ldd	r25, Y+7	; 0x07
    379a:	81 30       	cpi	r24, 0x01	; 1
    379c:	91 05       	cpc	r25, r1
    379e:	49 f1       	breq	.+82     	; 0x37f2 <DIO_SetBinDirection+0x98>
    37a0:	2e 81       	ldd	r18, Y+6	; 0x06
    37a2:	3f 81       	ldd	r19, Y+7	; 0x07
    37a4:	22 30       	cpi	r18, 0x02	; 2
    37a6:	31 05       	cpc	r19, r1
    37a8:	2c f4       	brge	.+10     	; 0x37b4 <DIO_SetBinDirection+0x5a>
    37aa:	8e 81       	ldd	r24, Y+6	; 0x06
    37ac:	9f 81       	ldd	r25, Y+7	; 0x07
    37ae:	00 97       	sbiw	r24, 0x00	; 0
    37b0:	61 f0       	breq	.+24     	; 0x37ca <DIO_SetBinDirection+0x70>
    37b2:	d2 c0       	rjmp	.+420    	; 0x3958 <DIO_SetBinDirection+0x1fe>
    37b4:	2e 81       	ldd	r18, Y+6	; 0x06
    37b6:	3f 81       	ldd	r19, Y+7	; 0x07
    37b8:	22 30       	cpi	r18, 0x02	; 2
    37ba:	31 05       	cpc	r19, r1
    37bc:	71 f1       	breq	.+92     	; 0x381a <DIO_SetBinDirection+0xc0>
    37be:	8e 81       	ldd	r24, Y+6	; 0x06
    37c0:	9f 81       	ldd	r25, Y+7	; 0x07
    37c2:	83 30       	cpi	r24, 0x03	; 3
    37c4:	91 05       	cpc	r25, r1
    37c6:	e9 f1       	breq	.+122    	; 0x3842 <DIO_SetBinDirection+0xe8>
    37c8:	c7 c0       	rjmp	.+398    	; 0x3958 <DIO_SetBinDirection+0x1fe>
				{
				case PORTAA: SET_BIT(DDRA_Reg,pin_id);break;
    37ca:	aa e3       	ldi	r26, 0x3A	; 58
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	ea e3       	ldi	r30, 0x3A	; 58
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	48 2f       	mov	r20, r24
    37d6:	8a 81       	ldd	r24, Y+2	; 0x02
    37d8:	28 2f       	mov	r18, r24
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	02 2e       	mov	r0, r18
    37e2:	02 c0       	rjmp	.+4      	; 0x37e8 <DIO_SetBinDirection+0x8e>
    37e4:	88 0f       	add	r24, r24
    37e6:	99 1f       	adc	r25, r25
    37e8:	0a 94       	dec	r0
    37ea:	e2 f7       	brpl	.-8      	; 0x37e4 <DIO_SetBinDirection+0x8a>
    37ec:	84 2b       	or	r24, r20
    37ee:	8c 93       	st	X, r24
    37f0:	b3 c0       	rjmp	.+358    	; 0x3958 <DIO_SetBinDirection+0x1fe>
				case PORTBB: SET_BIT(DDRB_Reg,pin_id);break;
    37f2:	a7 e3       	ldi	r26, 0x37	; 55
    37f4:	b0 e0       	ldi	r27, 0x00	; 0
    37f6:	e7 e3       	ldi	r30, 0x37	; 55
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	80 81       	ld	r24, Z
    37fc:	48 2f       	mov	r20, r24
    37fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3800:	28 2f       	mov	r18, r24
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	02 2e       	mov	r0, r18
    380a:	02 c0       	rjmp	.+4      	; 0x3810 <DIO_SetBinDirection+0xb6>
    380c:	88 0f       	add	r24, r24
    380e:	99 1f       	adc	r25, r25
    3810:	0a 94       	dec	r0
    3812:	e2 f7       	brpl	.-8      	; 0x380c <DIO_SetBinDirection+0xb2>
    3814:	84 2b       	or	r24, r20
    3816:	8c 93       	st	X, r24
    3818:	9f c0       	rjmp	.+318    	; 0x3958 <DIO_SetBinDirection+0x1fe>
				case PORTCC: SET_BIT(DDRC_Reg,pin_id);break;
    381a:	a4 e3       	ldi	r26, 0x34	; 52
    381c:	b0 e0       	ldi	r27, 0x00	; 0
    381e:	e4 e3       	ldi	r30, 0x34	; 52
    3820:	f0 e0       	ldi	r31, 0x00	; 0
    3822:	80 81       	ld	r24, Z
    3824:	48 2f       	mov	r20, r24
    3826:	8a 81       	ldd	r24, Y+2	; 0x02
    3828:	28 2f       	mov	r18, r24
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	02 2e       	mov	r0, r18
    3832:	02 c0       	rjmp	.+4      	; 0x3838 <DIO_SetBinDirection+0xde>
    3834:	88 0f       	add	r24, r24
    3836:	99 1f       	adc	r25, r25
    3838:	0a 94       	dec	r0
    383a:	e2 f7       	brpl	.-8      	; 0x3834 <DIO_SetBinDirection+0xda>
    383c:	84 2b       	or	r24, r20
    383e:	8c 93       	st	X, r24
    3840:	8b c0       	rjmp	.+278    	; 0x3958 <DIO_SetBinDirection+0x1fe>
				case PORTDD: SET_BIT(DDRD_Reg,pin_id);break;
    3842:	a1 e3       	ldi	r26, 0x31	; 49
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	e1 e3       	ldi	r30, 0x31	; 49
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	80 81       	ld	r24, Z
    384c:	48 2f       	mov	r20, r24
    384e:	8a 81       	ldd	r24, Y+2	; 0x02
    3850:	28 2f       	mov	r18, r24
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	02 2e       	mov	r0, r18
    385a:	02 c0       	rjmp	.+4      	; 0x3860 <DIO_SetBinDirection+0x106>
    385c:	88 0f       	add	r24, r24
    385e:	99 1f       	adc	r25, r25
    3860:	0a 94       	dec	r0
    3862:	e2 f7       	brpl	.-8      	; 0x385c <DIO_SetBinDirection+0x102>
    3864:	84 2b       	or	r24, r20
    3866:	8c 93       	st	X, r24
    3868:	77 c0       	rjmp	.+238    	; 0x3958 <DIO_SetBinDirection+0x1fe>
				}
}
       else if(input == Direction )
    386a:	8b 81       	ldd	r24, Y+3	; 0x03
    386c:	88 23       	and	r24, r24
    386e:	09 f0       	breq	.+2      	; 0x3872 <DIO_SetBinDirection+0x118>
    3870:	73 c0       	rjmp	.+230    	; 0x3958 <DIO_SetBinDirection+0x1fe>
	{
	switch(Port_Id)
    3872:	89 81       	ldd	r24, Y+1	; 0x01
    3874:	28 2f       	mov	r18, r24
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	3d 83       	std	Y+5, r19	; 0x05
    387a:	2c 83       	std	Y+4, r18	; 0x04
    387c:	8c 81       	ldd	r24, Y+4	; 0x04
    387e:	9d 81       	ldd	r25, Y+5	; 0x05
    3880:	81 30       	cpi	r24, 0x01	; 1
    3882:	91 05       	cpc	r25, r1
    3884:	59 f1       	breq	.+86     	; 0x38dc <DIO_SetBinDirection+0x182>
    3886:	2c 81       	ldd	r18, Y+4	; 0x04
    3888:	3d 81       	ldd	r19, Y+5	; 0x05
    388a:	22 30       	cpi	r18, 0x02	; 2
    388c:	31 05       	cpc	r19, r1
    388e:	2c f4       	brge	.+10     	; 0x389a <DIO_SetBinDirection+0x140>
    3890:	8c 81       	ldd	r24, Y+4	; 0x04
    3892:	9d 81       	ldd	r25, Y+5	; 0x05
    3894:	00 97       	sbiw	r24, 0x00	; 0
    3896:	69 f0       	breq	.+26     	; 0x38b2 <DIO_SetBinDirection+0x158>
    3898:	5f c0       	rjmp	.+190    	; 0x3958 <DIO_SetBinDirection+0x1fe>
    389a:	2c 81       	ldd	r18, Y+4	; 0x04
    389c:	3d 81       	ldd	r19, Y+5	; 0x05
    389e:	22 30       	cpi	r18, 0x02	; 2
    38a0:	31 05       	cpc	r19, r1
    38a2:	89 f1       	breq	.+98     	; 0x3906 <DIO_SetBinDirection+0x1ac>
    38a4:	8c 81       	ldd	r24, Y+4	; 0x04
    38a6:	9d 81       	ldd	r25, Y+5	; 0x05
    38a8:	83 30       	cpi	r24, 0x03	; 3
    38aa:	91 05       	cpc	r25, r1
    38ac:	09 f4       	brne	.+2      	; 0x38b0 <DIO_SetBinDirection+0x156>
    38ae:	40 c0       	rjmp	.+128    	; 0x3930 <DIO_SetBinDirection+0x1d6>
    38b0:	53 c0       	rjmp	.+166    	; 0x3958 <DIO_SetBinDirection+0x1fe>
			{
			case PORTAA : CLEAR_BIT(DDRA_Reg,pin_id) ; break;
    38b2:	aa e3       	ldi	r26, 0x3A	; 58
    38b4:	b0 e0       	ldi	r27, 0x00	; 0
    38b6:	ea e3       	ldi	r30, 0x3A	; 58
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	80 81       	ld	r24, Z
    38bc:	48 2f       	mov	r20, r24
    38be:	8a 81       	ldd	r24, Y+2	; 0x02
    38c0:	28 2f       	mov	r18, r24
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	02 2e       	mov	r0, r18
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <DIO_SetBinDirection+0x176>
    38cc:	88 0f       	add	r24, r24
    38ce:	99 1f       	adc	r25, r25
    38d0:	0a 94       	dec	r0
    38d2:	e2 f7       	brpl	.-8      	; 0x38cc <DIO_SetBinDirection+0x172>
    38d4:	80 95       	com	r24
    38d6:	84 23       	and	r24, r20
    38d8:	8c 93       	st	X, r24
    38da:	3e c0       	rjmp	.+124    	; 0x3958 <DIO_SetBinDirection+0x1fe>
			case PORTBB : CLEAR_BIT(DDRB_Reg,pin_id) ; break;
    38dc:	a7 e3       	ldi	r26, 0x37	; 55
    38de:	b0 e0       	ldi	r27, 0x00	; 0
    38e0:	e7 e3       	ldi	r30, 0x37	; 55
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    38e4:	80 81       	ld	r24, Z
    38e6:	48 2f       	mov	r20, r24
    38e8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ea:	28 2f       	mov	r18, r24
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	02 2e       	mov	r0, r18
    38f4:	02 c0       	rjmp	.+4      	; 0x38fa <DIO_SetBinDirection+0x1a0>
    38f6:	88 0f       	add	r24, r24
    38f8:	99 1f       	adc	r25, r25
    38fa:	0a 94       	dec	r0
    38fc:	e2 f7       	brpl	.-8      	; 0x38f6 <DIO_SetBinDirection+0x19c>
    38fe:	80 95       	com	r24
    3900:	84 23       	and	r24, r20
    3902:	8c 93       	st	X, r24
    3904:	29 c0       	rjmp	.+82     	; 0x3958 <DIO_SetBinDirection+0x1fe>
			case PORTCC : CLEAR_BIT(DDRC_Reg,pin_id) ; break;
    3906:	a4 e3       	ldi	r26, 0x34	; 52
    3908:	b0 e0       	ldi	r27, 0x00	; 0
    390a:	e4 e3       	ldi	r30, 0x34	; 52
    390c:	f0 e0       	ldi	r31, 0x00	; 0
    390e:	80 81       	ld	r24, Z
    3910:	48 2f       	mov	r20, r24
    3912:	8a 81       	ldd	r24, Y+2	; 0x02
    3914:	28 2f       	mov	r18, r24
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	02 2e       	mov	r0, r18
    391e:	02 c0       	rjmp	.+4      	; 0x3924 <DIO_SetBinDirection+0x1ca>
    3920:	88 0f       	add	r24, r24
    3922:	99 1f       	adc	r25, r25
    3924:	0a 94       	dec	r0
    3926:	e2 f7       	brpl	.-8      	; 0x3920 <DIO_SetBinDirection+0x1c6>
    3928:	80 95       	com	r24
    392a:	84 23       	and	r24, r20
    392c:	8c 93       	st	X, r24
    392e:	14 c0       	rjmp	.+40     	; 0x3958 <DIO_SetBinDirection+0x1fe>
			case PORTDD : CLEAR_BIT(DDRD_Reg,pin_id) ; break;
    3930:	a1 e3       	ldi	r26, 0x31	; 49
    3932:	b0 e0       	ldi	r27, 0x00	; 0
    3934:	e1 e3       	ldi	r30, 0x31	; 49
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	80 81       	ld	r24, Z
    393a:	48 2f       	mov	r20, r24
    393c:	8a 81       	ldd	r24, Y+2	; 0x02
    393e:	28 2f       	mov	r18, r24
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	02 2e       	mov	r0, r18
    3948:	02 c0       	rjmp	.+4      	; 0x394e <DIO_SetBinDirection+0x1f4>
    394a:	88 0f       	add	r24, r24
    394c:	99 1f       	adc	r25, r25
    394e:	0a 94       	dec	r0
    3950:	e2 f7       	brpl	.-8      	; 0x394a <DIO_SetBinDirection+0x1f0>
    3952:	80 95       	com	r24
    3954:	84 23       	and	r24, r20
    3956:	8c 93       	st	X, r24
			}

}

}
}
    3958:	27 96       	adiw	r28, 0x07	; 7
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61
    3964:	cf 91       	pop	r28
    3966:	df 91       	pop	r29
    3968:	08 95       	ret

0000396a <DIO_SetPinValue>:
void DIO_SetPinValue(DIO_PORT_ID Port_Id,DIO_PORT_ID pin_id,DIO_Value value)
{
    396a:	df 93       	push	r29
    396c:	cf 93       	push	r28
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	27 97       	sbiw	r28, 0x07	; 7
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
    397e:	89 83       	std	Y+1, r24	; 0x01
    3980:	6a 83       	std	Y+2, r22	; 0x02
    3982:	4b 83       	std	Y+3, r20	; 0x03
	if(Port_Id <= PORTDD && pin_id<=pin7)
    3984:	89 81       	ldd	r24, Y+1	; 0x01
    3986:	84 30       	cpi	r24, 0x04	; 4
    3988:	08 f0       	brcs	.+2      	; 0x398c <DIO_SetPinValue+0x22>
    398a:	ee c0       	rjmp	.+476    	; 0x3b68 <DIO_SetPinValue+0x1fe>
    398c:	8a 81       	ldd	r24, Y+2	; 0x02
    398e:	88 30       	cpi	r24, 0x08	; 8
    3990:	08 f0       	brcs	.+2      	; 0x3994 <DIO_SetPinValue+0x2a>
    3992:	ea c0       	rjmp	.+468    	; 0x3b68 <DIO_SetPinValue+0x1fe>
	{
if(value == HIGH)
    3994:	8b 81       	ldd	r24, Y+3	; 0x03
    3996:	81 30       	cpi	r24, 0x01	; 1
    3998:	09 f0       	breq	.+2      	; 0x399c <DIO_SetPinValue+0x32>
    399a:	6f c0       	rjmp	.+222    	; 0x3a7a <DIO_SetPinValue+0x110>
{switch(Port_Id)
    399c:	89 81       	ldd	r24, Y+1	; 0x01
    399e:	28 2f       	mov	r18, r24
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	3f 83       	std	Y+7, r19	; 0x07
    39a4:	2e 83       	std	Y+6, r18	; 0x06
    39a6:	8e 81       	ldd	r24, Y+6	; 0x06
    39a8:	9f 81       	ldd	r25, Y+7	; 0x07
    39aa:	81 30       	cpi	r24, 0x01	; 1
    39ac:	91 05       	cpc	r25, r1
    39ae:	49 f1       	breq	.+82     	; 0x3a02 <DIO_SetPinValue+0x98>
    39b0:	2e 81       	ldd	r18, Y+6	; 0x06
    39b2:	3f 81       	ldd	r19, Y+7	; 0x07
    39b4:	22 30       	cpi	r18, 0x02	; 2
    39b6:	31 05       	cpc	r19, r1
    39b8:	2c f4       	brge	.+10     	; 0x39c4 <DIO_SetPinValue+0x5a>
    39ba:	8e 81       	ldd	r24, Y+6	; 0x06
    39bc:	9f 81       	ldd	r25, Y+7	; 0x07
    39be:	00 97       	sbiw	r24, 0x00	; 0
    39c0:	61 f0       	breq	.+24     	; 0x39da <DIO_SetPinValue+0x70>
    39c2:	d2 c0       	rjmp	.+420    	; 0x3b68 <DIO_SetPinValue+0x1fe>
    39c4:	2e 81       	ldd	r18, Y+6	; 0x06
    39c6:	3f 81       	ldd	r19, Y+7	; 0x07
    39c8:	22 30       	cpi	r18, 0x02	; 2
    39ca:	31 05       	cpc	r19, r1
    39cc:	71 f1       	breq	.+92     	; 0x3a2a <DIO_SetPinValue+0xc0>
    39ce:	8e 81       	ldd	r24, Y+6	; 0x06
    39d0:	9f 81       	ldd	r25, Y+7	; 0x07
    39d2:	83 30       	cpi	r24, 0x03	; 3
    39d4:	91 05       	cpc	r25, r1
    39d6:	e9 f1       	breq	.+122    	; 0x3a52 <DIO_SetPinValue+0xe8>
    39d8:	c7 c0       	rjmp	.+398    	; 0x3b68 <DIO_SetPinValue+0x1fe>
{
case PORTAA: SET_BIT(PORTA_Reg,pin_id);break;
    39da:	ab e3       	ldi	r26, 0x3B	; 59
    39dc:	b0 e0       	ldi	r27, 0x00	; 0
    39de:	eb e3       	ldi	r30, 0x3B	; 59
    39e0:	f0 e0       	ldi	r31, 0x00	; 0
    39e2:	80 81       	ld	r24, Z
    39e4:	48 2f       	mov	r20, r24
    39e6:	8a 81       	ldd	r24, Y+2	; 0x02
    39e8:	28 2f       	mov	r18, r24
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	02 2e       	mov	r0, r18
    39f2:	02 c0       	rjmp	.+4      	; 0x39f8 <DIO_SetPinValue+0x8e>
    39f4:	88 0f       	add	r24, r24
    39f6:	99 1f       	adc	r25, r25
    39f8:	0a 94       	dec	r0
    39fa:	e2 f7       	brpl	.-8      	; 0x39f4 <DIO_SetPinValue+0x8a>
    39fc:	84 2b       	or	r24, r20
    39fe:	8c 93       	st	X, r24
    3a00:	b3 c0       	rjmp	.+358    	; 0x3b68 <DIO_SetPinValue+0x1fe>
case PORTBB: SET_BIT(PORTB_Reg,pin_id);break;
    3a02:	a8 e3       	ldi	r26, 0x38	; 56
    3a04:	b0 e0       	ldi	r27, 0x00	; 0
    3a06:	e8 e3       	ldi	r30, 0x38	; 56
    3a08:	f0 e0       	ldi	r31, 0x00	; 0
    3a0a:	80 81       	ld	r24, Z
    3a0c:	48 2f       	mov	r20, r24
    3a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a10:	28 2f       	mov	r18, r24
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	02 2e       	mov	r0, r18
    3a1a:	02 c0       	rjmp	.+4      	; 0x3a20 <DIO_SetPinValue+0xb6>
    3a1c:	88 0f       	add	r24, r24
    3a1e:	99 1f       	adc	r25, r25
    3a20:	0a 94       	dec	r0
    3a22:	e2 f7       	brpl	.-8      	; 0x3a1c <DIO_SetPinValue+0xb2>
    3a24:	84 2b       	or	r24, r20
    3a26:	8c 93       	st	X, r24
    3a28:	9f c0       	rjmp	.+318    	; 0x3b68 <DIO_SetPinValue+0x1fe>
case PORTCC: SET_BIT(PORTC_Reg,pin_id);break;
    3a2a:	a5 e3       	ldi	r26, 0x35	; 53
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	e5 e3       	ldi	r30, 0x35	; 53
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	80 81       	ld	r24, Z
    3a34:	48 2f       	mov	r20, r24
    3a36:	8a 81       	ldd	r24, Y+2	; 0x02
    3a38:	28 2f       	mov	r18, r24
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	02 2e       	mov	r0, r18
    3a42:	02 c0       	rjmp	.+4      	; 0x3a48 <DIO_SetPinValue+0xde>
    3a44:	88 0f       	add	r24, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	0a 94       	dec	r0
    3a4a:	e2 f7       	brpl	.-8      	; 0x3a44 <DIO_SetPinValue+0xda>
    3a4c:	84 2b       	or	r24, r20
    3a4e:	8c 93       	st	X, r24
    3a50:	8b c0       	rjmp	.+278    	; 0x3b68 <DIO_SetPinValue+0x1fe>
case PORTDD: SET_BIT(PORTD_Reg,pin_id);break;
    3a52:	a2 e3       	ldi	r26, 0x32	; 50
    3a54:	b0 e0       	ldi	r27, 0x00	; 0
    3a56:	e2 e3       	ldi	r30, 0x32	; 50
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	80 81       	ld	r24, Z
    3a5c:	48 2f       	mov	r20, r24
    3a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a60:	28 2f       	mov	r18, r24
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	02 2e       	mov	r0, r18
    3a6a:	02 c0       	rjmp	.+4      	; 0x3a70 <DIO_SetPinValue+0x106>
    3a6c:	88 0f       	add	r24, r24
    3a6e:	99 1f       	adc	r25, r25
    3a70:	0a 94       	dec	r0
    3a72:	e2 f7       	brpl	.-8      	; 0x3a6c <DIO_SetPinValue+0x102>
    3a74:	84 2b       	or	r24, r20
    3a76:	8c 93       	st	X, r24
    3a78:	77 c0       	rjmp	.+238    	; 0x3b68 <DIO_SetPinValue+0x1fe>
}}
else if(value == LOW)
    3a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7c:	88 23       	and	r24, r24
    3a7e:	09 f0       	breq	.+2      	; 0x3a82 <DIO_SetPinValue+0x118>
    3a80:	73 c0       	rjmp	.+230    	; 0x3b68 <DIO_SetPinValue+0x1fe>
{
	switch(Port_Id)
    3a82:	89 81       	ldd	r24, Y+1	; 0x01
    3a84:	28 2f       	mov	r18, r24
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	3d 83       	std	Y+5, r19	; 0x05
    3a8a:	2c 83       	std	Y+4, r18	; 0x04
    3a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a90:	81 30       	cpi	r24, 0x01	; 1
    3a92:	91 05       	cpc	r25, r1
    3a94:	59 f1       	breq	.+86     	; 0x3aec <DIO_SetPinValue+0x182>
    3a96:	2c 81       	ldd	r18, Y+4	; 0x04
    3a98:	3d 81       	ldd	r19, Y+5	; 0x05
    3a9a:	22 30       	cpi	r18, 0x02	; 2
    3a9c:	31 05       	cpc	r19, r1
    3a9e:	2c f4       	brge	.+10     	; 0x3aaa <DIO_SetPinValue+0x140>
    3aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    3aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    3aa4:	00 97       	sbiw	r24, 0x00	; 0
    3aa6:	69 f0       	breq	.+26     	; 0x3ac2 <DIO_SetPinValue+0x158>
    3aa8:	5f c0       	rjmp	.+190    	; 0x3b68 <DIO_SetPinValue+0x1fe>
    3aaa:	2c 81       	ldd	r18, Y+4	; 0x04
    3aac:	3d 81       	ldd	r19, Y+5	; 0x05
    3aae:	22 30       	cpi	r18, 0x02	; 2
    3ab0:	31 05       	cpc	r19, r1
    3ab2:	89 f1       	breq	.+98     	; 0x3b16 <DIO_SetPinValue+0x1ac>
    3ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ab8:	83 30       	cpi	r24, 0x03	; 3
    3aba:	91 05       	cpc	r25, r1
    3abc:	09 f4       	brne	.+2      	; 0x3ac0 <DIO_SetPinValue+0x156>
    3abe:	40 c0       	rjmp	.+128    	; 0x3b40 <DIO_SetPinValue+0x1d6>
    3ac0:	53 c0       	rjmp	.+166    	; 0x3b68 <DIO_SetPinValue+0x1fe>
{
case PORTAA: CLEAR_BIT(PORTA_Reg,pin_id);break;
    3ac2:	ab e3       	ldi	r26, 0x3B	; 59
    3ac4:	b0 e0       	ldi	r27, 0x00	; 0
    3ac6:	eb e3       	ldi	r30, 0x3B	; 59
    3ac8:	f0 e0       	ldi	r31, 0x00	; 0
    3aca:	80 81       	ld	r24, Z
    3acc:	48 2f       	mov	r20, r24
    3ace:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad0:	28 2f       	mov	r18, r24
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	02 2e       	mov	r0, r18
    3ada:	02 c0       	rjmp	.+4      	; 0x3ae0 <DIO_SetPinValue+0x176>
    3adc:	88 0f       	add	r24, r24
    3ade:	99 1f       	adc	r25, r25
    3ae0:	0a 94       	dec	r0
    3ae2:	e2 f7       	brpl	.-8      	; 0x3adc <DIO_SetPinValue+0x172>
    3ae4:	80 95       	com	r24
    3ae6:	84 23       	and	r24, r20
    3ae8:	8c 93       	st	X, r24
    3aea:	3e c0       	rjmp	.+124    	; 0x3b68 <DIO_SetPinValue+0x1fe>
case PORTBB: CLEAR_BIT(PORTB_Reg,pin_id);break;
    3aec:	a8 e3       	ldi	r26, 0x38	; 56
    3aee:	b0 e0       	ldi	r27, 0x00	; 0
    3af0:	e8 e3       	ldi	r30, 0x38	; 56
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	80 81       	ld	r24, Z
    3af6:	48 2f       	mov	r20, r24
    3af8:	8a 81       	ldd	r24, Y+2	; 0x02
    3afa:	28 2f       	mov	r18, r24
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	02 2e       	mov	r0, r18
    3b04:	02 c0       	rjmp	.+4      	; 0x3b0a <DIO_SetPinValue+0x1a0>
    3b06:	88 0f       	add	r24, r24
    3b08:	99 1f       	adc	r25, r25
    3b0a:	0a 94       	dec	r0
    3b0c:	e2 f7       	brpl	.-8      	; 0x3b06 <DIO_SetPinValue+0x19c>
    3b0e:	80 95       	com	r24
    3b10:	84 23       	and	r24, r20
    3b12:	8c 93       	st	X, r24
    3b14:	29 c0       	rjmp	.+82     	; 0x3b68 <DIO_SetPinValue+0x1fe>
case PORTCC: CLEAR_BIT(PORTC_Reg,pin_id);break;
    3b16:	a5 e3       	ldi	r26, 0x35	; 53
    3b18:	b0 e0       	ldi	r27, 0x00	; 0
    3b1a:	e5 e3       	ldi	r30, 0x35	; 53
    3b1c:	f0 e0       	ldi	r31, 0x00	; 0
    3b1e:	80 81       	ld	r24, Z
    3b20:	48 2f       	mov	r20, r24
    3b22:	8a 81       	ldd	r24, Y+2	; 0x02
    3b24:	28 2f       	mov	r18, r24
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	02 2e       	mov	r0, r18
    3b2e:	02 c0       	rjmp	.+4      	; 0x3b34 <DIO_SetPinValue+0x1ca>
    3b30:	88 0f       	add	r24, r24
    3b32:	99 1f       	adc	r25, r25
    3b34:	0a 94       	dec	r0
    3b36:	e2 f7       	brpl	.-8      	; 0x3b30 <DIO_SetPinValue+0x1c6>
    3b38:	80 95       	com	r24
    3b3a:	84 23       	and	r24, r20
    3b3c:	8c 93       	st	X, r24
    3b3e:	14 c0       	rjmp	.+40     	; 0x3b68 <DIO_SetPinValue+0x1fe>
case PORTDD: CLEAR_BIT(PORTD_Reg,pin_id);break;
    3b40:	a2 e3       	ldi	r26, 0x32	; 50
    3b42:	b0 e0       	ldi	r27, 0x00	; 0
    3b44:	e2 e3       	ldi	r30, 0x32	; 50
    3b46:	f0 e0       	ldi	r31, 0x00	; 0
    3b48:	80 81       	ld	r24, Z
    3b4a:	48 2f       	mov	r20, r24
    3b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4e:	28 2f       	mov	r18, r24
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	02 2e       	mov	r0, r18
    3b58:	02 c0       	rjmp	.+4      	; 0x3b5e <DIO_SetPinValue+0x1f4>
    3b5a:	88 0f       	add	r24, r24
    3b5c:	99 1f       	adc	r25, r25
    3b5e:	0a 94       	dec	r0
    3b60:	e2 f7       	brpl	.-8      	; 0x3b5a <DIO_SetPinValue+0x1f0>
    3b62:	80 95       	com	r24
    3b64:	84 23       	and	r24, r20
    3b66:	8c 93       	st	X, r24
}
}
}};
    3b68:	27 96       	adiw	r28, 0x07	; 7
    3b6a:	0f b6       	in	r0, 0x3f	; 63
    3b6c:	f8 94       	cli
    3b6e:	de bf       	out	0x3e, r29	; 62
    3b70:	0f be       	out	0x3f, r0	; 63
    3b72:	cd bf       	out	0x3d, r28	; 61
    3b74:	cf 91       	pop	r28
    3b76:	df 91       	pop	r29
    3b78:	08 95       	ret

00003b7a <DIO_GetPinValue>:
DIO_Value DIO_GetPinValue(DIO_PORT_ID Port_Id,DIO_PORT_ID pin_id)
	{DIO_Value val;
    3b7a:	df 93       	push	r29
    3b7c:	cf 93       	push	r28
    3b7e:	00 d0       	rcall	.+0      	; 0x3b80 <DIO_GetPinValue+0x6>
    3b80:	00 d0       	rcall	.+0      	; 0x3b82 <DIO_GetPinValue+0x8>
    3b82:	0f 92       	push	r0
    3b84:	cd b7       	in	r28, 0x3d	; 61
    3b86:	de b7       	in	r29, 0x3e	; 62
    3b88:	8a 83       	std	Y+2, r24	; 0x02
    3b8a:	6b 83       	std	Y+3, r22	; 0x03

		if(Port_Id <= PORTDD && pin_id<=pin7)
    3b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8e:	84 30       	cpi	r24, 0x04	; 4
    3b90:	08 f0       	brcs	.+2      	; 0x3b94 <DIO_GetPinValue+0x1a>
    3b92:	6b c0       	rjmp	.+214    	; 0x3c6a <DIO_GetPinValue+0xf0>
    3b94:	8b 81       	ldd	r24, Y+3	; 0x03
    3b96:	88 30       	cpi	r24, 0x08	; 8
    3b98:	08 f0       	brcs	.+2      	; 0x3b9c <DIO_GetPinValue+0x22>
    3b9a:	67 c0       	rjmp	.+206    	; 0x3c6a <DIO_GetPinValue+0xf0>
		{		switch (Port_Id)
    3b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9e:	28 2f       	mov	r18, r24
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	3d 83       	std	Y+5, r19	; 0x05
    3ba4:	2c 83       	std	Y+4, r18	; 0x04
    3ba6:	4c 81       	ldd	r20, Y+4	; 0x04
    3ba8:	5d 81       	ldd	r21, Y+5	; 0x05
    3baa:	41 30       	cpi	r20, 0x01	; 1
    3bac:	51 05       	cpc	r21, r1
    3bae:	41 f1       	breq	.+80     	; 0x3c00 <DIO_GetPinValue+0x86>
    3bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    3bb4:	82 30       	cpi	r24, 0x02	; 2
    3bb6:	91 05       	cpc	r25, r1
    3bb8:	34 f4       	brge	.+12     	; 0x3bc6 <DIO_GetPinValue+0x4c>
    3bba:	2c 81       	ldd	r18, Y+4	; 0x04
    3bbc:	3d 81       	ldd	r19, Y+5	; 0x05
    3bbe:	21 15       	cp	r18, r1
    3bc0:	31 05       	cpc	r19, r1
    3bc2:	61 f0       	breq	.+24     	; 0x3bdc <DIO_GetPinValue+0x62>
    3bc4:	52 c0       	rjmp	.+164    	; 0x3c6a <DIO_GetPinValue+0xf0>
    3bc6:	4c 81       	ldd	r20, Y+4	; 0x04
    3bc8:	5d 81       	ldd	r21, Y+5	; 0x05
    3bca:	42 30       	cpi	r20, 0x02	; 2
    3bcc:	51 05       	cpc	r21, r1
    3bce:	51 f1       	breq	.+84     	; 0x3c24 <DIO_GetPinValue+0xaa>
    3bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    3bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    3bd4:	83 30       	cpi	r24, 0x03	; 3
    3bd6:	91 05       	cpc	r25, r1
    3bd8:	b9 f1       	breq	.+110    	; 0x3c48 <DIO_GetPinValue+0xce>
    3bda:	47 c0       	rjmp	.+142    	; 0x3c6a <DIO_GetPinValue+0xf0>
			{   case PORTAA : val = GET_BIT(PINA_Reg,pin_id);break;
    3bdc:	e9 e3       	ldi	r30, 0x39	; 57
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	80 81       	ld	r24, Z
    3be2:	28 2f       	mov	r18, r24
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	8b 81       	ldd	r24, Y+3	; 0x03
    3be8:	88 2f       	mov	r24, r24
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	a9 01       	movw	r20, r18
    3bee:	02 c0       	rjmp	.+4      	; 0x3bf4 <DIO_GetPinValue+0x7a>
    3bf0:	55 95       	asr	r21
    3bf2:	47 95       	ror	r20
    3bf4:	8a 95       	dec	r24
    3bf6:	e2 f7       	brpl	.-8      	; 0x3bf0 <DIO_GetPinValue+0x76>
    3bf8:	ca 01       	movw	r24, r20
    3bfa:	81 70       	andi	r24, 0x01	; 1
    3bfc:	89 83       	std	Y+1, r24	; 0x01
    3bfe:	35 c0       	rjmp	.+106    	; 0x3c6a <DIO_GetPinValue+0xf0>
				case PORTBB : val = GET_BIT(PINB_Reg,pin_id);break;
    3c00:	e6 e3       	ldi	r30, 0x36	; 54
    3c02:	f0 e0       	ldi	r31, 0x00	; 0
    3c04:	80 81       	ld	r24, Z
    3c06:	28 2f       	mov	r18, r24
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0c:	88 2f       	mov	r24, r24
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	a9 01       	movw	r20, r18
    3c12:	02 c0       	rjmp	.+4      	; 0x3c18 <DIO_GetPinValue+0x9e>
    3c14:	55 95       	asr	r21
    3c16:	47 95       	ror	r20
    3c18:	8a 95       	dec	r24
    3c1a:	e2 f7       	brpl	.-8      	; 0x3c14 <DIO_GetPinValue+0x9a>
    3c1c:	ca 01       	movw	r24, r20
    3c1e:	81 70       	andi	r24, 0x01	; 1
    3c20:	89 83       	std	Y+1, r24	; 0x01
    3c22:	23 c0       	rjmp	.+70     	; 0x3c6a <DIO_GetPinValue+0xf0>
				case PORTCC : val = GET_BIT(PINC_Reg,pin_id);break;
    3c24:	e3 e3       	ldi	r30, 0x33	; 51
    3c26:	f0 e0       	ldi	r31, 0x00	; 0
    3c28:	80 81       	ld	r24, Z
    3c2a:	28 2f       	mov	r18, r24
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c30:	88 2f       	mov	r24, r24
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	a9 01       	movw	r20, r18
    3c36:	02 c0       	rjmp	.+4      	; 0x3c3c <DIO_GetPinValue+0xc2>
    3c38:	55 95       	asr	r21
    3c3a:	47 95       	ror	r20
    3c3c:	8a 95       	dec	r24
    3c3e:	e2 f7       	brpl	.-8      	; 0x3c38 <DIO_GetPinValue+0xbe>
    3c40:	ca 01       	movw	r24, r20
    3c42:	81 70       	andi	r24, 0x01	; 1
    3c44:	89 83       	std	Y+1, r24	; 0x01
    3c46:	11 c0       	rjmp	.+34     	; 0x3c6a <DIO_GetPinValue+0xf0>
				case PORTDD : val = GET_BIT(PIND_Reg,pin_id);break;
    3c48:	e0 e3       	ldi	r30, 0x30	; 48
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	80 81       	ld	r24, Z
    3c4e:	28 2f       	mov	r18, r24
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	8b 81       	ldd	r24, Y+3	; 0x03
    3c54:	88 2f       	mov	r24, r24
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	a9 01       	movw	r20, r18
    3c5a:	02 c0       	rjmp	.+4      	; 0x3c60 <DIO_GetPinValue+0xe6>
    3c5c:	55 95       	asr	r21
    3c5e:	47 95       	ror	r20
    3c60:	8a 95       	dec	r24
    3c62:	e2 f7       	brpl	.-8      	; 0x3c5c <DIO_GetPinValue+0xe2>
    3c64:	ca 01       	movw	r24, r20
    3c66:	81 70       	andi	r24, 0x01	; 1
    3c68:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		return val;
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	0f 90       	pop	r0
    3c72:	0f 90       	pop	r0
    3c74:	0f 90       	pop	r0
    3c76:	cf 91       	pop	r28
    3c78:	df 91       	pop	r29
    3c7a:	08 95       	ret

00003c7c <__mulsi3>:
    3c7c:	62 9f       	mul	r22, r18
    3c7e:	d0 01       	movw	r26, r0
    3c80:	73 9f       	mul	r23, r19
    3c82:	f0 01       	movw	r30, r0
    3c84:	82 9f       	mul	r24, r18
    3c86:	e0 0d       	add	r30, r0
    3c88:	f1 1d       	adc	r31, r1
    3c8a:	64 9f       	mul	r22, r20
    3c8c:	e0 0d       	add	r30, r0
    3c8e:	f1 1d       	adc	r31, r1
    3c90:	92 9f       	mul	r25, r18
    3c92:	f0 0d       	add	r31, r0
    3c94:	83 9f       	mul	r24, r19
    3c96:	f0 0d       	add	r31, r0
    3c98:	74 9f       	mul	r23, r20
    3c9a:	f0 0d       	add	r31, r0
    3c9c:	65 9f       	mul	r22, r21
    3c9e:	f0 0d       	add	r31, r0
    3ca0:	99 27       	eor	r25, r25
    3ca2:	72 9f       	mul	r23, r18
    3ca4:	b0 0d       	add	r27, r0
    3ca6:	e1 1d       	adc	r30, r1
    3ca8:	f9 1f       	adc	r31, r25
    3caa:	63 9f       	mul	r22, r19
    3cac:	b0 0d       	add	r27, r0
    3cae:	e1 1d       	adc	r30, r1
    3cb0:	f9 1f       	adc	r31, r25
    3cb2:	bd 01       	movw	r22, r26
    3cb4:	cf 01       	movw	r24, r30
    3cb6:	11 24       	eor	r1, r1
    3cb8:	08 95       	ret

00003cba <__divmodhi4>:
    3cba:	97 fb       	bst	r25, 7
    3cbc:	09 2e       	mov	r0, r25
    3cbe:	07 26       	eor	r0, r23
    3cc0:	0a d0       	rcall	.+20     	; 0x3cd6 <__divmodhi4_neg1>
    3cc2:	77 fd       	sbrc	r23, 7
    3cc4:	04 d0       	rcall	.+8      	; 0x3cce <__divmodhi4_neg2>
    3cc6:	0c d0       	rcall	.+24     	; 0x3ce0 <__udivmodhi4>
    3cc8:	06 d0       	rcall	.+12     	; 0x3cd6 <__divmodhi4_neg1>
    3cca:	00 20       	and	r0, r0
    3ccc:	1a f4       	brpl	.+6      	; 0x3cd4 <__divmodhi4_exit>

00003cce <__divmodhi4_neg2>:
    3cce:	70 95       	com	r23
    3cd0:	61 95       	neg	r22
    3cd2:	7f 4f       	sbci	r23, 0xFF	; 255

00003cd4 <__divmodhi4_exit>:
    3cd4:	08 95       	ret

00003cd6 <__divmodhi4_neg1>:
    3cd6:	f6 f7       	brtc	.-4      	; 0x3cd4 <__divmodhi4_exit>
    3cd8:	90 95       	com	r25
    3cda:	81 95       	neg	r24
    3cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    3cde:	08 95       	ret

00003ce0 <__udivmodhi4>:
    3ce0:	aa 1b       	sub	r26, r26
    3ce2:	bb 1b       	sub	r27, r27
    3ce4:	51 e1       	ldi	r21, 0x11	; 17
    3ce6:	07 c0       	rjmp	.+14     	; 0x3cf6 <__udivmodhi4_ep>

00003ce8 <__udivmodhi4_loop>:
    3ce8:	aa 1f       	adc	r26, r26
    3cea:	bb 1f       	adc	r27, r27
    3cec:	a6 17       	cp	r26, r22
    3cee:	b7 07       	cpc	r27, r23
    3cf0:	10 f0       	brcs	.+4      	; 0x3cf6 <__udivmodhi4_ep>
    3cf2:	a6 1b       	sub	r26, r22
    3cf4:	b7 0b       	sbc	r27, r23

00003cf6 <__udivmodhi4_ep>:
    3cf6:	88 1f       	adc	r24, r24
    3cf8:	99 1f       	adc	r25, r25
    3cfa:	5a 95       	dec	r21
    3cfc:	a9 f7       	brne	.-22     	; 0x3ce8 <__udivmodhi4_loop>
    3cfe:	80 95       	com	r24
    3d00:	90 95       	com	r25
    3d02:	bc 01       	movw	r22, r24
    3d04:	cd 01       	movw	r24, r26
    3d06:	08 95       	ret

00003d08 <__prologue_saves__>:
    3d08:	2f 92       	push	r2
    3d0a:	3f 92       	push	r3
    3d0c:	4f 92       	push	r4
    3d0e:	5f 92       	push	r5
    3d10:	6f 92       	push	r6
    3d12:	7f 92       	push	r7
    3d14:	8f 92       	push	r8
    3d16:	9f 92       	push	r9
    3d18:	af 92       	push	r10
    3d1a:	bf 92       	push	r11
    3d1c:	cf 92       	push	r12
    3d1e:	df 92       	push	r13
    3d20:	ef 92       	push	r14
    3d22:	ff 92       	push	r15
    3d24:	0f 93       	push	r16
    3d26:	1f 93       	push	r17
    3d28:	cf 93       	push	r28
    3d2a:	df 93       	push	r29
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	ca 1b       	sub	r28, r26
    3d32:	db 0b       	sbc	r29, r27
    3d34:	0f b6       	in	r0, 0x3f	; 63
    3d36:	f8 94       	cli
    3d38:	de bf       	out	0x3e, r29	; 62
    3d3a:	0f be       	out	0x3f, r0	; 63
    3d3c:	cd bf       	out	0x3d, r28	; 61
    3d3e:	09 94       	ijmp

00003d40 <__epilogue_restores__>:
    3d40:	2a 88       	ldd	r2, Y+18	; 0x12
    3d42:	39 88       	ldd	r3, Y+17	; 0x11
    3d44:	48 88       	ldd	r4, Y+16	; 0x10
    3d46:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d48:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d50:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d52:	b9 84       	ldd	r11, Y+9	; 0x09
    3d54:	c8 84       	ldd	r12, Y+8	; 0x08
    3d56:	df 80       	ldd	r13, Y+7	; 0x07
    3d58:	ee 80       	ldd	r14, Y+6	; 0x06
    3d5a:	fd 80       	ldd	r15, Y+5	; 0x05
    3d5c:	0c 81       	ldd	r16, Y+4	; 0x04
    3d5e:	1b 81       	ldd	r17, Y+3	; 0x03
    3d60:	aa 81       	ldd	r26, Y+2	; 0x02
    3d62:	b9 81       	ldd	r27, Y+1	; 0x01
    3d64:	ce 0f       	add	r28, r30
    3d66:	d1 1d       	adc	r29, r1
    3d68:	0f b6       	in	r0, 0x3f	; 63
    3d6a:	f8 94       	cli
    3d6c:	de bf       	out	0x3e, r29	; 62
    3d6e:	0f be       	out	0x3f, r0	; 63
    3d70:	cd bf       	out	0x3d, r28	; 61
    3d72:	ed 01       	movw	r28, r26
    3d74:	08 95       	ret

00003d76 <itoa>:
    3d76:	fb 01       	movw	r30, r22
    3d78:	9f 01       	movw	r18, r30
    3d7a:	e8 94       	clt
    3d7c:	42 30       	cpi	r20, 0x02	; 2
    3d7e:	c4 f0       	brlt	.+48     	; 0x3db0 <itoa+0x3a>
    3d80:	45 32       	cpi	r20, 0x25	; 37
    3d82:	b4 f4       	brge	.+44     	; 0x3db0 <itoa+0x3a>
    3d84:	4a 30       	cpi	r20, 0x0A	; 10
    3d86:	29 f4       	brne	.+10     	; 0x3d92 <itoa+0x1c>
    3d88:	97 fb       	bst	r25, 7
    3d8a:	1e f4       	brtc	.+6      	; 0x3d92 <itoa+0x1c>
    3d8c:	90 95       	com	r25
    3d8e:	81 95       	neg	r24
    3d90:	9f 4f       	sbci	r25, 0xFF	; 255
    3d92:	64 2f       	mov	r22, r20
    3d94:	77 27       	eor	r23, r23
    3d96:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__udivmodhi4>
    3d9a:	80 5d       	subi	r24, 0xD0	; 208
    3d9c:	8a 33       	cpi	r24, 0x3A	; 58
    3d9e:	0c f0       	brlt	.+2      	; 0x3da2 <itoa+0x2c>
    3da0:	89 5d       	subi	r24, 0xD9	; 217
    3da2:	81 93       	st	Z+, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	00 97       	sbiw	r24, 0x00	; 0
    3da8:	a1 f7       	brne	.-24     	; 0x3d92 <itoa+0x1c>
    3daa:	16 f4       	brtc	.+4      	; 0x3db0 <itoa+0x3a>
    3dac:	5d e2       	ldi	r21, 0x2D	; 45
    3dae:	51 93       	st	Z+, r21
    3db0:	10 82       	st	Z, r1
    3db2:	c9 01       	movw	r24, r18
    3db4:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <strrev>

00003db8 <strrev>:
    3db8:	dc 01       	movw	r26, r24
    3dba:	fc 01       	movw	r30, r24
    3dbc:	67 2f       	mov	r22, r23
    3dbe:	71 91       	ld	r23, Z+
    3dc0:	77 23       	and	r23, r23
    3dc2:	e1 f7       	brne	.-8      	; 0x3dbc <strrev+0x4>
    3dc4:	32 97       	sbiw	r30, 0x02	; 2
    3dc6:	04 c0       	rjmp	.+8      	; 0x3dd0 <strrev+0x18>
    3dc8:	7c 91       	ld	r23, X
    3dca:	6d 93       	st	X+, r22
    3dcc:	70 83       	st	Z, r23
    3dce:	62 91       	ld	r22, -Z
    3dd0:	ae 17       	cp	r26, r30
    3dd2:	bf 07       	cpc	r27, r31
    3dd4:	c8 f3       	brcs	.-14     	; 0x3dc8 <strrev+0x10>
    3dd6:	08 95       	ret

00003dd8 <_exit>:
    3dd8:	f8 94       	cli

00003dda <__stop_program>:
    3dda:	ff cf       	rjmp	.-2      	; 0x3dda <__stop_program>
